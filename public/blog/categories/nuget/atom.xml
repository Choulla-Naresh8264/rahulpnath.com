<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nuget | Rahul Nath]]></title>
  <link href="http://yoursite.com/blog/categories/nuget/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-08-03T12:42:52+05:30</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series: Image Caching Library - JetImageLoader]]></title>
    <link href="http://yoursite.com/blog/windows-phone-series-image-caching-library-jetimageloader/"/>
    <updated>2014-04-18T05:26:17+05:30</updated>
    <id>http://yoursite.com/blog/windows-phone-series-image-caching-library-jetimageloader</id>
    <content type="html"><![CDATA[<p>Recently on a client project, I had a requirement to cache images locally on the phone and then load it from there from subsequent requests. Initially I had plans for custom implementing this using sqlite and custom code. While googling for this, I came across an awesome custom library that solved my problem with just a few lines of code – <a href="https://github.com/artem-zinnatullin/jet-image-loader">JetImageLoader</a> by <a href="https://github.com/artem-zinnatullin">Artem</a>. This is available via nuget, making it easy to install</p>

<p><a href="http://www.nuget.org/packages/WP-JetImagLoader/0.8.5"><img src="http://rahulpnath.com/blog/wp-content/uploads/2014/04/image_thumb.png" alt="image" /></a></p>

<p>Integrating this library into any existing project is even easier and is just about using a converter on your Image datatemplate as shown below.</p>

<p>[xml]<Image Source="{Binding UserAvatarUrl, Converter={StaticResource JetImageLoaderConverter}}"/>[/xml]</p>

<p>You would need to add a custom converter and add this as part of the resource. There is a sample for this on Github where the <a href="https://github.com/artem-zinnatullin/jet-image-loader">project source</a> also lives.</p>

<p>[csharp]public class JetImageLoaderImplementation
{
    public static readonly BaseMemoryCache&lt;string,stream> MemoryCacheImpl = new WeakMemoryCache&lt;string,stream>();
    public static readonly BaseStorageCache StorageCacheImpl = new LimitedStorageCache(IsolatedStorageFile.GetUserStoreForApplication(), &ldquo;\image_cache&rdquo;, new SHA1CacheFileNameGenerator(), 1024 * 1024 * 10);</p>
    public static JetImageLoaderConfig GetJetImageLoaderConfig()
    {
        return new JetImageLoaderConfig.Builder
        {
            IsLogEnabled = true,
            CacheMode = CacheMode.MemoryAndStorageCache,
            DownloaderImpl = new HttpWebRequestDownloader(),
            MemoryCacheImpl = MemoryCacheImpl,
            StorageCacheImpl = StorageCacheImpl
        }.Build();
    }
}[/csharp]
[csharp]public class JetImageLoaderConverter : BaseJetImageLoaderConverter
{
    protected override JetImageLoaderConfig GetJetImageLoaderConfig()
    {
        return JetImageLoaderImplementation.GetJetImageLoaderConfig();
    }</p>

<pre><code>public override object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)
{
    return base.Convert(value, targetType, parameter, culture);
}
</code></pre>

<p>}[/csharp]</p>

<p>This is all you need to do to have all the images that are bound with the converter to be cached locally on to the Memory and storage. You could also choose to cache it to only memory or storage. Do check this out in case you want to have images cached locally.</p>

<p>The nuget is for Windows 8 library, but there is also a version for <a href="https://github.com/artem-zinnatullin/jet-image-loader/tree/master/JetImageLoader.Wp7">WP7.1 avaialble on Github</a> (which apparently is a pull request from me, indeed my very first on Github that got merged)</p>
]]></content>
  </entry>
  
</feed>
