<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/web/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2014-08-07T22:01:44+05:30</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KnockoutJS for XAML Developers]]></title>
    <link href="http://rahulpnath.com/blog/knockoutjs-for-xaml-developers/"/>
    <updated>2014-07-08T05:05:39+05:30</updated>
    <id>http://rahulpnath.com/blog/knockoutjs-for-xaml-developers</id>
    <content type="html"><![CDATA[<p>After a very long time since I have actually wanted to move out to web development, recently I have started developing a website as part of my personal project, along with a friend of mine. I have been into desktop/mobile development on Microsoft technologies, using XAML for a very long time. <a href="http://www.rahulpnath.com/blog/tag/mvvm/">Model-View-View Model (MVVM)</a> is a pattern that got popular because of the powerful binding engine in XAML. It is always comforting to see familiar patterns while moving into unexplored technology areas. Same is the reason I chose to explore <a href="http://knockoutjs.com/index.html">KnockoutJS</a>(KO), which simplifies dynamic JavaScript UIs with the MVVM pattern.</p>

<p><img src="/MVVM_Knockoutjs.jpg" alt="MVVM Knockout" /></p>

<p>KnockoutJS acts as the binding engine in XAML and binds your ViewModel(VM) with your View as shown in the figure. As you expect, like in XAML it provides a way to specify declarative-bindings on html using the <a href="http://knockoutjs.com/documentation/binding-syntax.html">data-bind</a> attribute and is also widely <a href="http://knockoutjs.com/documentation/browser-support.html">supported across different browsers</a>. The Model is the data that is populated from the server after your business logics applied,  mostly populated out of Ajax JSON calls from a web service/api. This Model data might mostly need some transformation to map to your View needs which is what exactly the ViewModel does. It transforms the Model data and wraps over it to provide features like 2-way-binding, client side validation, transformation of properties, UI specific state and a lot more</p>

<p>We will see below how some of the major constructs in XAML map over to KnockoutJS.</p>

<blockquote><p><em>I assume that you are a XAML developer and am not including detailed code samples for the XAML part and would be just mentioning them.</em></p></blockquote>

<p><strong>1. INotifyPropertyChanged</strong></p>

<p>Notifying data bounded clients on updates to the underlying bound data is a typical scenario in XAML, where we use <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110">INotifyPropertyChanged</a>.aspx) interface. This is also required on web pages and is handled by KO using <em><a href="http://knockoutjs.com/documentation/observables.html">observables</a></em></p>

<pre><code class="javascript">var personVM = {
    Name: ko.observable('Rahul'),
    Age: ko.observable(50)
};
</code></pre>

<p>Declaring the property as an observable, makes any changes to the property immediately reflect on the bound UI elements, just like it happens on a property of a class that implements INotifyPropertyChanged.</p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="CuIfK" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p><strong>2. DataContext</strong></p>

<p>In XAML we set the DataContext as the ViewModel to start binding the data from the ViewModel on the UI. Similarly in KO we have to call on to <em>applyBindings </em>method, passing on the ViewModel object to bind. You can see this in the above sample. You can also pass in an additional parameter indicating the part of the document that you want to explicitly bind to.</p>

<p><strong>3. DataBinding</strong></p>

<p>Binding the data to the UI in XAML is done declaratively using the <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding(v=vs.110">Binding</a>.aspx) syntax. Similarly in KO we use the <a href="http://knockoutjs.com/documentation/binding-syntax.html">data-bind</a> attribute to bind to a registered, built-in or custom, binding handler. As opposed to XAML where we bind to different properties, in KO all bindings are mentioned in the same data-bind attribute, separated by comma. A binding in KO consists of a name value pair separated by a colon, where the name corresponds to the binding handler/the property that we are binding to and the value from the VM that we need it to be bound to. A simple example of binding to the text property of a label would be <em>data-bind=&ldquo;text: Name&rdquo; . </em>You can also use the <a href="http://knockoutjs.com/documentation/with-binding.html">with binding</a> to create binding contexts for descendant elements as in XAML</p>

<p><strong>4. INotifyCollectionChanged</strong></p>

<p>In XAML updates to a collection is usually handled using an <a href="http://msdn.microsoft.com/en-us/library/ms668604(v=vs.110">ObservableCollection</a>.aspx), which notifies the UI whenever an item is added/removed to the collection. Similarly in KO you can use <em>observableArray</em>, which behaves the same as ObservableCollection. It notifies the bound UI elements whenever an element is added/removed from the array. Updates or changes to individual properties on the actual objects in the array is notified to the UI only if the property is an <em>observable, </em>as in XAML. In the below sample, you can try adding an observable item or a non-observable item to the list. As soon as you add an item it reflects in the list. But selecting and editing an item will reflect in the list only if you are editing an observable item. </p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="FreIv" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p><strong>5. Dependent Properties</strong></p>

<p>In XAML when there are properties dependent on others , to notify changes we have to explicitly call RaisePropertyChanged on all the dependent properties. A very common example is below</p>

<pre><code class="csharp">private string firstName;
public string FirstName
{
   get { return firstName; }
   set
   {
        if (firstName!= value)
        {
            firstName= value;
            OnPropertyChanged("FirstName");
            OnPropertyChanged("FullName");
        }
   }
}
public string FullName
{
    get { return FirstName +" " + LastName; }
}
</code></pre>

<p>Here whenever FirstName is updated to notify UI elements bound to FullName would be updated only if we explicitly call PropertyChanged on FullName property too. In KO this is handled using <a href="http://knockoutjs.com/documentation/computedObservables.html">computed observables</a> and is much more elegant.</p>

<pre><code class="javascript">this.fullName = ko.computed(function() {
    return this.firstName() + " " + this.lastName();
}, this);
</code></pre>

<p><strong>6. Commanding</strong></p>

<p>Commanding is how user interactions are bound to actions/functions on ViewModel, which will in turn perform something useful for the user. Like e.g. clicking a button. In KO this is handled using the same <a href="http://knockoutjs.com/documentation/click-binding.html">data-bind</a> attribute using key’s corresponding to event handlers. &#8220;</p>

<pre><code class="html">&lt;button data-bind="click: performSomeAction"&gt;Click me&lt;/button&gt;
</code></pre>

<p><strong>7. Value Converters </strong></p>

<p>The <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter(v=vs.110">IValueConverter</a>.aspx) interface is to create a converter that can be applied on a Binding to provide custom logic on the data that gets bounded to the UI element. For a similar functionality in KO, there is <a href="http://knockoutjs.com/documentation/computedObservables.html">writable computed observable</a> to convert to and from a specific format of data. The read and write function on the computed observable, corresponds to the Convert and ConvertBack functions on IValueConverter on XAML.</p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="dJhLm" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p>There are a lot of useful resources on the web that are freely available to get started with KnockoutJS. Some of them are listed below</p>

<ul>
<li><p><a href="http://knockoutjs.com/documentation/introduction.html">Official Documentation</a></p></li>
<li><p><a href="http://learn.knockoutjs.com/">Learn By Doing</a></p></li>
<li><p><a href="https://www.youtube.com/results?search_query=knockout+javascript">Videos</a></p></li>
<li><p><a href="http://channel9.msdn.com/Search?term=knockout#ch9Search">More Videos</a></p></li>
</ul>


<p>Hope you find this useful to easily understand KnockoutJS, re-applying your XAML knowledge . Do drop in a comment in case you find any other similarities with XAML that I have missed mentioning here and I would be happy to add it in. I am sure I have not covered it completely!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP – a Short Dive]]></title>
    <link href="http://rahulpnath.com/blog/http-a-short-dive/"/>
    <updated>2013-08-18T21:34:48+05:30</updated>
    <id>http://rahulpnath.com/blog/http-a-short-dive</id>
    <content type="html"><![CDATA[<p>Day in and day out, knowingly or unknowingly we get to use http. While accessing a web site, even the current one that you are reading, you are using http. Http is an application protocol that forms the basis of data communication for the web. As an end user of web pages, it is not necessary to be aware of the protocol, but as developers we ought to know in detail about the protocol and its possibilities.</p>

<p>You could find in detail about the entire protocol spec, <a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">here</a>.  If you have already gone through it in its entirety then this blog might be of very little or no help at all. For the others, who I suppose majority of us would be this is just about pointing you to another resource that would take hardly a couple of hours of your time, to get enough information on the protocol.</p>

<p><img class="left" src="/images/http_succinctly.png"  alt="http succinctly" /></p>

<p>With all the concise and precise information , <strong><a href="http://www.syncfusion.com/resources/techportal/ebooks?UTM_medium=rahulblogreview">Syncfusion’s Succinctly series</a></strong> has a very good resource covering <a href="http://www.syncfusion.com/resources/techportal/ebooks/http?UTM_medium=rahulblogreview"><strong>HTTP</strong></a>.  As the name, succinctly suggests, this book series gives you enough information that enables you to master a wide range of topics.  All you need to do is to fill up a contact form and get access to all the books in kindle and pdf format, all for free.  As a company this is a a very good contribution that Syncfusion is making to the community giving away all these resources for free.</p>

<p>The HTTP Succinctly book is written by <a href="http://odetocode.com/">Scott Allen</a> and it covers Resources, Messages, Connections, Web Architecture, State and Security.</p>

<p>The book details on the url format , encoding and various media types and how they are served when a request is made. It expands on the request , response  messages and and different response status codes.  Scott goes on to explain on how http uses the underlying tcp protocol, to transfer messages across the network and how browsers open parallel connections to speed up the way web sites are delivered to us.  If it was not for proxies and caching the web would not be as scalable as it is today. The protocol would not be complete without mentioning about these and so does this one.  Http being a stateless protocol, maintaining state is a very important thing for developers to provide a good experience to the users. The book touches on cookies, its uses, types and downsides. The book closes on discussing about security and different modes of authentication.
The HTTP Succinctly discusses on all the important topics of the protocol required to us as developers, and I would strongly urge any web developer to read through this 55 pages of concise and precise information. Having such books takes away the need for searching through the web and figuring out all related articles and blog posts to get the required information.  Hope to see more books getting added into this series of books.</p>
]]></content>
  </entry>
  
</feed>
