<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blogging | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/blogging/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-03-18T13:26:42+11:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimizing Octopress Workflow for New Posts]]></title>
    <link href="http://rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/"/>
    <updated>2016-01-20T22:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts</id>
    <content type="html"><![CDATA[<p>Over the past month I had thought of migrating this blog to Hugo, a static site generator that is faster than the current one, Octopress. Lack of workflow for creating new posts and slower build times were the main reasons. I am the kind of person when writing post want to see often, how it looks like on the real site. With the current number of posts it takes around 40-50 seconds to build the entire site and it makes me to wander off to something else while the build is happening - at times it takes a long time to get back to writing!. But migrating to a new platform has a lot of challenges and time-consuming and I did not want to invest my time in that, so though of looking out for ways to optimize the current process. A bit of googling and playing around with Ruby, solved both of the major issues and I have an improved workflow!</p>

<h4><strong>Draft workflow</strong></h4>

<p>I was lucky to find this <a href="http://neverstopbuilding.com/how-to-enhance-your-octopress-draft-and-heroku-deploy-process">post</a> which handled most of the draft workflow process. Most of the code below is used from there with a very few minor additions. Newer versions of Jekyll support <a href="http://jekyllrb.com/docs/drafts/">working with drafts</a> and uses the &lsquo;<em>&ndash;drafts</em>&rsquo; switch to build the drafts (instead of using published flag as in thr above linked post), that are in &lsquo;<em>_drafts</em>&rsquo; folder. Drafts are posts which does not have date&rsquo;s, so I added in a placeholder text, &lsquo;<em>thisIsStillADraft</em>&rsquo;, in the yaml front matter of the post which will later be replaced with the post publish date. Also added in the code to open the default writer with the newly created post</p>

<pre><code class="ruby Rake new_draft"># usage rake new_draft[my-new-draft] or rake new_draft['my new draft']
desc "Begin a new draft in #{source_dir}/#{drafts_dir}"
task :new_draft, :title do |t, args|
  if args.title
    title = args.title
  else
    title = get_stdin("Enter a title for your post: ")
  end
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  mkdir_p "#{source_dir}/#{drafts_dir}"
  filename = "#{source_dir}/#{drafts_dir}/#{title.to_url}.#{new_post_ext}"
  if File.exist?(filename)
    abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
  end
  puts "Creating new draft: #{filename}"
  open(filename, 'w') do |post|
    post.puts "---"
    post.puts "layout: post"
    post.puts "title: \"#{title.gsub(/&amp;/,'&amp;amp;')}\""
    post.puts "comments: true"
    post.puts "categories: "
    post.puts "tags: "
    post.puts "thisIsStillADraft:"
    post.puts "keywords: "
    post.puts "description: "
    post.puts "---"
  end
  system %{cmd /c "start #{filename}"}
end
</code></pre>

<p>The publish draft task just asks for the post to publish and replaces the placeholder text with the current date time. Also it moves the post from the &lsquo;<em>_drafts</em>&rsquo; folder to the &lsquo;<em>_posts</em>&rsquo; folder with the file name appended with the date time. Since I run this just before deploying a post, the date on the post will be the actual publish date, and not the date I started writing the post (usually writing a  post spans over multiple days).</p>

<pre><code class="ruby Rake publish_draft"># usage rake publish_draft
desc "Select a draft to publish from #{source_dir}/#{drafts_dir} on the current date."
task :publish_draft do
  drafts_path = "#{source_dir}/#{drafts_dir}"
  drafts = Dir.glob("#{drafts_path}/*.#{new_post_ext}")
  drafts.each_with_index do |draft, index|
    begin
      content = File.read(draft)
      if content =~ /\A(---\s*\n.*?\n?)^(---\s*$\n?)/m
        data = YAML.load($1)
      end
    rescue =&gt; e
      puts "Error reading file #{draft}: #{e.message}"
    rescue SyntaxError =&gt; e
      puts "YAML Exception reading #{draft}: #{e.message}"
    end
    puts "  [#{index}]  #{data['title']}"
  end
  puts "Publish which draft? "
  answer = STDIN.gets.chomp
  if /\d+/.match(answer) and not drafts[answer.to_i].nil?
    mkdir_p "#{source_dir}/#{posts_dir}"
    source = drafts[answer.to_i]
    filename = source.gsub(/#{drafts_path}\//, '')
    dest = "#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{filename}"
    puts "Publishing post to: #{dest}"
    File.open(source) { |source_file|
      contents = source_file.read
      contents.gsub!(/^thisIsStillADraft:$/, "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}")
      File.open(dest, "w+") { |f| f.write(contents) }
    }
    FileUtils.rm(source)
  else
    puts "Index not found!"
  end
end
</code></pre>

<p>With these two new rake tasks, I can now create as many draft posts at a time and publish them once ready.</p>

<h4><strong>Improving the build time</strong></h4>

<p>Jekyll build command options provides a switch, &lsquo;<em>configuration</em>&rsquo;, that allows to pass a configuration file instead of using &lsquo;<em>_config.yml</em>&rsquo;. In the configuration file we can specify a &lsquo;exclude&rsquo; option to exclude the directories and/or files from the build. I created a new task for building only the current drafts, by specifying the &lsquo;<em>&ndash;drafts</em>&rsquo; switch and a dynamically generated configuration file, <em>_previewconfig.yml</em>, which excludes the &lsquo;<em>_posts</em>&rsquo; folder. This dramatically increases the build time, and completes almost immediately after a making a change to a post. This fits perfectly into my workflow, as while writing new posts I do not want to see any already published posts. You can  add the dynamically generated configuration file name to the <em>.gitignore</em> as I do not delete it in the tasks. I did not want to use the &lsquo;<em>rake isolate</em>&rsquo; task that is already present in the  rakefile, as that does not integrate with the draft workflow and unnecessarily moves all the posts to a temporary place.</p>

<pre><code class="ruby">desc "preview the site in a web browser with all the draft posts"
task :previewdrafts do
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  puts "Starting to watch source with Jekyll and Compass. Starting Rack on port #{server_port}"
  system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
  File.open("_config.yml") { |source_file|
      contents = source_file.read
      File.open("_previewconfig.yml", "w+") { |f|
      f.write(contents)
      f.puts("exclude: [\"#{posts_dir}\"]") 
      }
    }

  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=&gt;"preview"}, "jekyll build --watch --drafts --config _previewconfig.yml")
  compassPid = Process.spawn("compass watch")
  rackupPid = Process.spawn("rackup --port #{server_port}")

  trap("INT") {
    [jekyllPid, compassPid, rackupPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
    exit 0
  }

  [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }
end
</code></pre>

<h4><strong>Dropbox integration</strong></h4>

<p>At times, I have started to draft blog posts while commuting to work from my mobile device, so I wanted to sync my draft posts to <a href="https://db.tt/bvYw3pL6">Dropbox</a>, so that I can edit it from my <a href="http://www.rahulpnath.com/blog/review-two-months-and-counting-android-and-nexus-5/">mobile phone</a>. Apps like <a href="https://play.google.com/store/apps/details?id=net.keepzero.markdrop&amp;hl=en">MarkDrop</a>/<a href="https://play.google.com/store/apps/details?id=net.keepzero.markdrop&amp;hl=en">JotterPad</a> integrates with Dropbox and supports Markdown editing. I set up a drafts folder on my Dropbox folder on laptop, which is automatically synced using the <a href="https://www.dropbox.com/install">Dropbox application</a>. I then used <a href="https://technet.microsoft.com/en-us/library/cc753194.aspx">Mklink</a> to create a symbolic link from the folder on Dropbox to my drafts folder in my blog repository. Whenever a new draft post is added, it gets automatically inserted into the Dropbox folder, which will then be synced to cloud and available for edit on my mobile phone too. (Part of this post is written from my mobile!)</p>

<pre><code class="text">mklink /D "C:\blog\_drafts" "C:\dropbox\_drafts"
</code></pre>

<h4><strong>Cmder integration</strong></h4>

<p><a href="http://cmder.net/">Cmder</a> is a portable console emulator for Windows and provides a good nice looking feature rich console experience on Windows and is one of my <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">favourite tools</a>. Creating alias for commands is one of the features, that allows to create a short key combination for an otherwise long command. You can use this to create commands for the task in Octopress like below</p>

<pre><code class="text">alias rp=rake previewdrafts

// Below are the list of alias that I have for the rake tasks
rp=rake previewdrafts
rps=rake preview // Preview the whole site
rd=rake deploy
rnd=rake new_draft["$"] // Takes in the post name as parameter
rpd=rake publish_draft
rd=rake deploy
</code></pre>

<p><strong>So my new workflow is</strong></p>

<p>rnd Optimizing Octopress Workflow for New Posts <br/>
rp <br/>
rpd <br/>
rps <br/>
rd</p>

<p>It&rsquo;s much faster, cleaner and easier publishing new posts. To see the latest code for the rake tasks head over to the original file on <a href="https://github.com/rahulpnath/rahulpnath.com/blob/master/Rakefile">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static Generator is All a Blog Needs - Moving to Octopress]]></title>
    <link href="http://rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress/"/>
    <updated>2014-08-28T02:04:12+10:00</updated>
    <id>http://rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress</id>
    <content type="html"><![CDATA[<p>Wordpress is what that has been powering my blog for sometime and it definitely is a blogging engine to <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">get started with</a> ease. But with time, I have been noticing that the load time is very high and there are a lot of plugins in the processing pipeline, even to do very small things. This definitely is not that great for a simple blog, where users(including me) expect fast page load times.</p>

<blockquote><p>For blogging, Wordpress is just extra baggage that you keep along that never gets used. Except for discussions, a blog is just static content and that is all it requires.</p></blockquote>

<p>There are a lot of <a href="https://www.staticgen.com/">static site generators</a> out there today and any of them should be just fine. I wanted to choose a platform that was not on Microsoft stack and Octorpess was just perfect, it being on Ruby.<a href="http://octopress.org/">Octopress</a>, which is <a href="http://jekyllrb.com/">Jekyll</a> based, provides almost all the features that a blog needs out of the box or via plugins. The <a href="http://octopress.org/docs/setup/">documentation</a> for Octopress is very good and takes you through setting it up with ease.</p>

<p><strong>Migrating from Wordpress</strong></p>

<p>The <a href="https://github.com/thomasf/exitwp">exitwp</a> tool is what I used to get all my posts from Wordpress into Markdown format, so that it can be imported into Octopress. The steps are direct and is detailed out in the readme. Code formatting was an issue after the migration. I had been mainly using <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a> for code formatting in Wordpress. Formatting this took a bit of time, as I had to go through each post and do the necessary modifications to use the <a href="http://octopress.org/docs/plugins/backtick-codeblock/">Backtick Code Blocks</a>.</p>

<p><strong>Mapping the images</strong> from the wp_content folder to a new folder was one another task. I added a <a href="http://jekyllrb.com/docs/variables/">new variable in the config</a>, to track the images folder so that I can change this to something else too later(like a CDN) and used that to refer images. In cases where the images needs to be aligned to a specific side, I used the <a href="http://stackoverflow.com/questions/255170/markdown-and-image-alignment">image tag directly</a>.</p>

<pre><code class="">![Microsoft Community Contributor Award Certificate for Rahul P Nath](/images/mcca_rahulpnath.png)

&lt;img class="left" src="/images/Outlook_folders_productivity.png" alt="Outlook_folders_productivity" /&gt;
</code></pre>

<p>Also updated the <em>_config.yml</em> with the required details, permalink structure, google analytics, asides that are required and linked the social accounts. Linking social accounts is important for <a href="https://plus.google.com/authorship">Content Authorship</a>, and everybody should be doing that, irrespective of the blogging engine. Disqus commenting system is supported in Octopress, You can use <a href="https://wordpress.org/plugins/disqus-comment-system/">Disqus Wordpress plugin</a> to export the comments from the exiting blog to disqus.I have also added in some custom plugins that are listed out <a href="https://github.com/rahulpnath/rahulpnath.com/blob/master/MyPlugins.markdown">here</a>. Also setup a <a href="https://www.google.co.in/cse/">search</a> for your site that would help readers find what they want.</p>

<p><strong>Deploy</strong></p>

<p>The blog is deployed to github and pushed to azure from there using <a href="http://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/">coninuous integration</a>. This blogpost <a href="http://www.ewal.net/2012/08/28/octopress-plus-windows-azure-web-sites/">here</a> details out on how to set up rake_deploy to push the blog to azure. Basically, we have a folder named <em>_azure</em>, that is gitignored in the source branch of the blog and included in the one that gets deployed. This would contain only the generated static files required for the blog that gets generated with <em>rake generate</em></p>

<p><strong>Tuning the blog for improving load time</strong></p>

<p>Once everything is setup it is really good to run some tools to check how your site is performing. Here are a couple that I found really useful.</p>

<ul>
<li><a href="https://developer.yahoo.com/yslow/">YSlow</a></li>
<li><a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a></li>
</ul>


<p>Running one of these, would really set you back for sometime and provide you with some performance improvement suggestions.</p>

<ul>
<li>Caching: - To enable caching, I added the required configuration entries in the <a href="https://github.com/rahulpnath/rahulpnath.com/blob/blog/web.config">web.config</a>(as I am hosting in azure). Since the site is all static content you can safely set caching to all the items.</li>
</ul>


<pre><code>&lt;staticContent&gt;
    &lt;mimeMap fileExtension="woff" mimeType="application/font-woff" /&gt;
    &lt;clientCache httpExpires="Sun, 29 Mar 2020 00:00:00 GMT" cacheControlMode="UseExpires" /&gt;
&lt;/staticContent&gt;
</code></pre>

<ul>
<li><p>Images: <a href="https://developers.google.com/speed/docs/insights/OptimizeImages">Optimizing images</a> includes multiple steps of getting the image sizes correct as required, removing out any unnecessary metadata to reduce size, reducing the pixels. Couple of tools like <a href="http://www.imagemagick.org/">ImageMagick</a>, <a href="http://pnggauntlet.com/">PngGauntlet</a> would definitely help in reducing and optimizing the images. This is a must do exercise and will definitely improve the load time.</p></li>
<li><p>Favicon: With lots of devices, browsers and clients out there, a single favicon no more serves the purpose. <a href="http://realfavicongenerator.net/">Real Favicon Generator</a> is there to the resue, where you can upload a single image and it will give you all the required formats and sizes.</p></li>
</ul>


<p><strong>Finding Broken Links:</strong>
This is a good time to find out any broken links in your blog that has been lying around since some time.Make sure that you run <a href="http://home.snafu.de/tilman/xenulink.html">Xenu&rsquo;s Link Sleuth</a>, to find and fix them.</p>

<p><strong>Writing New Posts:</strong>
I have been a great fan of <a href="http://www.microsoft.com/en-in/download/details.aspx?id=8621http://www.microsoft.com/en-in/download/details.aspx?id=8621">Windows Live Writer</a> for blogging on Wordpress. But now that I can use Markdown to write posts, I am currently using <a href="http://markdownpad.com/">MarkdownPad</a>. For editing the blog settings, layout, config I use <a href="http://www.sublimetext.com/">Sublime Text</a>, which is a great light weight text editor. I am yet to find a good Markdown plugin for it on Windows, so that I can stick to just using this one super cool editor. (Please do let know if you know of any good plugins for Markdown on Sublime in Windows, that provides live preview feature too). Also since this is integrated into git, it really fits into the workflow and keeping backups is more easy.</p>

<p>The blog is so light weight and loads faster as compared to Wordpress. After all the blog is composed of just static pages and it does not demand a database and lots of other processing that comes with Wordpress. So moving out to a static generated site is something that you should think of if you have not already or have you already moved out. What are your thoughts on this!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get started with your blog]]></title>
    <link href="http://rahulpnath.com/blog/get-started-with-your-blog/"/>
    <updated>2013-09-17T23:31:58+10:00</updated>
    <id>http://rahulpnath.com/blog/get-started-with-your-blog</id>
    <content type="html"><![CDATA[<p>If you are a programmer and don’t have a blog, then there is no better time than now to start one. <a href="http://channel9.msdn.com/Shows/HanselminutesOn9/Hanselminutes-on-9-Social-Networking-for-Developers-Part-1-Every-Developer-Needs-a-Blog">Every developer should have a blog</a>, for a very simple reason – <strong>Otherwise all your work is just going wasted!.</strong> I can bet that the best of your code or ideas would either be in some old email that you hardly have access to or archived or in some backup hard-disk waiting to be formatted or already formatted and all gone. All the thought, research and creativity that you would have spent would be lying just wasted and with little or no use. Having an online presence has really become a necessity in today&rsquo;s connected world, and a blog is the best place to show your presence. I started off answering <a href="http://rahulpnath.com/blog/stars-do-count/">mdsn forums</a> and then figured that most of the people had similar questions and I was giving the same answers many a times, which gave me the thought of blogging answers and posting links to them. So anytime someone asks you something or you do something awesome blog it, so that your work does not get wasted and more people would find it useful. As with the <a href="http://en.wikipedia.org/wiki/Rule_of_three_(computer_programming">rule of three</a>) for refactoring, with blogging it’s just rule of one – <em><strong>blog it always </strong>(</em>even this blog is because some one asked me after I recently moved on to a self hosted blog<em>).</em>
I have had a taste of blogspot and WordPress blog web hosting service,  before moving on to a self-hosted blog here. I think you would have guessed which one I would suggest you to get if you are starting your blog – a self hosted one. Indeed there is some effort that goes in to maintain the blog, but its worth every effort that you put.</p>

<p>I use WordPress as the blogging software and am running it on a Linux server (had to change over from windows, as there were a lot of compatibility issues that I faced). WordPress is a very popular blogging engine and so has an immense collection of themes, plug-in and add-on that are available to enhance yours and your readers experience. Once you get your wordpress installed on your self hosted domain, which should be as easy as clicking a button, install the below plugin’s.</p>

<ol>
<li><p>The first thing would be to <strong>connect with </strong><a href="http://jetpack.me/"><strong>jetpack</strong></a>. This would give you a lot of features including stats, social integration, publicize options and many more.</p></li>
<li><p>Connect with <a href="http://akismet.com/"><strong>akismet</strong></a> using the <a href="http://wordpress.org/plugins/akismet/">plug-in</a> for preventing/moderating spam comments. Akismet provides a free subscription for personal users.</p></li>
<li><p><a href="http://feedburner.google.com/"><strong>Claim your feed</strong></a> and put it on your blog. You can again use a <a href="http://wordpress.org/plugins/feedburner-form/">feedburner-form</a> if you want.</p></li>
<li><p>Integrate with<strong> </strong><a href="http://www.google.com/analytics/"><strong>Google analytics</strong></a>, if you want more detailed statistics than the one provided with jetpack. Once you get your code, you can use the <a href="http://wordpress.org/plugins/googleanalytics/">plug-in</a> to integrate with your site. This will add the necessary code in all your pages header.</p></li>
<li><p>Make sure you have a <strong>backup plan</strong>, as you would not want all your data to vanish off if something happens with the hosting server. You could either use vaultpress or use freely available plug-in to back up to popular cloud storage like Dropbox, Skydrive or Google drive.</p></li>
<li><p>Get a <strong>good theme</strong> for your blog, there a lot of free and paid ones out there.</p></li>
</ol>


<p>Now that you have most of the things setup, it’s time for you to put up your first page, <a href="http://rahulpnath.com/blog/about/">About me</a>. This is very important as it gives a sense of credibility to your readers, so make sure you have one. For creating content on to your blog, you can either use the online editor or use some offline editor. Personally I use <a href="http://www.microsoft.com/en-in/download/details.aspx?id=8621">Windows live writer</a>. I love using this and all my blogs are written using this. The one plug-in that you would want to get, if you are a developer is <a href="http://precode.codeplex.com/">PreCode</a>, which makes inserting code really easy.
There are a lot more things that your blog would need, you would soon find that out and when you do, please leave a note of it in the comments section below. Happy Blogging!</p>

<p><strong>Edit</strong>: Couple of people were asking about getting started with a free blog. <a href="http://wordpress.com/">Wordpress.com</a> or <a href="https://www.tumblr.com/">Tumblr</a> would be a very good option to start with. Personally I used Wordpress as I felt that better. The advantage with tumblr over wordpress is that you can <a href="http://www.tumblr.com/docs/en/custom_domains">link your custom domain name with tumblr for free</a> while <a href="http://en.support.wordpress.com/domains/map-existing-domain/">worpress charges for linking a custom domain</a>. (You would need to pay for the custom domain in either cases). But then I ended up hosting all myself after moving away from Wordpress.com.</p>
]]></content>
  </entry>
  
</feed>
