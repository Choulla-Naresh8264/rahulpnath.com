<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/productivity/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-04-26T12:23:58+10:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git checkout TFS]]></title>
    <link href="http://rahulpnath.com/blog/git-checkout-tfs/"/>
    <updated>2016-04-15T05:23:08+10:00</updated>
    <id>http://rahulpnath.com/blog/git-checkout-tfs</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a year since using <a href="https://git-scm.com/">Git</a> as my mainstream version control system and I am loving it! Before Git, I had used Team Foundation Version Control (TFVC) for a very long time and was so used to it that I found Git a bit complex and overwhelming in the beginning. Team Foundation Server (TFS) is the whole product suite from Microsoft that provides source code management. Until TFS 2013, it supported only TFVC which is when it introduced <a href="https://blogs.msdn.microsoft.com/mvpawardprogram/2013/11/13/git-for-tfs-2013/">Git in TFS</a>. Even today people use TFS and TFVC synonymously (like in the title of this post) though they are not the same.</p>

<h3>Fundamental shift in thinking</h3>

<p>By design, Git is a Distributed VCS, whereas TFS is centralized one. It takes quite a while to get your head around this and what it actually means. By definition</p>

<blockquote><p><em><strong>TFVC</strong>: Uses a single, centralized server repository to track and version files. Local changes are always checked in to the central server where other developers can get the latest changes.</em></p>

<p><em><strong>Git</strong>: Git is a distributed version control system. Each developer has a copy of the source repository on their dev machine. Developers can commit each set of changes on their dev machine and perform version control operations such as history and compare without a network connection.</em></p></blockquote>

<p>You. may not see the real Distributed benefits if you are working off a central repository (hosted on a server like GitHub or Bitbucket) and using <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow">TFS way of development</a> :</p>

<p><em>Get latest code => Make your changes => Merge latest +> Check in (</em>Commit and push<em>)</em></p>

<p>The real power of Git is better understood when you start working disconnected, use branches to keep unrelated development activities separate and merge those into the main trunk (<em>master</em>) once comfortable. You get a local copy of the project and lets you make changes independent of all the other changes in the project.</p>

<blockquote><p><em>Git feels so lightweight and never gets in the way of doing things.</em></p></blockquote>

<h3>Make command line your friend</h3>

<p>If you are a UI savvy person then Git might a good starting point to start using the command line. At first, it definitely feels hard especially if you were TFS/Visual Studio users and might be tempted to use the GUI tools available (<a href="https://desktop.github.com/">GitHub Desktop</a> or <a href="https://www.sourcetreeapp.com/">SourceTree</a>)</p>

<blockquote><p><em>Repetitive tasks become more evident when you use a command line and easily automatable.</em></p></blockquote>

<p>I use Cmder (<a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of my favourite tools</a>) with Git and have <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/">set up SSH</a> to Bitbucket and Github (expected soon on TFS), secured by a paraphrase, so that I do not have to key in the credentials every time I interact with the repositories. I <a href="https://github.com/cmderdev/cmder/issues/193#issuecomment-63040989">start the ssh-agent the very first time I open Cmder</a>, which prompts for my paraphrase and continues to run in the background. Alternatively, you can also use <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows">Credential Manager</a> to store credentials, when working with HTTP enabled Git repository. For the common commands, I have set up aliases like below, to save a bit on the keystrokes.</p>

<pre><code class="text">gl=git log --oneline --all --graph --decorate  $*
gs=git status
ga=git add -A 
gp=git pull
gpp=git push 
gc=git commit -m "$*"  
gcc=git commit
</code></pre>

<h3>Different workflows</h3>

<p>Git can be used in many ways and which makes it hard to get started. There are a few popular <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/">workflows</a> that one can use. Currently, I am using -  <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow">Feature Branch workflow</a> -
which means that all work happen on independent feature branches and once completed gets merged into the main trunk (master branch). Code Reviews happens on the way it gets pulled into the main branch, which ensures code quality and familiarity.</p>

<p><a href="https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/01.svg"><img class="center" alt="Git Feature Branch Workflow" src="/images/git_featurebranch_workflow.png" /></a></p>

<h3>Not Just for Code</h3>

<p>Git is a version control system and does not limit itself to storing code. You can use it for <a href="http://readwrite.com/2013/11/08/seven-ways-to-use-github-that-arent-coding/">version controlling any of your work</a>. For example, this blog is <a href="https://github.com/rahulpnath/rahulpnath.com">hosted on Github</a> and all the <a href="https://github.com/rahulpnath/rahulpnath.com/commits/master">changes are version controlled</a>, which gives me the flexibility to work and commit locally. Since the blog is <a href="http://www.rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress/">static generated</a> I can also preview all the changes locally. I use git whenever I work on any documents or <a href="https://github.com/rahulpnath/Speaking">presentations</a> so that I can avoid manual copy of files and renaming with suffixes like &lsquo;<em>Draft</em>, &rsquo;<em>Draft1</em>,<em>Final</em>,&ldquo;<em>FinalRevision</em>&lsquo; etc. (if that sounds any similar)</p>

<h3>Managing Commits</h3>

<p>When coming to commits, which are nothing but checkpoints of meaningful work done, people might have a different  definition for &lsquo;<em>meaningful</em>&rsquo; - for some it might be really granular, for others a bit coarse and for yet another it means all the work is done. I tend to commit quite often - even a rename of a variable leads to a commit so that I do not have to backtrack if at all something goes wrong immediately after that.</p>

<p>if you really like the idea of committing often (locally), but want the pushes to remotes more coarse, you can &lsquo;<strong><a href="http://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git">squash your commits</a></strong>&rsquo;, before pushing it to remote branch. This allows you to commit often locally and still push  meaningful commit in the main source history. Make sure that the <a href="http://chris.beams.io/posts/git-commit/">commit messages and clear and communicates the intent</a> and helps <a href="http://megakemp.com/2014/08/14/the-importance-of-a-good-looking-history/">keep a good looking history</a>.</p>

<p>Git is one of the best things that happened to developers and hopes it stays long!</p>

<p><strong>References</strong></p>

<ul>
<li><a href="http://gitref.org/index.html">Git Reference</a></li>
<li><a href="https://git-scm.com/book/en/v2">Pro Git</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Freelancing Jobs Online]]></title>
    <link href="http://rahulpnath.com/blog/getting-started-with-freelancing-jobs-online/"/>
    <updated>2016-03-01T11:57:03+11:00</updated>
    <id>http://rahulpnath.com/blog/getting-started-with-freelancing-jobs-online</id>
    <content type="html"><![CDATA[<p>Freelancing is a good way to learn new technology, get some hands on experience and not getting limited to the technology stack at your full-time job and of course earn some extra money!. There is a great demand for developers out there, so if its &lsquo;legal&rsquo; (check with your employer, if you already have another full-time job) for you to freelance then give it a try. There are a lot of online freelance platforms(<a href="https://www.upwork.com/">Upwork</a>, <a href="https://www.freelancer.com/">Freelancer</a>) that connects businesses and developers remotely. These platforms enable you as a developer, to start a profile and bid for jobs of your interest. If the business/client finds you as a match for the job, then you get signed up and can start working immediately.</p>

<p>Easy right! Yes absolutely it is, but here are a few things that might help you through the journey, that I have learned from my experiences.</p>

<p><img class="center" alt="Freelancer" src="/images/freelancing.jpg" /></p>

<h3><strong>Finding work</strong></h3>

<p>Finding work is just an easy search across on the platforms with your preferred skills. It will be a good idea to stick to one of the platforms so that you can build up a profile and then move on to other platforms. Landing your first job as a freelancer could be tricky as clients have a tendency to look for people with some work record on the platform, which assures them that it is a &lsquo;real human&rsquo; that they are talking to. But this is kind of &lsquo;chicken and egg problem&rsquo;. One of the best way to break into your first job is to sell yourself low - Yes, you heard it right - Really low!</p>

<p>While I started on with the idea of freelancing, I took on it with the perspective of that of an experienced developer(as I had a full-time job, which was paying me decently well). I bid on all projects with a relatively higher amount or at par to that my current job was paying, until I received back the below email from one of the clients.</p>

<blockquote><p><em>You lack test scores, have a small portfolio, and have no <a href="https://www.upwork.com">Odesk</a> history. You should try to underbid and get jobs when you are building up odesk history, get good feedback and then raise your rates later.I see you have good qualifications and don&rsquo;t mean you are not worth what you charge, this is just a way to get more clients in the beginning</em></p></blockquote>

<p>It&rsquo;s not always that you get a reply like this and it was an eye-opener for me. So to get the ball rolling, I tried bidding low on a couple of bug fix project which was about 1-2 hours work. Luckily I got one of the jobs and from then followed the exact feedback that I got back - Slowly increase rates and build profile.When bidding lower always make sure that you do on projects of smaller size, so that you don&rsquo;t feel really bad selling yourself low midway through the project (you could always renegotiate, but it might affect the feedback).</p>

<h3><strong>Bidding</strong></h3>

<p>Bidding is an important part of the freelancing cycle. Make sure you put in as much details to put across that you are an ideal candidate. It&rsquo;s where your skills to sell yourself come into play. Make sure you convey through the reasons on the &lsquo;Why&rsquo;,&lsquo;What&rsquo; and &lsquo;How&rsquo; in your bid cover letter.</p>

<blockquote><p><em>Approach bidding the same way you would attend an interview with a prospective employer.</em></p></blockquote>

<ul>
<li><strong>Why</strong> you are interested in the project</li>
<li><strong>What</strong> makes you a good candidate and your experiences. It will be good to have some references to existing projects/applications/blogs to back your claims.</li>
<li><strong>How</strong> you would approach the problem at hand and some questions probing more details.</li>
</ul>


<p>Many a times we have a tendency to copy paste bid cover letters and clients might look for specific references to their project. There are also clients who ask to start/end the bid with specific words or phrases just to make sure you have at least read through the job description.</p>

<h3><strong>Communication</strong></h3>

<p>Communication is the key when working remotely. Keeping your clients/stakeholders up to date on what&rsquo;s happening in the project, calling out any risks associated and clarifying on any issues should be done promptly. Your bid cover letter is the first impression that you leave on the client on your communications skills. So that makes it an added reason to give enough time while sending out your bid.</p>

<blockquote><p><em>Missing a deadline is not really a problem, but not communicating it up front is.</em></p></blockquote>

<p>It&rsquo;s a good idea to set a rhythm to your updates and also sticking on to an update format, so that client knows how and when to expect for things. This will also allow them to plan for work. If working on hourly jobs, it would also be a good idea to set up repositories to share code or other artifacts that you are working on. <a href="https://github.com">Github</a> (paid for private repositories), <a href="https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx">Visual Studio Online</a> (VSO) or <a href="https://bitbucket.org">Bitbuket</a> (free with limits for private repositories) are good providers that you can use. Using <a href="https://trello.com">Trello</a> boards or <a href="https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx">VSO</a> for managing work/tasks will give enough visibility to clients on the current status at any point in time.</p>

<h3><strong>Hourly vs Fixed Price</strong></h3>

<p>When starting out it might be a good idea to start with an hourly project, so that you get introduced to various aspects of freelancing and get used to it. Once comfortable with the overall life cycle you can try fixed price projects. The challenge with fixed price projects, is in getting the scope fixed and making sure that you have accounted for all possible work. Also in tactfully raising cost variations when the client changes from agreed scope or when you discover work that you had not estimated for. Having cost change costs quite often does not put across a good message, so do that wisely and only when absolutely required. Even on hourly projects, there is nothing wrong in negotiating with the per-hour rate, especially if the project is a long running one.</p>

<p>Understand how the payment terms and conditions associated with the platform works. Some platforms have the <a href="https://en.wikipedia.org/wiki/Escrow">escrow</a> model, so the risk of loosing out on money is less. For hourly projects, some platforms have tools that automatically track the amount of time you work on a project and directly bill the clients card once in a week/month, in which case you are sure to receive the payment (unless the client raises a conflict). For cases where none of the above applies, make sure that you have payment milestones set at different phases of the project and you share the code/working product only once you receive payments for milestones. Sharing videos, pictures, live remote sessions could be some alternatives to prove milestone criteria.</p>

<h3><strong>Branding</strong></h3>

<p>Proving your metal is tough if you are just starting out freelancing. Having some experiences to show case is valuable when bidding for projects. When I started off freelancing, my intention was to learn Windows Phone and Windows 8 Modern application development. Since the platform was relatively new then, I started off with a side project <a href="https://www.microsoft.com/en-us/store/apps/picfinity/9wzdncrdwxx8">Picfinity</a>, to showcase my capabilities. Building the application also helped me generate a <a href="http://www.rahulpnath.com/blog/tag/500px/">few blog posts</a> around these areas and I used both of above to showcase my ability to build applications for the Windows platform. This also helped me increase my hourly rates at a faster pace.
Branding is an ongoing effort that you need to do when freelancing, which indirectly enables you to increase your rates over time. <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">Writing blogs</a>, creating reusable libraries, contributing on forums, etc. are some of the things that help with this.</p>

<p>From the experiences gained from these freelancing platforms you will soon be able to move to consulting on your own or join premium freelancing platforms like <a href="www.toptal.com">Toptal</a>, <a href="http://x-team.com/">Xteam</a>, etc. You could also stick on with these platforms and learn new technologies while getting paid. At the very least I see that it has helped me generate content for my blogs (as I still struggle with topics to blog about).</p>

<p>Hope this helps you to get started with freelancing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up AutoHotkey to Speed up Trivial Tasks]]></title>
    <link href="http://rahulpnath.com/blog/setting-up-autohotkey-to-speed-up-trivial-tasks/"/>
    <updated>2016-02-09T04:22:03+11:00</updated>
    <id>http://rahulpnath.com/blog/setting-up-autohotkey-to-speed-up-trivial-tasks</id>
    <content type="html"><![CDATA[<p>A lot of trivial tasks that we do daily on our computer can be automated to make it faster and reduce the number of keystrokes (<a href="http://www.keysleft.com">as they are limited</a>). <a href="https://autohotkey.com/">AutoHoykey</a>(AHK) is an excellent tool to automate a lot of these and is <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of my favorite tool</a>. I use a very limited set of functionality of AHK,  to set up hot strings, launch applications, and mapping caps lock as backspace. The installer to the latest version is available <a href="https://autohotkey.com/download/ahk-install.exe">here</a>.</p>

<blockquote><p>&ldquo;AutoHotkey (AHK) is a free, open-source macro-creation and automation software for Windows that allows users to automate repetitive tasks. It is driven by a scripting language that was initially aimed at providing keyboard shortcuts, otherwise known as hotkeys, that over time evolved into a full-fledged scripting language.&rdquo;</p></blockquote>

<p><strong>Hotstrings</strong> are to map short key combinations that expand on completion. This one is to handle all common phrases, words like emails, default mail replies, etc. Defining a hotstring is as shown below or look up the <a href="https://autohotkey.com/docs/Hotstrings.htm">documentation here</a> for more details</p>

<pre><code class="text">::emg::rahulpnath@gmail.com
::myn::Rahul P Nath
::myb::http://www.rahulpnath.com
</code></pre>

<p>You can use some easy to remember keywords for these like emg means &lsquo;Email Gmail&rsquo; and myn means &lsquo;My Name&rsquo; etc.</p>

<p><strong>Hot keys</strong> are to launch applications on those key combinations. You can use this to launch your favorite applications with the key combinations of your choice. Defining  hot keys is as shown below or look up the <a href="https://autohotkey.com/docs/Hotkeys.htm">documentation here</a> for more details</p>

<pre><code class="text">^!C::
Run "C:\Users\rahulpnath\Documents\Apps\cmder\Cmder.exe"
return
</code></pre>

<p><strong>Capslock to Backspace</strong> mapping is something that I got inspired from the <a href="http://colemak.com/">Colemak layout</a> and find it useful even with the QWERTY layout. I use the <a href="https://autohotkey.com/docs/commands/Send.htm">Send</a> command to send simulated keystrokes. In the rare case of actually needing the CapsLock key, I just need to press it along with Shift to toggle on and off.</p>

<pre><code class="text">CapsLock:: Send {BackSpace}
</code></pre>

<h4><strong>Running AHK scripts on startup</strong></h4>

<p>To automatically run these scripts on startup, I use the <a href="http://windows.microsoft.com/en-au/windows/schedule-task#1TC=windows-7">Task Scheduler</a> that comes with Windows. To create a new task follow the steps as shown below.</p>

<p>In Task Scheduler select &lsquo;Create Task&rsquo; and enter the Name and Description. Set it to run with highest privileges, so that the scripts work even when on application&rsquo;s running in admin mode. Create a trigger for the task to run and I have set it &lsquo;At log on&rsquo; to run every time I log on. Create an Action to &lsquo;Start a program&rsquo; and select the script file (.ahk) with all your scripts. Once created you can right-click on the task and select Run and verify that the script has started and is working.</p>

<p><img class="center" alt="Visual Studio Code Coverage" src="/images/ahk_task_general.PNG" /></p>

<p><img class="center" alt="Visual Studio Code Coverage" src="/images/ahk_task_trigger.PNG" /></p>

<p><img class="center" alt="Visual Studio Code Coverage" src="/images/ahk_task_actions.PNG" /></p>

<p>I synchronize these scripts over Onedrive, to make it available on all my computers. The only thing to do on all the computers is to create the startup task. The features discussed above is just the tip of an iceberg, and should help you get started. AHK has a lot more features that you can explore at the project site. Hope this helps you to set up and automate some of your tasks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Octopress Workflow for New Posts]]></title>
    <link href="http://rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/"/>
    <updated>2016-01-20T22:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts</id>
    <content type="html"><![CDATA[<p>Over the past month I had thought of migrating this blog to Hugo, a static site generator that is faster than the current one, Octopress. Lack of workflow for creating new posts and slower build times were the main reasons. I am the kind of person when writing post want to see often, how it looks like on the real site. With the current number of posts it takes around 40-50 seconds to build the entire site and it makes me to wander off to something else while the build is happening - at times it takes a long time to get back to writing!. But migrating to a new platform has a lot of challenges and time-consuming and I did not want to invest my time in that, so though of looking out for ways to optimize the current process. A bit of googling and playing around with Ruby, solved both of the major issues and I have an improved workflow!</p>

<h4><strong>Draft workflow</strong></h4>

<p>I was lucky to find this <a href="http://neverstopbuilding.com/how-to-enhance-your-octopress-draft-and-heroku-deploy-process">post</a> which handled most of the draft workflow process. Most of the code below is used from there with a very few minor additions. Newer versions of Jekyll support <a href="http://jekyllrb.com/docs/drafts/">working with drafts</a> and uses the &lsquo;<em>&ndash;drafts</em>&rsquo; switch to build the drafts (instead of using published flag as in thr above linked post), that are in &lsquo;<em>_drafts</em>&rsquo; folder. Drafts are posts which does not have date&rsquo;s, so I added in a placeholder text, &lsquo;<em>thisIsStillADraft</em>&rsquo;, in the yaml front matter of the post which will later be replaced with the post publish date. Also added in the code to open the default writer with the newly created post</p>

<pre><code class="ruby Rake new_draft"># usage rake new_draft[my-new-draft] or rake new_draft['my new draft']
desc "Begin a new draft in #{source_dir}/#{drafts_dir}"
task :new_draft, :title do |t, args|
  if args.title
    title = args.title
  else
    title = get_stdin("Enter a title for your post: ")
  end
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  mkdir_p "#{source_dir}/#{drafts_dir}"
  filename = "#{source_dir}/#{drafts_dir}/#{title.to_url}.#{new_post_ext}"
  if File.exist?(filename)
    abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
  end
  puts "Creating new draft: #{filename}"
  open(filename, 'w') do |post|
    post.puts "---"
    post.puts "layout: post"
    post.puts "title: \"#{title.gsub(/&amp;/,'&amp;amp;')}\""
    post.puts "comments: true"
    post.puts "categories: "
    post.puts "tags: "
    post.puts "thisIsStillADraft:"
    post.puts "keywords: "
    post.puts "description: "
    post.puts "---"
  end
  system %{cmd /c "start #{filename}"}
end
</code></pre>

<p>The publish draft task just asks for the post to publish and replaces the placeholder text with the current date time. Also it moves the post from the &lsquo;<em>_drafts</em>&rsquo; folder to the &lsquo;<em>_posts</em>&rsquo; folder with the file name appended with the date time. Since I run this just before deploying a post, the date on the post will be the actual publish date, and not the date I started writing the post (usually writing a  post spans over multiple days).</p>

<pre><code class="ruby Rake publish_draft"># usage rake publish_draft
desc "Select a draft to publish from #{source_dir}/#{drafts_dir} on the current date."
task :publish_draft do
  drafts_path = "#{source_dir}/#{drafts_dir}"
  drafts = Dir.glob("#{drafts_path}/*.#{new_post_ext}")
  drafts.each_with_index do |draft, index|
    begin
      content = File.read(draft)
      if content =~ /\A(---\s*\n.*?\n?)^(---\s*$\n?)/m
        data = YAML.load($1)
      end
    rescue =&gt; e
      puts "Error reading file #{draft}: #{e.message}"
    rescue SyntaxError =&gt; e
      puts "YAML Exception reading #{draft}: #{e.message}"
    end
    puts "  [#{index}]  #{data['title']}"
  end
  puts "Publish which draft? "
  answer = STDIN.gets.chomp
  if /\d+/.match(answer) and not drafts[answer.to_i].nil?
    mkdir_p "#{source_dir}/#{posts_dir}"
    source = drafts[answer.to_i]
    filename = source.gsub(/#{drafts_path}\//, '')
    dest = "#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{filename}"
    puts "Publishing post to: #{dest}"
    File.open(source) { |source_file|
      contents = source_file.read
      contents.gsub!(/^thisIsStillADraft:$/, "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}")
      File.open(dest, "w+") { |f| f.write(contents) }
    }
    FileUtils.rm(source)
  else
    puts "Index not found!"
  end
end
</code></pre>

<p>With these two new rake tasks, I can now create as many draft posts at a time and publish them once ready.</p>

<h4><strong>Improving the build time</strong></h4>

<p>Jekyll build command options provides a switch, &lsquo;<em>configuration</em>&rsquo;, that allows to pass a configuration file instead of using &lsquo;<em>_config.yml</em>&rsquo;. In the configuration file we can specify a &lsquo;exclude&rsquo; option to exclude the directories and/or files from the build. I created a new task for building only the current drafts, by specifying the &lsquo;<em>&ndash;drafts</em>&rsquo; switch and a dynamically generated configuration file, <em>_previewconfig.yml</em>, which excludes the &lsquo;<em>_posts</em>&rsquo; folder. This dramatically increases the build time, and completes almost immediately after a making a change to a post. This fits perfectly into my workflow, as while writing new posts I do not want to see any already published posts. You can  add the dynamically generated configuration file name to the <em>.gitignore</em> as I do not delete it in the tasks. I did not want to use the &lsquo;<em>rake isolate</em>&rsquo; task that is already present in the  rakefile, as that does not integrate with the draft workflow and unnecessarily moves all the posts to a temporary place.</p>

<pre><code class="ruby">desc "preview the site in a web browser with all the draft posts"
task :previewdrafts do
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  puts "Starting to watch source with Jekyll and Compass. Starting Rack on port #{server_port}"
  system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
  File.open("_config.yml") { |source_file|
      contents = source_file.read
      File.open("_previewconfig.yml", "w+") { |f|
      f.write(contents)
      f.puts("exclude: [\"#{posts_dir}\"]") 
      }
    }

  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=&gt;"preview"}, "jekyll build --watch --drafts --config _previewconfig.yml")
  compassPid = Process.spawn("compass watch")
  rackupPid = Process.spawn("rackup --port #{server_port}")

  trap("INT") {
    [jekyllPid, compassPid, rackupPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
    exit 0
  }

  [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }
end
</code></pre>

<h4><strong>Dropbox integration</strong></h4>

<p>At times, I have started to draft blog posts while commuting to work from my mobile device, so I wanted to sync my draft posts to <a href="https://db.tt/bvYw3pL6">Dropbox</a>, so that I can edit it from my <a href="http://www.rahulpnath.com/blog/review-two-months-and-counting-android-and-nexus-5/">mobile phone</a>. Apps like <a href="https://play.google.com/store/apps/details?id=net.keepzero.markdrop&amp;hl=en">MarkDrop</a>/<a href="https://play.google.com/store/apps/details?id=net.keepzero.markdrop&amp;hl=en">JotterPad</a> integrates with Dropbox and supports Markdown editing. I set up a drafts folder on my Dropbox folder on laptop, which is automatically synced using the <a href="https://www.dropbox.com/install">Dropbox application</a>. I then used <a href="https://technet.microsoft.com/en-us/library/cc753194.aspx">Mklink</a> to create a symbolic link from the folder on Dropbox to my drafts folder in my blog repository. Whenever a new draft post is added, it gets automatically inserted into the Dropbox folder, which will then be synced to cloud and available for edit on my mobile phone too. (Part of this post is written from my mobile!)</p>

<pre><code class="text">mklink /D "C:\blog\_drafts" "C:\dropbox\_drafts"
</code></pre>

<h4><strong>Cmder integration</strong></h4>

<p><a href="http://cmder.net/">Cmder</a> is a portable console emulator for Windows and provides a good nice looking feature rich console experience on Windows and is one of my <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">favourite tools</a>. Creating alias for commands is one of the features, that allows to create a short key combination for an otherwise long command. You can use this to create commands for the task in Octopress like below</p>

<pre><code class="text">alias rp=rake previewdrafts

// Below are the list of alias that I have for the rake tasks
rp=rake previewdrafts
rps=rake preview // Preview the whole site
rd=rake deploy
rnd=rake new_draft["$"] // Takes in the post name as parameter
rpd=rake publish_draft
rd=rake deploy
</code></pre>

<p><strong>So my new workflow is</strong></p>

<p>rnd Optimizing Octopress Workflow for New Posts <br/>
rp <br/>
rpd <br/>
rps <br/>
rd</p>

<p>It&rsquo;s much faster, cleaner and easier publishing new posts. To see the latest code for the rake tasks head over to the original file on <a href="https://github.com/rahulpnath/rahulpnath.com/blob/master/Rakefile">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing Tests into Test Suites for Visual Studio]]></title>
    <link href="http://rahulpnath.com/blog/organizing-tests-into-test-suites-for-visual-studio/"/>
    <updated>2016-01-18T22:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/organizing-tests-into-test-suites-for-visual-studio</id>
    <content type="html"><![CDATA[<p>While working with large code base, that has a lot of tests (unit, integration, acceptance etc), running all of them every time we make a small  change (if you are doing TDD or just using build for feedback) takes a lot of time. Organizing tests into different test suites, making it easier to run as required by the current context, is handy in such cases.</p>

<p>There are multiple ways that we can do this within Visual Studio and below are some of the options available. I tend to use a mix of all these in my current project. This gives the flexibility to run only the new tests that I am writing while writing new code or set of related tests for the updates that I am making. Once done with the changes, I can run the full suite of unit tests, followed by the integration tests. This reduces the interruption duration while coding and has a direct impact on the overall productivity too. (If you think small interruptions does not matter much think twice!)</p>

<p><img class="center" alt="Geek productivity" src="/images/geek_productivity.jpg" /></p>

<h4><strong>Test Traits</strong></h4>

<p>Traits are a good way to group tests together and to run them as different suites. It encompasses TestCategory, TestProperty, Priority and Owner. Using <a href="https://msdn.microsoft.com/en-au/library/microsoft.visualstudio.testtools.unittesting.testcategoryattribute.aspx">TestCategory</a> attribute we can specify  the group of the test and the Visual Studio Test Explorer uses this value to group the tests and allows executing tests in specific groups.</p>

<p><img class="center" alt="Visual Studio Test Traits" width="75%" src="/images/vs_testExplorer_traits.png" /></p>

<p>Limitation with the above approach is that it depends on developers to put these attributes on the test cases or class level and not leveraging any existing conventions that might be already in place. Having integration tests, unit tests, acceptance tests in different projects is a very common practice, with conventions like project names ending with &lsquo;.UnitTests, .IntegrationTests, .AcceptanceTests&rsquo; etc.</p>

<h4><strong>Build Tasks and Task Runner Explorer</strong></h4>

<p>The <a href="https://visualstudiogallery.msdn.microsoft.com/8e1b4368-4afb-467a-bc13-9650572db708">Task Runner Explorer</a> (TRE) provides custom task runner support to Visual Studio, allowing to run grunt/gulp task or target inside Visual Studio. Grunt/Gulp has packages for most of the unit testing frameworks, using which different build tasks can be created. To select the tests to execute different conventions can also be used. Below is an example of a gulp task to execute all the c# unit tests in the project.</p>

<pre><code class="javascript">var gulp = require('gulp');
var xunit = require('gulp-xunit-runner');
var xunitConsolePath = 'xunit.console.exe';
var unitTestsConvention = ['**/*.Tests.dll'];

gulp.task('c#UnitTests', function () {
    runTests(unitTestsConvention);
});

function runTests(dllPath) {
    return gulp.src(dllPath, { read: false })
        .pipe(xunit({
            executable: xunitConsolePath,
            options: { parallel: 'all' }
        }));
}
</code></pre>

<blockquote><p><em>You need to install <a href="https://www.npmjs.com/package/npm">Node Package Manager</a> and grunt/gulp npm packages for TRE.</em></p></blockquote>

<p>Similarly we can have multiple tasks to execute different groups of tests and it will be available in the TRE within Visual Studio as shown below. This approach gives the most flexibility, allowing tests be grouped any way and providing ability to execute tests across the stack of technologies.
<img class="center" alt="Visual Studio Task Runner Explorer" src="/images/vs_tre.png" /></p>

<h4><strong>Tests Settings File</strong></h4>

<p>Creating Test Playlist is an easy way to group tests into a playlist and executing them as  group. From the Test Explorer, select the tests to be grouped and on right-click, the option to create playlist is available. The saved playlists can be selected from the drop down menu on the top bar for later execution.</p>

<p><img class="center" alt="Visual Studio Test Playlist" src="/images/vs_testExplorer_playlist.png" /></p>

<p>This works well for short-lived groupings, when we are actively working on a part of the code and need to execute tests for that area. Every time a new test is added, we need to add it explicitly to the playlist if required.</p>

<p>We have seen multiple ways of grouping tests into test suites, and each of them comes handy in different situations. For project wide convention tests, I tend to use build tasks that integrate with TRE as it is more flexible and extendable. Do you use any other ways to group your tests, drop in with a comment!</p>
]]></content>
  </entry>
  
</feed>
