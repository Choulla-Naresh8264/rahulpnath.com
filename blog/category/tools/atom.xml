<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/tools/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-04-07T06:13:48+10:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CLAL - Command Line Application Launcher]]></title>
    <link href="http://rahulpnath.com/blog/clal-command-line-application-launcher/"/>
    <updated>2016-04-07T06:11:22+10:00</updated>
    <id>http://rahulpnath.com/blog/clal-command-line-application-launcher</id>
    <content type="html"><![CDATA[<p>CLAL (Command Line Application Launcher) is a desktop application to launch any (currently supports only SQL Server Management Studio - <a href="https://msdn.microsoft.com/en-us/library/ms162825.aspx">ssms</a>) command line application. It helps manage different configurations with which a command line application can be launched - such as different connection strings to various databases.</p>

<p><strong> <a href="http://bit.ly/1REGiFT">Install the latest version here</a> </strong></p>

<p>CLAL allows you to first specify the meta data of the command line application first and then create the various configurations for that by filling in the parameters as specified in the metadata. Currently since this only supports <em>ssms</em>, the metadata edit screen is not present and is hard coded into the application. The image below shows the various database servers that I connect to, and CLAL helps me reach them quickly</p>

<p><img class="center" alt="Command Line Application Launcher" src="/images/clal.png" /></p>

<p>Use the &lsquo;<em>Add Configuration</em>&rsquo; button to add a new configuration. You can specify a <em>Friendly Name</em> for the configuration and then fill in the other details required by the command line. Alternatively for <em>ssms</em> you can also paste in a connection string and have all the fields automatically populated.</p>

<p><img class="center" alt="Command Line Application Launcher" src="/images/clal_new.png" /></p>

<p>Once new configuration is saved you can launch the application with the specified configuration either using the <em>Launch</em> button or double click on the configuration name in the list.</p>

<blockquote><p><em>Work in progress to support other command line applications and to update the look and feel.</em></p></blockquote>

<p><a href="https://github.com/rahulpnath/clal/issues"><strong>Contribute</strong></a> to the development by coding or reporting issues that you find file using the application. <a href="http://www.rahulpnath.com/blog/category/clal/">Check out these articles</a> for my learnings while building this application.</p>

<h4><strong>Credits</strong></h4>

<p><a href="https://github.com/rahulpnath/clal/tree/master/Resources">Icons/Logo</a>: <a href="https://twitter.com/RoshTS">Rosh TS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Fiddler to help in Manual Testing]]></title>
    <link href="http://rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing/"/>
    <updated>2016-03-07T17:33:03+11:00</updated>
    <id>http://rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing</id>
    <content type="html"><![CDATA[<p>Fiddler is an HTTP debugging proxy server application, that captures HTTP and HTTPS traffic and displays to the user. It also enables modifying HTTP traffic when sent or received. Fiddler is <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of the tools that I use daily</a> and is an indispensable one for any web developer.</p>

<p>This post gives an introduction on how you can use fiddler to help with &lsquo;manual testing&rsquo;. We will see how to use Fiddler to create requests to Web API,  modify and replay an existing request. We will also see how to test error scenarios to see how the application functions in those cases. The sample solution is the default Web API project in Visual Studio with a few changes.</p>

<h3>Composing a Request</h3>

<p>When testing API&rsquo;s to see how it behaves with various inputs, one often needs to send in different parameters. Fiddler allows composing new requests and  modifying existing ones.</p>

<p>Using the Fiddler composer window (shown in the image below), we can create new requests from scratch and execute them. It provides two modes to create requests:</p>

<ul>
<li>Parsed : This is an assisted form to create requests</li>
<li>Raw : This allows to create raw http requests and issue them.</li>
</ul>


<p>Fiddler also allows saving raw requests in the Scratchpad tab to execute as and when required. On clicking Execute Fiddler creates an HTTP request from the entered data and sends to the server. To modify requests you can either drag and drop the request from the displayed URL&rsquo;s list into the composer tab or right-click on an entry and <em>Unlock for Editing</em> (keyboard shortcut - F2). After making the changes to the request in the Inspector window, right-click on the request again to Replay -> Reissue ( R).</p>

<p><img class="center" alt="Fiddler Composer tab" src="/images/fiddler_composer.png" /></p>

<h3>Testing Error Cases</h3>

<p>Testing error cases is tricky, especially from a UI level. Things usually don&rsquo;t go wrong in the development/testing environment and <a href="http://blog.codinghorror.com/the-works-on-my-machine-certification-program/">almost never on a developers machine</a> which makes it very hard to test for cases where something does not work. Fiddler makes it easy to test error scenarios with <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder">AutoResponder</a>, which allows returning handcrafted responses for requests, without actually hitting the server.</p>

<p>To create an auto response for a URL, select the URL from the URL&rsquo;s list and drag it into the AutoResponder tab or select the URL and click on Add Rule button on AutoResponder tab, which will create a new rule. By default Fiddler creates a rule with an exact match (Exact:) with the selected URL. Fiddler supports different <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#matching-rules">matching rules</a> which include regular expression matches. A list of default response text are available to choose from to respond to requests that match the URL matching rule. We can also create a custom response and save it for reuse. The next time a request with matching URL is found the custom response gets returned to the caller.</p>

<blockquote><p><em>Make sure that the &lsquo;Unmatched requests passthrough&rsquo; option is true in the AutoResponder tab to make sure that all other requests pass through to the server.</em></p></blockquote>

<p><img class="center" alt="Fiddler AutoResponder tab" src="/images/fiddler_autoresponder.png" /></p>

<p>To create a custom response, choose &lsquo;Create a New Response&rsquo; or &lsquo;Find a file&rsquo; (if you already have the response saved in a text file). You can save custom responses in the <em>ResponseTemplates</em> folder in the root folder of Fiddler installation, to have them populated in the AutoResponder tab. When editing existing response data, make sure properties like Content-Length reflects the correct values. You can also set a <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#latency">Latency</a> for the response, to simulate response coming from a server. RIght click on the rules for the Set Latency option and enter the value in milliseconds.</p>

<p>With the AutoResponder set to matching URL, we can easily have it return error codes or simulated error messages to test how the UI handles them. You don&rsquo;t have to depend on &lsquo;actual server errors&rsquo; to test if the UI handles error correctly. You can use this to test how application behaves with different return values by mocking with valid custom responses.  Fiddler provides richer capabilities of using scripts to <a href="http://docs.telerik.com/fiddler/KnowledgeBase/FiddlerScript/ModifyRequestOrResponse">modify a request or response</a>.</p>

<p>Hope this helps you get started with using Fiddler for testing and manipulating requests/responses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated ClickOnce Deployment of a WPF Application using Appveyor]]></title>
    <link href="http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/"/>
    <updated>2016-03-04T12:00:03+11:00</updated>
    <id>http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor</id>
    <content type="html"><![CDATA[<p>This post covers the current deployment setup of <a href="https://github.com/rahulpnath/clal">CLAL</a>(Command Line Application Launcher), a desktop application, that I am building. Since it is a WPF application, it supports <a href="https://msdn.microsoft.com/en-us/library/t71a733d.aspx">ClickOnce Deployment</a> that enables to create self-updating applications which can install with minimum interaction from the user. ClickOnce supports different <a href="https://msdn.microsoft.com/en-us/library/71baz9ah.aspx">deployment strategy</a> of which distributing it through the web is quite popular as it makes software distribution easier. It works well when the software size is not large so that application installation is faster. For CLAL, there are two deployments served from Azure: <a href="http://www.rahulpnath.com/clal/Releases/commandlineapplicationlauncherui.application">Latest stable build</a> and the <a href="http://www.rahulpnath.com/clal/Latest/commandlineapplicationlauncherui.application">Current build</a>.</p>

<p>I did not want to do manually, the entire deployment process of building the solution, running all the tests, creating the ClickOnce package and pushing it up to Azure, I decided to automate this. Since <a href="https://www.appveyor.com/">Appveyor</a>, a hosted distributed continuous integration service used to build and test projects, is free for open-source projects and integrates very well with application developed on the Windows platform.</p>

<h3>Setting up Appveyor project</h3>

<p>Setting up Appveyor to read from Github is very easy. Once you authorize access to Github, Appveyor lists all the projects that you have in your Github account. After selecting a project, it creates a <a href="https://ci.appveyor.com/project/rahulpnath/clal">&lsquo;build project&rsquo;</a> for that in Appveyor, where you can control all build related activities. Appveyor automatically pulls in your latest source code from the repository, when a build triggers. Build configurations can be specified using a <a href="https://www.appveyor.com/docs/appveyor-yml">configuration file</a> (appveyor.yml) living at the repository root or using the user interface. For CLAL I exclusively use the configuration from the file and the latest version is available <a href="https://github.com/rahulpnath/clal/blob/master/appveyor.yml">here</a>.
Primarily there are two branches (<em>master</em> and <em>development</em>) on the git repository which builds as the latest stable and current build. Since these two deployments have few attributes different (like the version numbers, deployment URL, update URL), I use <a href="https://www.appveyor.com/docs/branches#conditional-build-configuration">conditional build configuration</a> to have separate configuration properties for the branches.</p>

<p>The primary things that vary for the different deployments are a few ClickOnce publishing properties, the version number, the build configurations - release/debug and the deployment locations. We will see in detail below how we handle this.</p>

<pre><code class="yaml">-
  branches:
    only:
      - master
  version: 0.2.2.0
  test:
    assemblies: '**\*.*Test.dll'
  configuration: Release
  # Rest of the configuration
  -
  version: 0.2.2.{build}
  test:
    assemblies: '**\*.*Test.dll'
  configuration: Debug
  # Rest of the configuration
</code></pre>

<h3>ClickOnce Publish Profile</h3>

<p>To create the publish profile, I used the Visual Studio Publish option on the project, which generates all the <a href="https://msdn.microsoft.com/en-us/library/ms165431.aspx#Anchor_2">Publishing Properties</a>. Most of these values remain the same across all deployment version (release and development). For the ones that are unique to the deployment version like the PublishUrl, UpdateUrl, and ApplicationVersion I removed them from <em>csproj</em> file. The deployment version specific properties is set in the Appveyor configuration file and used by the build script to set the right values.</p>

<p><img class="center" alt="ClickOnce publish settings" src="/images/clickonce_publishsetting.png" /></p>

<p>In the Appveyor configuration, the <a href="https://www.appveyor.com/docs/build-configuration#script-blocks-in-build-configuration">before_build</a> step these values are set as environment variables, which gets <a href="http://help.appveyor.com/discussions/questions/980-custom-msbuild-property">automatically passed into the MSBuild as Properties</a>. The certificate required for signing ClickOnce manifest gets installed during this step.</p>

<pre><code class="yaml"> before_build:
    - nuget restore src\CommandLineApplicationLauncher.sln
    - ps: "$env:ApplicationVersion=$env:APPVEYOR_BUILD_VERSION;$env:UpdateUrl='http://www.rahulpnath.com/clal/Releases/';
    $env:PublishUrl='http://www.rahulpnath.com/clal/Releases/';$mypwd = ConvertTo-SecureString -String \"/(Z&amp;rbrFG){p/6W@8xZvg\" -Force
    –AsPlainText\nImport-PfxCertificate –FilePath
    C:\\projects\\clal\\src\\CommandLineApplicationLauncherUI\\CommandLineApplicationLauncherUI_TemporaryKey.pfx cert:\\currentuser\\my -Password $mypwd"
</code></pre>

<h3>Versioning</h3>

<p>I am using <a href="http://semver.org/">semantic versioning</a> and wanted to control the version numbers for the releases explicitly. Since ClickOnce supports only four digit version numbers, the last one always defaults to zero in the release version. For Current build (development) deployments, the fourth place is used to maintain the build number, so that I can support different build version in development. I use a <a href="https://www.appveyor.com/docs/build-configuration#build-versioning">sequential number generated by appveyor</a> and set in the configuration file.
<code>yaml
version: 0.2.2.{build}
</code>
For a  release I run the below script on the master branch, which updates the version number across the source code files and then push the changes to Github, which triggers a build to the updated version. Then I merge back the master into development so that the next build on development branch would be a build number off the latest released version. The script uses <a href="https://github.com/ploeh/ZeroToNine">ZeroToNine</a> for updating AssemblyInfo files and updates the version numbers in the Appveyor configuration files.</p>

<pre><code class="powershell">param([Parameter(Mandatory=$true)][string]$version) 

# Update All AssemblyInfo file versions
$z29 = "./ExternalTools/ZeroToNine/Zero29.exe"
&amp;$z29 -a $version

# Update Appveyor.yml
((Get-Content ./Appveyor.yml | Out-String) 
-replace "version: .*\.0", ("version: " + $version + ".0") 
-replace "version: .*\.{build}", ("version: " + $version + ".{build}")).Trim("`r`n") 
| Set-Content -NoNewline Appveyor.yml
</code></pre>

<h3>Artifacts and Deployment</h3>

<p>The csproj file of the WPF application has <em>Publish</em> also as a default target, which results in a publish everytime the project is build. By default, the publish directory is in the bin folder under a subdirectory <em>app.publish</em>. Appveyor allows specifying folders as <a href="https://www.appveyor.com/docs/packaging-artifacts">artifacts</a>, which marks all the files under them as artifacts. The below script is for the latest stable build and marks it with a name &lsquo;releaseBuild&rsquo;.</p>

<pre><code class="yaml"> after_build:
    - ps: $root = Resolve-Path .\src\CommandLineApplicationLauncherUI\bin\Release\app.publish;
     [IO.Directory]::GetFiles($root.Path, '*.*', 'AllDirectories') | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName releaseBuild }
</code></pre>

<p>Appveyor allows to <a href="https://www.appveyor.com/docs/deployment">deploy using multiple providers</a> and <a href="https://www.appveyor.com/docs/deployment/ftp">FTP</a> is one of them. I use this to deploy the artifcats generated to an Azure FTP from which I serve the installer. This is currently hosted on my blog domain. The password for the FTP location is <a href="https://ci.appveyor.com/tools/encrypt">encrypted using the Appveyor tool</a>. The below configuration pushes all the artifacts with the name &lsquo;releaseBuild&rsquo; to the FTP folder.</p>

<pre><code class="yaml">deploy:
    provider: FTP
    protocol: ftps
    host: waws-prod-sg1-003.ftp.azurewebsites.windows.net
    username: rahulpnath\rahulpnath
    password:
      secure: YOmcTqGUyjYpJOKAnOAfO30hb59cCBTy+Otlj+qrcAo=
    folder: /site/wwwroot/clal/Releases
    artifact: releaseBuild
</code></pre>

<p>With each push into the Github repository now we have Appveyor listening to it, pulling the latest source code, installing the code signing certificate for ClickOnce, building and running all tests in the project, publish the ClickOnce application, packaging and deploying this to the Azure FTP. There is a completely automated deployment pipeline and makes it easy to publish updates to <a href="https://github.com/rahulpnath/clal">CLAL</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up AutoHotkey to Speed up Trivial Tasks]]></title>
    <link href="http://rahulpnath.com/blog/setting-up-autohotkey-to-speed-up-trivial-tasks/"/>
    <updated>2016-02-09T04:22:03+11:00</updated>
    <id>http://rahulpnath.com/blog/setting-up-autohotkey-to-speed-up-trivial-tasks</id>
    <content type="html"><![CDATA[<p>A lot of trivial tasks that we do daily on our computer can be automated to make it faster and reduce the number of keystrokes (<a href="http://www.keysleft.com">as they are limited</a>). <a href="https://autohotkey.com/">AutoHoykey</a>(AHK) is an excellent tool to automate a lot of these and is <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of my favorite tool</a>. I use a very limited set of functionality of AHK,  to set up hot strings, launch applications, and mapping caps lock as backspace. The installer to the latest version is available <a href="https://autohotkey.com/download/ahk-install.exe">here</a>.</p>

<blockquote><p>&ldquo;AutoHotkey (AHK) is a free, open-source macro-creation and automation software for Windows that allows users to automate repetitive tasks. It is driven by a scripting language that was initially aimed at providing keyboard shortcuts, otherwise known as hotkeys, that over time evolved into a full-fledged scripting language.&rdquo;</p></blockquote>

<p><strong>Hotstrings</strong> are to map short key combinations that expand on completion. This one is to handle all common phrases, words like emails, default mail replies, etc. Defining a hotstring is as shown below or look up the <a href="https://autohotkey.com/docs/Hotstrings.htm">documentation here</a> for more details</p>

<pre><code class="text">::emg::rahulpnath@gmail.com
::myn::Rahul P Nath
::myb::http://www.rahulpnath.com
</code></pre>

<p>You can use some easy to remember keywords for these like emg means &lsquo;Email Gmail&rsquo; and myn means &lsquo;My Name&rsquo; etc.</p>

<p><strong>Hot keys</strong> are to launch applications on those key combinations. You can use this to launch your favorite applications with the key combinations of your choice. Defining  hot keys is as shown below or look up the <a href="https://autohotkey.com/docs/Hotkeys.htm">documentation here</a> for more details</p>

<pre><code class="text">^!C::
Run "C:\Users\rahulpnath\Documents\Apps\cmder\Cmder.exe"
return
</code></pre>

<p><strong>Capslock to Backspace</strong> mapping is something that I got inspired from the <a href="http://colemak.com/">Colemak layout</a> and find it useful even with the QWERTY layout. I use the <a href="https://autohotkey.com/docs/commands/Send.htm">Send</a> command to send simulated keystrokes. In the rare case of actually needing the CapsLock key, I just need to press it along with Shift to toggle on and off.</p>

<pre><code class="text">CapsLock:: Send {BackSpace}
</code></pre>

<h4><strong>Running AHK scripts on startup</strong></h4>

<p>To automatically run these scripts on startup, I use the <a href="http://windows.microsoft.com/en-au/windows/schedule-task#1TC=windows-7">Task Scheduler</a> that comes with Windows. To create a new task follow the steps as shown below.</p>

<p>In Task Scheduler select &lsquo;Create Task&rsquo; and enter the Name and Description. Set it to run with highest privileges, so that the scripts work even when on application&rsquo;s running in admin mode. Create a trigger for the task to run and I have set it &lsquo;At log on&rsquo; to run every time I log on. Create an Action to &lsquo;Start a program&rsquo; and select the script file (.ahk) with all your scripts. Once created you can right-click on the task and select Run and verify that the script has started and is working.</p>

<p><img class="center" alt="Visual Studio Code Coverage" src="/images/ahk_task_general.PNG" /></p>

<p><img class="center" alt="Visual Studio Code Coverage" src="/images/ahk_task_trigger.PNG" /></p>

<p><img class="center" alt="Visual Studio Code Coverage" src="/images/ahk_task_actions.PNG" /></p>

<p>I synchronize these scripts over Onedrive, to make it available on all my computers. The only thing to do on all the computers is to create the startup task. The features discussed above is just the tip of an iceberg, and should help you get started. AHK has a lot more features that you can explore at the project site. Hope this helps you to set up and automate some of your tasks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools that I use]]></title>
    <link href="http://rahulpnath.com/blog/tools-that-I-use/"/>
    <updated>2015-10-10T06:44:19+11:00</updated>
    <id>http://rahulpnath.com/blog/tools-that-I-use</id>
    <content type="html"><![CDATA[<p>Tools are an indispensable part of our daily life and we all have our own likes and dislikes for them. Here are a list that I use (almost daily), most of them influenced from the <a href="http://www.hanselman.com/tools">greater list</a>. Having a great keyboard support is something that I look out for, especially for those that I interact with more frequently (IDE&rsquo;s or code editors). Couple of days back, while having a chat with my friend <a href="https://twitter.com/zpbappi">Bappi</a> some of these came up and he found a few interesting, so though of sharing the list over here.</p>

<ul>
<li><p><strong><a href="https://www.visualstudio.com/">Visual Studio</a></strong>: This one is almost daily and is one of them that gets on along with my laptop. For a Microsoft stack developer I do not think there are much alternatives(<a href="http://www.microsoft.com/web/webmatrix/">WebMatrix</a>, <a href="https://code.visualstudio.com/">Visual Studio Code</a>) if you are looking for full fledged development. Personally I am on VS2015 now(since I am lucky enough to have a free MSDN subscription), but being on any of the version is equally good.</p></li>
<li><p><strong><a href="https://www.onenote.com/">One Note</a></strong>: For note taking I prefer OneNote as it is easy to manage and organize and is available on all platforms. Collaborating with multiple users is also so easy and comes loaded with features making it suitable for all kinds of scenarios.</p></li>
<li><p><strong><a href="https://onedrive.live.com/about/en-in/">OneDrive</a>/<a href="https://db.tt/bvYw3pL6">Dropbox</a></strong>: I use a mix of OneDrive and Dropbox for backing up my data and photos and find the experience for both good on all devices.</p></li>
<li><p><strong><a href="http://cmder.net/">Cmder</a></strong>: Looking out for a cool console in Windows, then this is the one! Loads of features and awesome color scheme makes it really one of the best consoles. Ctrl + C for copy and Ctrl + V works nicely on this(and you do not need to be on Windows 10 for this) and that alone would drive me to try out this one.</p></li>
<li><p><strike><strong><a href="http://www.sublimetext.com/">Sublime Text</a></strong>: As the tag-line says, this is &lsquo;<em>The text editor that you would fall in love with</em>&rsquo;. I use this primarily for all my writing (except for markdown formats, for which I use <a href="http://markdownpad.com/">MarkdownPad</a>), quick edits, formatting and even for some coding when I do not want the full power of Visual Studio. There are loads of plugins available and a good community of users backing it.</strike>
<strong><a href="https://code.visualstudio.com/">Visual Studio Code</a></strong>: The experience on VS Code has dramatically improved from the day that I originally wrote the post. Code is now my one stop editor and I use it for my blogging too.</p></li>
<li><p><strong><a href="https://todoist.com/">Todoist</a></strong>: I have tried out a lot of tools and finally ended up with the premium version of Todoist for task management. Its got everything right and highly flexible to organize your tasks and has full fledged apps on all platforms, browsers and even mail integration. Its almost easy to access Todoist from any context that I am working on and syncs across all devices seamlessly. Its really worth paying for this one, if not you could use the free version with some reduced features.</p></li>
<li><p><strong><a href="http://www.autohotkey.com/">AHK</a></strong>: This tiny little tool has innumerous uses and capabilities, but I just use very few of it to automate certain mundane tasks, store a list of <a href="http://ahkscript.org/docs/Hotstrings.htm">hotstring</a> and application <a href="http://ahkscript.org/docs/Hotkeys.htm">shortcut keys</a>. I have all my scripts synced across multiple PC&rsquo;s and have added a task in <a href="http://windows.microsoft.com/en-au/windows/schedule-task#1TC=windows-7">Task Scheduler</a> to run the scripts with highest privileges every time I log on.</p></li>
<li><p><strong><a href="https://agilebits.com/onepassword">1Password</a></strong>: It&rsquo;s a password manager and is available on all platforms and quite easy to get started with. I had been using the browser capabilities to store and sync passwords before which was working fine. But password managers solve a totally different problem of generating passwords (though they also sync generated passwords without which it would be more difficult to use them given that we have multiple devices these days) as a <a href="http://www.troyhunt.com/2011/03/only-secure-password-is-one-you-cant.html">secure password is one that you cannon remember</a>. 1Password has a one time fee for license, can shared by up to six family members living in the same household, has various synchronization options and mainly gives you the control where all the data is stored.</p></li>
<li><p><strong><a href="http://www.noisli.com/">Noisli</a>,<a href="https://soundcloud.com/">SoundCloud</a></strong>: Like to here music or have some background noise then these are for you. Noisli is a background noise generator, and lets you create different different combinations for your taste. SoundCloud has a lot of music tracks in them and it is free for online streaming.</p></li>
<li><p><strong><a href="http://www.telerik.com/fiddler">Fiddler</a></strong>: The free web debugging proxy for any browser, system or platform, this one is really an indispensable tool if you are doing any kind of web development.</p></li>
<li><p><strong><a href="https://feedly.com/">Feedly</a>,<a href="https://getpocket.com/a/">Pocket</a></strong>: Feedly is an RSS reader and has got quite a good UI and syncs across all devices and helps me keep all the reading list in one place. If you want to have some articles to read while offline then Pocket is for you. Pocket downloads the article while online onto devices and keeps it available for reading. I have been experimenting (for a little over a month) to go offline on mobile and use this for my offline reading if I don&rsquo;t have the Kindle.(The experiment is going pretty good if not for a very few times I had to turn connectivity on for finding bus routes and timings.)</p></li>
<li><p><strong><a href="http://www.scootersoftware.com/">Beyond Compare</a></strong>: Really its &lsquo;beyond&rsquo; just comparing files and is really useful for comparing and merging files. I use the pro version and really recommend it. Integrates nicely with Visual Studio and other IDE&rsquo;s and also provides context menu&rsquo;s on file explorer.</p></li>
<li><p><del>Resharper</del>: I had been using this on and off and realized that mostly I was using only the &lsquo;navigate to&rsquo; feature and decided on to start using the in built features of Visual Studio. <a href="https://twitter.com/ploeh">Mark Seemann</a> has quite an interesting <a href="http://blog.ploeh.dk/2013/02/04/BewareofProductivityTools/">article</a> on this and I couldn&rsquo;t agree any more. Resharper is also changing their licensing model going from a one time fee to a <a href="https://www.jetbrains.com/toolbox/">monthly fee</a>, which I don&rsquo;t personally prefer especially for a tool like R#.</p></li>
</ul>


<p>While there are some more, this is what I use most of the time. What tools help you at work. Do you have any better alternatives that I could try to replace something on this list.</p>
]]></content>
  </entry>
  
</feed>
