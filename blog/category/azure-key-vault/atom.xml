<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: azure key vault | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/azure-key-vault/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2015-01-26T13:51:36+05:30</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/getting-started-with-azure-key-vault/"/>
    <updated>2015-01-25T18:22:06+05:30</updated>
    <id>http://rahulpnath.com/blog/getting-started-with-azure-key-vault</id>
    <content type="html"><![CDATA[<p>Azure Key Vault service is a cloud hosted, HSM(Hardware Security Modules)-backed service for managing cryptographic keys and other secrets. With Azure Key Vault, the process of managing and controlling the keys required for an application or multiple applications for an enterprise can be handled at a centralized place. Also these sensitive information no longer needs to be exposed in the application&rsquo;s configuration file or in database. Keys can be created in the vault and accessed via url&rsquo;s by the required application. Operations against the Key Vault are authenticated and authorized using Azure Active Directory. So in short all that a developer would need to know are the URI&rsquo;s for the keys, the <a href="https://msdn.microsoft.com/en-us/library/azure/dn903625.aspx">sdk/api</a> to access the vault features and also on the mechanism to authenticate against the AD application (an appId/client secret or appId/certificate).</p>

<p><img class="center" alt="Azure Key Vault Overview" src="/images/azurekeyvault_overview.png" /></p>

<h3>Key Types</h3>

<p>The initial release of Azure Key Vault only supports RSA keys (asymmetric cryptography) - it supports both software and HSM processed keys, and are represented as JSON Web Key objects. In future there might be more support for the different key types that are there in cryptography. For those who are new to cryptography or needs a quick recap on cryptography algorithms:</p>

<h5><strong>Symmetric Cryptography</strong></h5>

<p>Symmetric cryptography, uses the same key to encrypt and decrypt the data. The keys are shared between the identities that require to transfer the encrypted data.</p>

<p><img class="center" alt="Symmetric Encryption" src="/images/symmetric_encryption.png" /></p>

<h5><strong>Asymmetric Cryptography</strong></h5>

<p>Asymmetric cryptography, also known as public key cryptography uses two separate keys - a public key and private key. The public key can be used to encrypt the data or to verify a digital signature whereas the private key is used to decrypt the text or to digital sign.</p>

<p><img class="center" alt="Asymmetric Encryption" src="/images/asymmetric_encryption.png" /></p>

<p>To create a new key in the Azure Key Vault, first we need to create the vault, using powershell scripts. You would need to install <a href="http://www.rahulpnath.com/blog/azure-key-vault-and-powershell-module-version/">azure module version 0.8.13 version or higher</a> for the key vault scripts to execute. Detailed steps on creating the vault and keys is documented <a href="http://azure.microsoft.com/en-in/documentation/articles/key-vault-get-started/">here</a>. Once we have the key created we can get the attributes of the key, using <em>Get-AzureKeyVaultKey</em>. This is as per the <a href="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-41#page-25">JSON Web Key(JWK) format</a>. The &lsquo;<em>n/e</em>&rsquo; values in the below key are for the RSA key type(<em>kty</em>), showing the public key information.</p>

<pre><code class="powershell">PS C:\&gt; Get-AzureKeyVaultKey -Name rahulkey -VaultName testvaultrahul                                                                                                     


Attributes : Microsoft.Azure.Commands.KeyVault.Models.KeyAttributes                                                                                                       
Key        : {"kid":"https://testvaultrahul.vault.azure.net/keys/rahulkey/0f653b06c1d94159bc7090596bbf7784","kty":"RSA","key_ops":["encrypt","decrypt","sign","verify","w 
             rapKey","unwrapKey"],"n":"xAXdHg5IAiU44GLM41hrCgfbEf8vg414lwIXBRHwPH-GTdQo3x5hMyvEtT26udcWLeRDDYGQxquuQ03ChXmXaE1Z8rdDpuaciJVoTB8wA_icr4Ww4ld0zuk9Nf31sVP-T_ 
             UiYBpg_3MdwbDvO53udtknLWnXEa-Y-NXlCwUus6LOtfoG1_oVg5B5OFfcW993Zb44C3ZMoOESa-fW0eT6OefBJOgXwGG5gB-zAB2D7uzhStu3Cp4OiFELQSAS4gpt2GCUI76YkTfq8jnIJ7bi5cYzUb-Sv2 
             9nkiwJV9I7hN6wuoz1gNRoJJVisBtidiFd8EYYuCGB3AH8OWbWS_sXEw","e":"AQAB"}                                                                                        
VaultName  : testvaultrahul                                                                                                                                               
Name       : rahulkey                                                                                                                                                     
Version    : 0f653b06c1d94159bc7090596bbf7784                                                                                                                             
Id         : https://testvaultrahul.vault.azure.net/keys/rahulkey/0f653b06c1d94159bc7090596bbf7784                                                                                                                                               
</code></pre>

<h3>Key Operations</h3>

<p>Now that we have a key in the vault, we can use this to perform different operations allowed on the key, as provided in the <em>key_ops</em> field in the key details above. Typical operations that can be performed using the key are Encrypt, Decrypt, Sign, Verify, WrapKey and UnWrapKey. For an application to use the key vault keys, it needs to authenticate using a token from the Azure Active Directory. For this we first need to <a href="http://azure.microsoft.com/en-us/documentation/articles/key-vault-get-started/#register">register an application with azure active directory</a> and then use the Application id and Authentication key(client secret) to authenticate against the AD application. Instead of using the  key/secret, this could also be through a certificate authentication, which might be a more preferred approach(For the simplicity of this demo will use the application id and the secret directly). To connect to the AD application we can use the <a href="https://www.nuget.org/packages/Microsoft.IdentityModel.Clients.ActiveDirectory/2.14.201151115">Active Directory Authentication Library</a> nuget package, the KeyVault libraries are availalble as part of the <a href="http://www.microsoft.com/en-us/download/details.aspx?id=45343">samples</a>.</p>

<pre><code class="csharp">var keyClient = new KeyVaultClient((authority, resource, scope) =&gt;
{
    var adCredential = new ClientCredential(applicationId, applicationSecret);
    var authenticationContext = new AuthenticationContext(authority, null);
    return authenticationContext.AcquireToken(resource, adCredential).AccessToken;
});

// Get the key details
var keyIdentifier = "https://testvaultrahul.vault.azure.net/keys/rahulkey/0f653b06c1d94159bc7090596bbf7784";
var key = await keyClient.GetKeyAsync(keyIdentifier);
var publicKey = Convert.ToBase64String(key.Key.N);
</code></pre>

<p>The application first uses the AD application credentials to authenticate and obtain the token for further interacting with the key vault. Using the key identifier that is available we get the details of the key.For performing the get operation the &lsquo;<em>PermissionToKeys</em>&rsquo;, should be set appropriately when registering the AD application, using Set-AzureKeyVaultAccessPolicy, against the key vault. Since this is RSA asymmetric algorithm, we have the public key available to us, and we can use this to encrypt the data or to verify the signature, locally in the application itself, though the vault client provides this for convenience.</p>

<pre><code class="csharp">using (var rsa = new RSACryptoServiceProvider())
{
    var p = new RSAParameters() { Modulus = key.Key.N, Exponent = key.Key.E };
    rsa.ImportParameters(p);
    var byteData = Encoding.Unicode.GetBytes(textToEncrypt);

    // Encrypt and Decrypt
    var encryptedText = rsa.Encrypt(byteData, true);
    var decryptedData = await keyClient.DecryptDataAsync(keyIdentifier, "RSA_OAEP", encryptedText);
    var decryptedText = Encoding.Unicode.GetString(decryptedData.Result);

    // Sign and Verify
    var hasher = new SHA256CryptoServiceProvider();
    var digest = hasher.ComputeHash(byteData);
    var signature = await keyClient.SignAsync(keyIdentifier, "RS256", digest);
    var isVerified = rsa.VerifyHash(digest, "Sha256", signature.Result);
</code></pre>

<p>As above, we use the public key available to create the <a href="https://msdn.microsoft.com/en-us/library/System.Security.Cryptography.RSACryptoServiceProvider(v=vs.110).aspx">RSACryptoServiceProvider</a> to encrypt the data and also to verify the signature locally. So in an application we can encrypt the data locally and use the vault to decrypt it when required. Decryption can happen only from the vault, as the private key is only available in the vault, and does not cross the vault boundary.</p>

<p>With Azure Key Vault, managing keys and restricting application permission for keys can be easily managed and no information needs to be passed on to the developer or to any specific individual. Also the keys are secure behind the vault service and can also be protected using a HSM. You would need to update the application id and secret in the <a href="https://github.com/rahulpnath/Blog/tree/master/AzureKeyVault">sample</a> for it to work. Hope this helps in getting you started with Azure Key Vault.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault and Powershell Module Version]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-and-powershell-module-version/"/>
    <updated>2015-01-17T18:05:53+05:30</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-and-powershell-module-version</id>
    <content type="html"><![CDATA[<p>I was trying out the public preview of the  Azure Key Vault service that has been released recently. While following the steps as mentioned in their <a href="http://blogs.technet.com/b/kv/archive/2015/01/08/azure-key-vault-making-the-cloud-safer.aspx">blog</a>, came across the below error when trying the &lsquo;<em>New-AzureKeyVault</em>&rsquo; command.</p>

<blockquote><p>Please install Azure Powershell module version 0.8.13 or newer.</p></blockquote>

<p>I did have the <a href="http://azure.microsoft.com/en-us/documentation/articles/install-configure-powershell/#Install">latest powershell for azure</a> installed, but still this error is thrown.</p>

<p><img class="center" alt="azure powershell installed version" src="/images/azure_powershell_installed.png" /></p>

<p>Exploring the <a href="http://msdn.microsoft.com/library/dn868052.aspx">powershell scripts for key vault</a>, below is where the error is thrown from &lsquo;<em>Common.ps1</em>&rsquo;. The script looks for the <a href="http://msdn.microsoft.com/en-us/library/dn654592.aspx">AzureResourceManager</a>, which got introduced in poweshell version 0.8.0 and lets you manage resources in a completely different way.
&#8220;` powershell
Function Azure-Version-Check{
    $expectedMinVersion = New-Object -TypeName System.Version -ArgumentList &ldquo;0.8.13&rdquo;</p>

<pre><code>$azureModule = Get-Module AzureResourceManager

if ((-not $azureModule) -or ($azureModule.Version -lt $expectedMinVersion))
{
    Throw 'Please install Azure Powershell module version 0.8.13 or newer.'
}    
</code></pre>

<p>}
&#8220;`</p>

<blockquote><p>When you use the Azure PowerShell cmdlets, the Azure module is imported into the session by default. To remove the Azure module from the session and import the AzureResourceManager and AzureProfile modules, use the Switch-AzureMode cmdlet.</p></blockquote>

<p>This is what is exactly causing the issue, we need to switch to use the azure resource manager. Running the below command and trying the &lsquo;<em>New-AzureKeyVault</em>&rsquo; command works like a charm</p>

<pre><code class="powershell">Switch-AzureMode -Name AzureResourceManager
</code></pre>

<p><em>You would face this issue only if you started trying out the steps as mentioned in the <a href="http://blogs.technet.com/b/kv/archive/2015/01/09/azure-key-vault-step-by-step.aspx">azure key vault blog</a>(as I did), since the steps in the <a href="http://azure.microsoft.com/en-us/documentation/articles/key-vault-get-started/">documentation site</a></em> is updated with the above step.*</p>
]]></content>
  </entry>
  
</feed>
