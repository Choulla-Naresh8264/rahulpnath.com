<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/programming/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-02-27T15:10:23+11:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Language Agnostic Books For Every Developer 2]]></title>
    <link href="http://rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/"/>
    <updated>2016-01-02T22:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/language-agnostic-books-for-every-developer-2</id>
    <content type="html"><![CDATA[<p>Exactly a year back I had <a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer/">written about the same topic</a>, and over the time I have picked up a few more books, that I am sharing here. Like the earlier post I will let the books do the talking.</p>

<p><div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0131495054/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131495054&linkCode=as2&tag=rahulpnath-20&linkId=XR55UAOEPPMVMFK3">
            <img src="http://rahulpnath.com/images/books_xunit.jpg" data-holder-rendered="true" style="display: block;" >
             </a>
            <div class="caption">
              <h5><strong>xUnit Test Patterns : Refactoring Test Code</strong></h5>
            </div>
          </div>
        </div>
       <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
          <a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321503627&linkCode=as2&tag=rahulpnath-20&linkId=TR6UCCVP6CMGBBZQ" >
            <img src="http://rahulpnath.com/images/books_goos.jpeg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Growing Object-Oriented Software, Guided by Tests</strong></h5>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0132350882&linkCode=as2&tag=rahulpnath-20&linkId=CVCVZFAR5SBYVMJW" >
            <img src="http://rahulpnath.com/images/books_cleancode.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Clean Code: A Handbook of Agile Software Craftsmanship</strong></h5>          <br/>
            </div>
          </div>
        </div>
     <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0978739213/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0978739213&linkCode=as2&tag=rahulpnath-20&linkId=OYRDBB5TR4VHBK6L" >
            <img src="http://rahulpnath.com/images/books_releaseit.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Release It!: Design and Deploy Production-Ready Software</strong></h5>          <br/>
            </div>
          </div>
        </div>
       </div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321200683/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321200683&linkCode=as2&tag=rahulpnath-20&linkId=IQV6RX4M6RXKG4O2" >
            <img src="http://rahulpnath.com/images/books_eip.gif" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions</strong></h5>
            </div>
          </div>
        </div>
      <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0201633612/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201633612&linkCode=as2&tag=rahulpnath-20&linkId=JBBJOO5EP4GLYIXG" >
            <img src="http://rahulpnath.com/images/books_designpatterns.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Design Patterns: Elements of Reusable Object-Oriented Software</strong></h5>          <br/>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131177052&linkCode=as2&tag=rahulpnath-20&linkId=TTKEEYQLEMTOXPPQ" >
            <img src="http://rahulpnath.com/images/books_welc.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Working Effectively with Legacy Code</strong></h5>
            </div>
          </div>
        </div>
    <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321545613/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321545613&linkCode=as2&tag=rahulpnath-20&linkId=UZC2I2HABQUNCT2U" >
            <img src="http://rahulpnath.com/images/books_frameworkdesign.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries</strong></h5>
            </div>
          </div>
        </div>
      </div></p>

<p>Have a great year ahead and some good reading.</p>

<p><em>* The links are Amazon Affiliate Links!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Agnostic Books For Every Developer]]></title>
    <link href="http://rahulpnath.com/blog/language-agnostic-books-for-every-developer/"/>
    <updated>2015-01-02T00:03:14+11:00</updated>
    <id>http://rahulpnath.com/blog/language-agnostic-books-for-every-developer</id>
    <content type="html"><![CDATA[<p>Reading is inevitable to keep up to date with the latest technologies and rapid changes happening in the programming world. But technology is nothing but a tool for getting things done. What one has to understand are the concepts and principles underlying these technology and the core principles of development. These are to be gained through <a href="http://www.rahulpnath.com/blog/an-enterprise-it-project-experience/">our own experiences</a> and also from the learnings and the experiences of others. Books are a great source of such experiences, and this post is a list of those that I have found interesting and helpful. I have not read all these nor was I able to fully understand whatever I have. These books are to be read/referred to multiple times, practiced and adopted into our work. It&rsquo;s also worth referring other books from the same author&rsquo;s or other writings as they are among the pioneers in our industry.</p>

<p>The books would speak for themselves and I don&rsquo;t think I can do justice writing a summary to any of these. So I have decided to just list them down here(in no specific order). It&rsquo;s worth having a personal copy of each one of these in your bookshelves. (mine is still short of some of them).</p>

<p><div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0735619670&linkCode=as2&tag=rahulpnath-20&linkId=6EBVFQ44LVCQC3VW">
            <img src="http://rahulpnath.com/images/books_codecomplete.jpg" data-holder-rendered="true" style="display: block;" >
             </a>
            <div class="caption">
              <h5><strong>Code Complete</strong></h5>
            </div>
          </div>
        </div>
       <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
          <a href="http://www.amazon.com/gp/product/0321146530/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321146530&linkCode=as2&tag=rahulpnath-20&linkId=UFKBUSTB43PNRS76" >
            <img src="http://rahulpnath.com/images/books_tdd.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Test Driven Development</strong></h5>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0131489062/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131489062&linkCode=as2&tag=rahulpnath-20&linkId=2IKSKNFHUIXAC3V4" >
            <img src="http://rahulpnath.com/images/books_applyinguml.jpeg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Applying UML and Patterns</strong></h5>          <br/>
            </div>
          </div>
        </div>
     <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321125215/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321125215&linkCode=as2&tag=rahulpnath-20&linkId=LGNNMURUNPIQJ22Q" >
            <img src="http://rahulpnath.com/images/books_ddd.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Domain Driven Design</strong></h5>          <br/>
            </div>
          </div>
        </div>
       </div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0596805829/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0596805829&linkCode=as2&tag=rahulpnath-20&linkId=BAC6OAIRWSGB4ZBB" >
            <img src="http://rahulpnath.com/images/books_restinpractice.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Rest in Practice</strong></h5>
            </div>
          </div>
        </div>
      <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=020161622X&linkCode=as2&tag=rahulpnath-20&linkId=I6W7QKVDPXSBR37P" >
            <img src="http://rahulpnath.com/images/books_pragmaticprogrammer.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>The Pragmatic Programmer</strong></h5>          <br/>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201485672&linkCode=as2&tag=rahulpnath-20&linkId=VPJIMQDT3AENNVY6" >
            <img src="http://rahulpnath.com/images/books_refactoring.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Refactoring</strong></h5>
            </div>
          </div>
        </div>
    <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321193687/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321193687&linkCode=as2&tag=rahulpnath-20&linkId=HXUV2APJ7YOHRIZY" >
            <img src="http://rahulpnath.com/images/books_umldistilled.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>UML Distilled</strong></h5>
            </div>
          </div>
        </div>
      </div>
      <div class="row">   <br/>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0201835959/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201835959&linkCode=as2&tag=rahulpnath-20&linkId=HKH5I6Q3Y6IYSCI5" >
            <img src="http://rahulpnath.com/images/books_mythicalmanmonth.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>The Mythical Man-Month</strong></h5>         <br/>
            </div>
          </div>
        </div>
      <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0262510871/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0262510871&linkCode=as2&tag=rahulpnath-20&linkId=7YASXOZAUG7JDUDI" >
            <img src="http://rahulpnath.com/images/books_sicp.jpg" data-holder-rendered="true" style="display: block;">
             </a>
            <div class="caption">
              <h5><strong>Structure and Interpretaion of Computer Programs</strong></h5>
            </div>
          </div>
        </div>
       <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0131857258/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131857258&linkCode=as2&tag=rahulpnath-20&linkId=SQ27A44S24WSXQK4" >
            <img src="http://rahulpnath.com/images/books_agilepatterns.jpg" data-holder-rendered="true" style="display: block;">
           </a>
           <div class="caption">
              <h5><strong>Agile Principles, Patterns and Practices</strong></h5>      <br/>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
         <a href="http://www.amazon.com/gp/product/0321127420/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321127420&linkCode=as2&tag=rahulpnath-20&linkId=UR5IBEFV64BK5FYG" >
            <img src="http://rahulpnath.com/images/books_poeaa.jpg" data-holder-rendered="true" style="display: block;">
          </a>
            <div class="caption">
              <h5><strong>Patterns of Enterprise Application and Architecture</strong></h5>          <br/>
            </div>
          </div>
        </div>    <br/>
      </div></p>

<p>Hope you start of this year off with some nice readings and gift yourself with some these master pieces. I am sure that I have not covered all of them and there are still more to be &lsquo;chewed and digested&rsquo;. Do drop in with a comment on Which books have helped you be better in programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Repository Pattern for Abstracting Data Access from a Cache and Data Store]]></title>
    <link href="http://rahulpnath.com/blog/using-repository-pattern-for-abstracting-data-access-from-a-cache-and-data-store/"/>
    <updated>2014-11-23T02:26:26+11:00</updated>
    <id>http://rahulpnath.com/blog/using-repository-pattern-for-abstracting-data-access-from-a-cache-and-data-store</id>
    <content type="html"><![CDATA[<blockquote><p>A Repository abstracts the persistence logic from the core business logic and allows the data to be accessed as it would have been from an in-memory object collection.</p></blockquote>

<p><a href="http://martinfowler.com/eaaCatalog/repository.html">Repository Pattern</a> is useful when you want your domain objects(or entities) to be persistence ignorant but yet have the flexibility to map your data to the choice of your data store e.g. Sql Server, Oracle, NoSQL databases, cache etc. The physical model of the stored data might vary from store to store but not the logical model. So a repository plays the role of mapping a logical model to physical model and vice versa. ORM (Object Relational Mapping) tools like <a href="http://msdn.microsoft.com/en-in/data/ef.aspx">Entity Framework</a> does help us to achieve this and we could make use of it wherever possible in building your domain specific repositories.</p>

<p>With large scale applications it is very common to have an external cache, to optimize repeated access to the data held in a data store. The repository is the ideal place to decide on populating, fetching and invalidating the cache. When building the repositories, we would not want to tightly couple ourselves with a specific cache provider or a data store provider like sql nor with any ORM tool like Entity Framework.</p>

<blockquote><p>In this blog post we will be seeing how to keep our Repositories clean and separate from the actual providers and provide a persistence ignorant data access to your business layer.</p></blockquote>

<p><img src="http://rahulpnath.com/images/RepositoryPattern.png" class="center" alt="Repository Pattern Class Diagram"></p>

<h3>Creating the Repository</h3>

<p>At the bare minimum a repository should be able to provide CRUD (Create Read Update Delete) options, for which we will have a generic interface defined and have implementation of which will be inherited from, for specific repositories.</p>

<pre><code class="csharp Repository Interface">public interface IRepository&lt;T&gt; where T : IIdentifiable
{
    IEnumerable&lt;T&gt; GetAll();
    T Delete(string id);
    T GetById(string id);
    T Insert(T entity);
    T Update(T entity);
}
</code></pre>

<p>The implementation of this interface would need to perform following functionality:</p>

<ol>
<li>Decide on whether to get the data from cache or data store and keep the data consistent.</li>
<li>Get/Modify the data from the cache</li>
<li>Get/Modify the data from the data store.</li>
</ol>


<p>Thinking of the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP (Single Responsibility Principle)</a>, it is best to keep these responsibilities separate so that each of them can change independently without changing the other. For this we need to further introduce 2 more interfaces, one for getting the data from the cache and one for the data store. These 2 need not be the same, as a cache would mostly work on a key value pair combination and the one for the data store would need to have the same methods as supported by the repository (You could have them as the same too in case required). As for the repository, it depends on these 2 interface implementation (which we call strategies), to get the data - CacheStrategy or DataStoreStrategy.</p>

<pre><code class="csharp Cache Strategy Interface">public interface ICacheStrategy&lt;T&gt; where T : IIdentifiable
{
    bool InsertOrUpdate(T entity);
    T Get(string id);
    bool Invalidate(string id);
}
</code></pre>

<pre><code class="csharp DataStore Strategy Interface">public interface IDataStoreStrategy&lt;T&gt; : IRepository&lt;T&gt; where T : IIdentifiable
{
}
</code></pre>

<p>We see that above, for the Cache Strategy interface I have added a set of methods that acts on the key and the value, the entity itself. For the DataStore strategy, we have the same methods coming from the IRepository interface so that we can translate them all into corresponding querying format of their storage and return the data.</p>

<p>The Sql data store strategy implementation using Entity Framework would be like below, which will have a context provided to it, that it can use for performing the queries on sql database. Will see more on the context later below.(The interface implementations are omitted below to keep it simple). A cache strategy would also look something similar and would depend on the caching provider that you use.</p>

<pre><code class="csharp SqlDataStoreStrategy">public class SqlDataStoreStrategy&lt;T&gt; : IDataStoreStrategy&lt;T&gt;
    where T : class, IIdentifiable
{
    protected readonly SqlDataStoreContext dataContext;

    protected readonly IDbSet&lt;T&gt; dbSet;

    public SqlDataStoreStrategy(IDataStoreContext dataContext)
    {
        // Since this is a specific implementation for Sql it does know about the existence of SqlDataStoreContext
        this.dataContext = dataContext as SqlDataStoreContext;
        this.dbSet = this.dataContext.Set&lt;T&gt;();
    }
}
</code></pre>

<p>The Generic repository implementation will use these strategies to return the data. For example, a Get, it will first look the cache and then the data store.</p>

<pre><code class="csharp Generic Repository">public class GenericRepository&lt;T&gt; : IRepository&lt;T&gt;
    where T : IIdentifiable
{
    protected ICacheStrategy&lt;T&gt; cacheStrategy;

    protected IDataStoreStrategy&lt;T&gt; dataStoreStrategy;

    public GenericRepository(ICacheStrategy&lt;T&gt; cacheStrategy, IDataStoreStrategy&lt;T&gt; dataStoreStrategy)
    {
        this.cacheStrategy = cacheStrategy;
        this.dataStoreStrategy = dataStoreStrategy;
    }

    public T GetById(string id)
    {
        var item = this.cacheStrategy.Get(id);
        if (item != null)
        {
            return item;
        }

        item = this.dataStoreStrategy.GetById(id);
        this.cacheStrategy.InsertOrUpdate(item);

        return item;
    }
}
</code></pre>

<h3>Creating Specific Repositories</h3>

<p>There might be cases where we want to query on specific fields or combination of fields or do something that is specific for that repository. In these cases you can extend on to the repository methods. You would need to add a couple of classes for the new specific repository.</p>

<ol>
<li>Create a new repository interface and implement it.</li>
<li>Create a new data store strategy interface which implements from the new repository interface and the base data store strategy interface and implement it.</li>
<li>In case cache strategy needs an update update its interfaces too as like step 2</li>
</ol>


<pre><code class="csharp ">public interface IArticleRepository : IRepository&lt;Article&gt;
{
    IEnumerable&lt;Article&gt; GetAllArticlesByCategory(string categoryName);
}

public interface IArticleDataStoreStrategy : IDataStoreStrategy&lt;Article&gt;, IArticleRepository
{
}

public class ArticleSqlDataStoreStrategy : SqlDataStoreStrategy&lt;Article&gt;, IArticleDataStoreStrategy
{
    public ArticleSqlDataStoreStrategy(IDataStoreContext dataStoreContext) : base(dataStoreContext)
    {
    }
    public IEnumerable&lt;Article&gt; GetAllArticlesByCategory(string categoryName)
    {
        // In case this is to return a large set of items then you can create a paged response and update the
        // input also to take in the page number and number of articles in one page
        return this.dbSet.Where(a =&gt; a.Category == categoryName).ToList();
    }
}
</code></pre>

<h3>Supporting Unit Of Work</h3>

<p>There might be cases where we need to update against multiple repositories and have them all saved in one single transaction. <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">UnitOfWork</a> (UOW), is the common pattern that is used for this scenario, by passing around a context object that knows how to commit/save after a set of activities. For this support we have added the below set of interfaces.(Currently in this sample only the data store is supporting the transactions)</p>

<pre><code class="csharp">public interface IUnitOfWork : IDisposable
{
    IRepository&lt;Blog&gt; BlogRepository { get; }

    IArticleRepository ArticleRepository { get; }

    Task&lt;int&gt; SaveChangesAsync();
}


public class UnitOfWork : IUnitOfWork
{
    private IDataStoreContext dataStoreContext;

    private readonly IUnityContainer container;

    public IRepository&lt;Blog&gt; BlogRepository
        {
            get
            {
                // TODO : Use unity containers to generate the UnitOfwork so that to make sure that
                // datacontext is a single instance in that instance of uow
                return new GenericRepository&lt;Blog&gt;(
                    this.container.Resolve&lt;ICacheStrategy&lt;Blog&gt;&gt;(),
                    new SqlDataStoreStrategy&lt;Blog&gt;(this.dataStoreContext));
            }
        }

    public IArticleRepository ArticleRepository
        {
            get
            {
                 // TODO : Use unity containers to generate the UnitOfwork so that to make sure that
                // datacontext is a single instance in that instance of uow
                return new ArticleRepository(
                    this.container.Resolve&lt;ICacheStrategy&lt;Article&gt;&gt;(),
                    new ArticleSqlDataStoreStrategy(this.dataStoreContext));
            }
        }

    public UnitOfWork(IDataStoreContext dataStoreContext, IUnityContainer container)

    public async Task&lt;int&gt; SaveChangesAsync()
    {
        return await this.dataStoreContext.SaveChangesAsync();
    }
}
</code></pre>

<p>The DataStoreContext is what maintains the in memory representation of the changes that we make across the repositories and finally saves it to the data store on <em>SaveChangesAsync</em>. For Sql data store we make use of the DbContext provided by Entity Framework, which already implements the same method from our interface. If you see the above sql strategy code, this is the data context that we use to perform queries and updates.</p>

<pre><code class="csharp IDataStoreContext">public interface IDataStoreContext : IDisposable
{
    Task&lt;int&gt; SaveChangesAsync();
}

public class SqlDataStoreContext : DbContext, IDataStoreContext
{
    public DbSet&lt;Blog&gt; Blogs { get; set; }

    public DbSet&lt;Article&gt; Articles { get; set; }
}
</code></pre>

<p>For a client to perform operation, it can get the repositories through the unit of work as shown below.
<code>csharp
var article = unitOfWork.ArticleRepository.GetById("1");
article.Name = "New Name";
unitOfWork.SaveChangesAsync();
</code></p>

<h3>IQueryable on your Repositories</h3>

<p>In the repository methods we return an IEnumerable and not an IQueryable, as we want all my querying logics to be contained inside the strategies that implement the real querying. We definitely do not want the querying logic to be there all across the client code accessing the repository, as that would make maintaining the code difficult. Also each of the strategies would have their own ways of querying and should be well abstracted by them. Otherwise all we end up having would be a <a href="http://en.wikipedia.org/wiki/Leaky_abstraction">leaky abstraction</a></p>

<p>By separating out the cache and data store strategies we have made it possible to change the providers for either of them without affecting any of the repository code. We could switch out the sql data store strategy and have a oracle strategy or a mongodb strategy and have that implement the specifics on how to retrieve the the data that we want. We would also have a specific IDataStoreContext implementation for the corresponding new data store.</p>

<p>You can find the code structure for this <a href="https://github.com/rahulpnath/Blog/tree/master/RepositoryPattern">here</a>. It only provides the interfaces and some mock implementations and does not connect to any data stores or cache providers. Hope this helps in architecting the repository pattern when dealing with multiple strategies to save. What are your thoughts on this?
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
</feed>
