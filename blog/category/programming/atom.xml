<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/programming/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-04-07T06:13:48+10:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being Explicit About Time when Handling Multiple Timezone]]></title>
    <link href="http://rahulpnath.com/blog/being-explicit-about-time-when-handling-multiple-timezone/"/>
    <updated>2016-03-25T06:41:03+11:00</updated>
    <id>http://rahulpnath.com/blog/being-explicit-about-time-when-handling-multiple-timezone</id>
    <content type="html"><![CDATA[<p><em>This article is to put my thoughts together on a possible solution. Challenges of real world implementation are yet to be discovered.</em></p>

<p>Handling date/time in application&rsquo;s that affect different time zones is tricky! The general recommendation is that all dates be saved in UTC time and convert them as required. This works well if developers make sure of converting all dates to UTC at application boundaries and keep it consistent throughout the application.</p>

<p><a href="https://unsplash.com/photos/yBzrPGLjMQw" class="center" title="Image By Heather Zabriskie , from https://unsplash.com/photos/yBzrPGLjMQw"><img src="/images\timezone.jpg" class="center" alt="Timezone"></a></p>

<p>At one of my clients, we are facing similar issues with date time, with an application that deals with different <a href="https://en.wikipedia.org/wiki/Time_zone">time zones</a>. The client sells office spaces across the globe and the application is for their employees to manage their clients. It integrates with various back-end systems and provides a single point of access for everything, aggregating data across those different  systems and itself. Some of the backend systems are in different locations and deal with times local to them. This increases the challenge when sending and retrieving data from them. The application has defined a set of locations, identified by, three-letter codes (<em>SYD, TRV, SEA</em>), and these locations fall under different time zones. Office spaces are at these locations and the application allows to manage those from anywhere.</p>

<p>Across the domain, we use either <a href="https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx">DateTime</a> or <a href="https://msdn.microsoft.com/en-us/library/system.datetimeoffset(v=vs.110).aspx">DateTimeOffset</a> to represent time - there is a good recommendation on when to use what - <a href="https://msdn.microsoft.com/en-us/library/bb384267(v=vs.110).aspx">Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo</a>. The problem with using either is that it does not play well with the domain concept to where time is related to - the location. We do have property name suffixes (not consistent though) indicating whether it is Coordinated Universal Time (UTC) or local - like <em>bookingDateUTC</em>, <em>paymentDateLocal</em> etc. But it so happens that these naming conventions gets broken somewhere along the different layers and leads to conversion between time zone at the application boundary layers.</p>

<h3>Issues with Current Approach</h3>

<p>DateTime and DateTimeOffset have by default time zones attached to it and it might go unnoticed till we face issues.</p>

<ul>
<li>The <a href="https://msdn.microsoft.com/en-us/library/system.datetime.kind(v=vs.110).aspx">Kind</a> property on DateTime indicates whether the time represents a <a href="https://msdn.microsoft.com/en-us/library/shx7s921(v=vs.110).aspx">local time, UTC or neither</a>.</li>
<li>The <a href="https://msdn.microsoft.com/en-us/library/system.datetimeoffset.offset(v=vs.110).aspx">Offset</a> property on DateTimeOffset indicates the time&rsquo;s offset from UTC</li>
</ul>


<p>A common scenario in the current application is user selects a date time in the UI using a date picker, which gets send to the server as a string. This value flows through the entire system and is used to populate external systems. The problem here is that the time zone of the date time is not clear. The developer might treat this as UTC time, system local time or even time local to the location in context. This gives different results to the end user and puts the system in an inconsistent state.</p>

<pre><code class="csharp">public string GetAvailability(string locationCode, DateTime? dateTime)
{
   // Code to Get as on date
}
</code></pre>

<p>Even worse this date time might get converted back and forth to different time zones, even by the same developer or other developers in the team. These conversions implicitly depend on the Kind property and goes unnoticed. One of the most common problems that we see as a result of this is that the dates might fall over to a day before or after or after, depending on where in the world the user, the server running the application is.</p>

<h3>Being Explicit Using Value Objects</h3>

<blockquote><p><em>The issue in dealing with time is about not being explicit. It&rsquo;s a good idea to tie your domain concept (location in this case) and time together</em></p></blockquote>

<p>Since time is always tied to a location (<em>SYD, TRV, SEA</em>) it&rsquo;s better to keep these together. Though DateTimeOffset and DateTime already has a timezone information attached it does not fit well into the domain, it makes more sense to have a <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Object</a> encapsulating time and location. Timezone by itself is less likely to fit into a domain unless time zones are a domain concept. Most likely the domain would be dealing with a location, place, airport, station etc which falls under a timezone. So it&rsquo;s a good idea to tie your domain concept and the time together. Only for the creation of the Value Object, we need the location after which it is the date time it represents that is relevant. But if by default you want to get back the date time for the same location it was created for, then location can be saved along with the Value Object. In our case, we always want to show the time at the location, so I am keeping it in the Value Object.</p>

<pre><code class="csharp">public class LocationDateTime
{
    public Location Location { get; private set; }
    public DateTime DateTimeInUTC { get; private set; }
    public DateTimeOffset DateTimeAtLocation { get; private set; }

    public LocationDateTime(Location location, DateTime dateTimeUTC)
    {
        if (location == null)
            throw new ArgumentNullException(nameof(location));

        if (dateTimeUTC == null)
            throw new ArgumentNullException(nameof(dateTimeUTC));

        if (dateTimeUTC.Kind != DateTimeKind.Utc)
            throw new ArgumentException("Date Time not in UTC");

        Location = location;
        DateTimeInUTC = dateTimeUTC;
        DateTimeAtLocation = TimeAtLocation(Location);
    }

    public static LocationDateTime AtLocation(DateTime locationDateTime, Location location)
    {
        if (locationDateTime.Kind != DateTimeKind.Unspecified)
            throw new ArgumentException("DateTimeKind should be unspecified");

        var utcTime = TimeZoneInfo.ConvertTimeToUtc(locationDateTime, location.TimeZoneInfo);
        return new LocationDateTime(location, utcTime);
    }

    public DateTimeOffset TimeAtLocation(Location location)
    {
        return TimeZoneInfo.ConvertTime((DateTimeOffset)DateTimeInUTC, location.TimeZoneInfo);
    }

    public override bool Equals(object obj)
    {
        var objAsLocationDateTime = obj as LocationDateTime;
        if ((System.Object)objAsLocationDateTime == null)
            return false;

        return objAsLocationDateTime.DateTimeInUTC == DateTimeInUTC;
    }

    public override int GetHashCode()
    {
        return DateTimeInUTC.GetHashCode();
    }
}
</code></pre>

<p>The Value Object mandates that all date time gets tracked as UTC and allows conversion to time at different locations. The public constructor enforces this by checking the Kind property on DateTime.</p>

<blockquote><p><em>The Value Object Equality is only on the UTC time it represents</em></p></blockquote>

<p><a href="https://github.com/rahulpnath/Blog/blob/master/ExplicitAboutDateTime/ExplicitAboutDateTime/Location.cs">Location</a> is another Value Object, that encapsulates the code, name and the time zone it belongs to. There is a factory method that allows the creation of the value object at a location, which assumes any passed in DateTime as the time at location, and mandates the Kind property is Unspecified. You could update this to accept UTC/Local time depending on the passed in location&rsquo;s time zone, checking if both fall under the same time zone. You can also create an implicit operator to cast to DateTime or DateTimeOffset values and have it return the desired date time value that you want.</p>

<p>All occurrences of datetime in model classes can now be replaced with custom datetime value object. This makes creating a date explicit and mandates developers to make a decision on the location of datetime.</p>

<pre><code class="csharp">public string Get(string locationCode, DateTime? dateTimeAtLocation)
{
    var location = GetLocation(locationCode);
    var locationDateTime = LocationDateTime.AtLocation(dateTimeAtLocation, location);
    // Code to Get as on date
}
</code></pre>

<p>Even with the above code, you cannot restrict what gets passed into the API/application boundary method, but this has made it explicit to the application on how to start treating the date time. This forces the developer to think and be explicit on the time format expected at the boundary. This might lead to better naming of the variables at the boundary - instead of <em>dateTime</em> to <em>dateTimeAtLocation</em> - and being more explicit to the outside world too!</p>

<h3>Custom Factories Using Extension Method</h3>

<p>Depending on the use case there will be a lot of ways you want to create the value object and possibility of some being used over and over again is more. You can use factory methods to help you extract out this code duplication.</p>

<p>As <a href="https://twitter.com/unclebobmartin">Uncle Bob</a> points out in <a href="http://www.amazon.in/gp/product/0131857258/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0131857258&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=VVMXRINDZWYFRWP4">Agile Principles, Patterns, and Practices in C#</a>, interfaces should be closer to the client. <a href="http://blog.ploeh.dk/2014/12/24/placement-of-abstract-factories/">Factories are nothing but an interface</a>, so it should be defined closer to where it&rsquo;s consumed. Creating a LocationDateTime is always tied to a DateTime object. Using <a href="https://msdn.microsoft.com/en-AU/library/bb383977.aspx">Extension Methods</a> in C#, I have defined an extension on DateTime to create a LocationDateTime object.</p>

<pre><code class="csharp">public static LocationDateTime ToLocationDateTime(this DateTime dateTime, Location location)
{
    if (dateTime == null)
        return null;

    if (location == null)
        throw new ArgumentNullException(nameof(location));

    return LocationDateTime.AtLocation(dateTime, location);
}   
</code></pre>

<p>Now creating a LocationDateTime from a DateTime is easy. Similarly, extension methods can be defined on Location, LocationDateTime to provide custom capabilities as required by the consuming clients.</p>

<pre><code class="csharp">var locationDateTime = dateTimeAtLocation.ToLocationDateTime(location);
</code></pre>

<p>By using a Value Object to represent the DateTime within the application enforces developers to be more explicit on the date time at the boundaries, results in better naming of the variables at boundaries, ensures that it remains the same within the application. You can also override some of the most commonly used operators with DateTime like greater than, less than, equal to, so that it seamlessly fits into the application.</p>

<p>Hoping this will work well in the application too, let me get on to fix it!</p>

<p><em>Will update this post with more real life experiences once implemented!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Learnings from the IKEA Experience]]></title>
    <link href="http://rahulpnath.com/blog/developer-learnings-from-the-ikea-experience/"/>
    <updated>2016-03-16T05:44:03+11:00</updated>
    <id>http://rahulpnath.com/blog/developer-learnings-from-the-ikea-experience</id>
    <content type="html"><![CDATA[<p>When we moved over to Sydney, last year, we had to start over with all the home furnishings. Since we were just starting out, didn&rsquo;t want to spent a lot on furnishings, so decided to go with <a href="http://www.ikea.com/au/en/?cid=au|ps|branded|brand|google|ikea_australia">IKEA</a> for its cost effectiveness and value for money.</p>

<blockquote><p><em>IKEA is a multinational group of companies that designs and sells ready-to-assemble furniture (such as beds, chairs and desks), appliances, small motor vehicles and home accessories. <span class="right">Wiki</span></em></p></blockquote>

<p>Right from the in-shop experience to setting it up, I found many similarities with the IKEA experience and Software Development. Visiting IKEA is an experience in itself and totally wow&rsquo;s you. If not for any of the displayed items, the &lsquo;<em>Self Serve Furniture Area</em>&rsquo; surely will. The sheer size and setup there was breath-taking for me and my wife!</p>

<p><figure>
    <img alt="IKEA Self Serve Furniture Area, Ikea Tempe" src="/images/ikea_self_serve_furniture_area.jpg" />
    <figcaption><em>This is just one of the aisle and there were around 35 of them!</em></figcaption>
</figure></p>

<h3>Code Management &amp; Inventory Management</h3>

<p>Throughout the <a href="https://shoutsfromtheabyss.files.wordpress.com/2013/06/ikea-map.jpg">Showroom</a> you see an <em>Aisle number</em> and the <em>Location</em> displayed under the displayed items. For the items interested in, one can note those numbers on paper or use the mobile application to <a href="http://www.ikea.com/ms/en_KR/customer-service/apps/mobile_app_14.html">scan the QR code of the product</a> for reference. In the checkout area, you can find the item at the said aisle/location number. Finding and picking up the item from the aisle is easy and joyful.</p>

<p>Code management is an important aspect in Software development, as code bases can get quite large. Setting up a <a href="https://github.com/">version control</a> to manage code bases have become a norm and is a good practice to follow even on your side projects. Few other things to follow include</p>

<ul>
<li>Maintain a project structure, naming conventions and code conventions.</li>
<li>Code Navigability and discoverability are important for fast and smooth development. Good and descriptive class names allow us to navigate easily based on the application functionality.</li>
<li><a href="https://msdn.microsoft.com/en-us/library/893ke618(v=vs.71).aspx">Organizing Namespace</a></li>
<li>Remove unused code and not comment it out. Let the version control system take care of file history.</li>
</ul>


<h3>Manual</h3>

<p>The assembly instructions that comes with each package is clear and expressive. It&rsquo;s mostly <a href="http://www.ikea.com/au/en/assembly_instructions/malm-desk__AA-516949-7_pub.pdf">conveyed through pictures</a> and easy to follow through. The manual is up to date with the packaged product and matched exactly with the contents.</p>

<p>This shows the importance of having a <a href="https://en.wikipedia.org/wiki/README">README</a> file or software manuals or in context help for users to use the application. Feedback messages and keeping the user always connected with the system is also important. Long wait times, unresponsive progress bars, silent suppression of error messages are not acceptable. Error messages are for the application user and the level and kind of details differs based on who the user is:</p>

<ul>
<li>For business/non-technical users, mostly of Front-end applications, Business error messages makes more value than technical errors</li>
<li>For developers consuming an API, detailed technical error messages add value than just returning a &lsquo;500 - Internal Server Error&rsquo;</li>
</ul>


<p>Error messages must be relevant and up to date with the current functionality. Always review messages for appropriateness.</p>

<p>Code comments used for communicating intent mostly gets out of sync with what the code actually does. So it&rsquo;s a better practice to avoid comments in code and break code into descriptive function and classes to convey the intent.</p>

<blockquote><p><em><a href="http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode">A comment is an apology</a> for not choosing a more clear name or a more reasonable set of parameters, or for the failure to use explanatory variables and explanatory functions.</em></p></blockquote>

<h3>Tools</h3>

<p><img class="left" alt="IKEA Tools" src="/images/ikea_tools.jpg" /></p>

<p>The <a href="http://www.ikea.com/us/en/catalog/products/00169254/">FIXA 17-piece tool kit</a>, is all that you need for fitting all the furniture. Some products have an <a href="https://en.wikipedia.org/wiki/Hex_key">Allen Key</a> packaged along with them, but otherwise, most of the time the FIXA toolkit is all that one needs.</p>

<p>Having the <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">right set of tools</a> for assisting in the development and being familiar with it is important.  It&rsquo;s not just about having the best/costliest tools, but about knowing them well. Taking some time out to understand the tools that you use daily is important. By tools, I include keyboard, mouse, programming languages, IDE&rsquo;s and other support software that you use daily.</p>

<div style="clear: both;"></div>


<blockquote><p><em><a href="http://blog.codinghorror.com/we-are-typists-first-programmers-second/">We are Typists First, Programmers Second</a>: The keyboard is one of the most important tools for a developer - learn it well</em></p></blockquote>

<h3>Componentization</h3>

<p>The furniture comes as separate pieces that can be easily assembled, with all the screw holes of perfect size. All the different pieces fit perfectly and right even when done by an amateur. Though some of the pieces required two people to fix, I could fix them up myself. It was all cut to perfection with all the holes right in place and fits perfectly the first time.</p>

<p>Having well-defined interfaces that interact with each other seamlessly is important in software development. Any application should be composed of smaller parts that can fit together well. Adhering to good design principles and design patterns helps us to achieve this.</p>

<blockquote><p><em>One of the most important principles while using Object Oriented  languages is <strong><a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">SOLID</a></strong>:   <br/>
  Single Responsibility, Open-Closed, Liskov Substitution, Interface segregation and Dependency Injection</em></p></blockquote>

<p><img class="center" alt="IKEA Components" src="/images/ikea_components.jpg" /></p>

<p>Interfaces should be well-defined and not <a href="https://en.wikipedia.org/wiki/Leaky_abstraction">leak abstractions</a>. The name and parameters(input/return) should completely abstract the &lsquo;how&rsquo; part of the functionality and expose only the &lsquo;what&rsquo;. This helps to build more robust interfaces.</p>

<h3>Packaging and Shipping</h3>

<p><a href="http://www.wsj.com/articles/ikea-cant-stop-obsessing-about-its-packaging-1434533401">IKEA&rsquo;s efficiency in packaging</a> is one of the reasons that enables them to sell at a low-cost and they keep improving at it. Compact and small packages make it easy to handle right from &lsquo;self-checkout&rsquo; to unpacking it at your home. It also helps in optimizing transportation costs for IKEA which in turn enables them to reduce prices.</p>

<p><figure>
    <img alt="IKEA Packaging" src="/images/ikea_packed.jpg"></img>
    <figcaption><em>King size bed frame with storage, extendable dining table and four chairs!</em></figcaption>
</figure></p>

<p>Deployment in software development is a key part and having the entire pipeline automated is essential for a smooth delivery. <a href="http://www.rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/">Setting up a build server, automated building, running tests</a> etc are some of the starting points to move towards <a href="http://martinfowler.com/bliki/ContinuousDelivery.html">Continuous Delivery</a>. Deployment needs to be scripted and be possible to deploy to any environment at the click of a button. If it is a distributable software then easily accessible delivery mechanisms should be available and preferably offer multiple options (like distributable media, server hosted images etc like Windows)</p>

<blockquote><p><em>The package has just the right number of screws, nails and other assembly accessories - not one less, not one more!</em></p></blockquote>

<p><img class="center" alt="IKEA Components" src="/images/ikea_assembly_accessories.jpg" /></p>

<p>This shows IKEA&rsquo;s confidence in the shipped product and the self-belief of nothing going wrong. For a software product to be shipped with this level of confidence it should be thoroughly tested - preferably automated, which allows verifying each time we make a release and allows us to release more often.</p>

<h3>Cost Effective</h3>

<p>Having always bought pre-assembled furniture I have never had to think about anything - it was always just about the money. But with IKEA being self-assembled, you get the flexibility to choose the components/features that you need for the furniture like you could choose to have a <a href="http://www.ikea.com/au/en/catalog/products/20228714/">headboard for the bed</a> or not, which obviously implies a reduced price. You could choose to self-checkout and pay nothing, but also do a paid checkout, where an IKEA member would get all the items out for you to the billing counter. You could transport it yourself to your home or <a href="http://www.ikea.com/ms/en_AU/customer_service/ikea_services/home_delivery.html">get it delivered</a>. So it&rsquo;s all about giving you the options to choose what you want and really keep the cost low.</p>

<p>Keeping the cost low is an important aspect in software industry too and at various levels</p>

<ul>
<li>Development and Licensing  costs - Try to keep these costs low, by looking for open source alternatives and choosing your technology wisely and not just looking for the &lsquo;cool and latest&rsquo;.</li>
<li>Deployment/Infrastructure costs - Build applications for scale and as independent services so that they can be  turned on and off  as required. <a href="https://azure.microsoft.com/en-us/">The cloud</a> has greatly reduced the infrastructure setup costs and provides an easy way for setup. Make sure you understand well the pricing models offered by various cloud providers.</li>
<li>Software Costs/Subscription Costs: Give flexibility to your consumers in how they can consume your software. Keeping functionality loosely coupled and pluggable allows to offer various subscription plans or selling model.</li>
</ul>


<h3>Value Added Services</h3>

<p>It&rsquo;s not just in the home furnishings and their core business that IKEA has taken great care for. The other <a href="http://www.ikea.com/ms/en_SG/service-offer/">Value Added Services</a> they offer like Delivery, Assembly, Planning Tools, Gift Cards, Children&rsquo;s Services and Return Policy are top-notch.</p>

<blockquote><p><em>Users are happy when the expected works, and wowed when it goes beyond expectations.</em></p></blockquote>

<p>The <a href="http://www.ikea.com/au/en/catalog/categories/departments/food/">food at IKEA</a> is worth mentioning (and a picture) - low-priced and tasty! It caters for the needs of all kinds of people and age. The value for money attracts people to IKEA just for the food.</p>

<p><img alt="IKEA Components" src="/images/ikea_food.jpg" /></p>

<p>Any product should deliver what it&rsquo;s supposed to anyways, but it&rsquo;s in providing a bit extra that really matters. Like the few examples below,that gave a better experience to me</p>

<ul>
<li>When you hit Ctrl + V with an image in clipboard on Facebook it automatically uploads the image</li>
<li>When Amazon sent a replacement for my broken Kindle (all the way from the US to India) for free</li>
<li>When Google Now showed the <a href="https://support.google.com/websearch/answer/6015842?hl=en">parking location</a>.</li>
<li>The IKEA Experience!</li>
</ul>


<p>Strive to look for cases where you can delight your customers every time you deliver a product. The IKEA has made me think about delivering products and the need for constantly improving at it. We often need to take a stop, look at what we are doing and correct things and move forward.</p>

<blockquote><p><em>The only way to make the deadline—the only way to go fast—is to keep the <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=CVCVZFAR5SBYVMJW">code as clean</a> as possible at all times.</em></p></blockquote>

<p>Head off to an IKEA store if there is one <a href="http://www.ikea.com/">near you</a> and get wowed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking Beyond Primitive Values: Value Objects]]></title>
    <link href="http://rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/"/>
    <updated>2016-03-11T05:49:03+11:00</updated>
    <id>http://rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects</id>
    <content type="html"><![CDATA[<p>When modelling objects for our application, we use primitive values to represent their attributes or properties. By primitive values, I refer to all the primitive types (like Byte, Boolean, Int, Date) and the in-built types (String etc.) that the language supports. These are the most basic types of the programming language and are the building blocks to create custom types.</p>

<h3>Primitive Types and Associated Problems</h3>

<p>When modelling classes for the domain, one of the most common things we do is to fit domain concepts into primitive types. For example</p>

<ul>
<li><strong>String</strong> to represent Names (Employee name, Company Name, Product Name, Car Name etc.)</li>
<li><strong>Int/Decimal/Double/Float</strong> to represent Numbers (Age, Quantity, Money, Temperature, Distance, Upload/Download sizes etc.)</li>
</ul>


<p>Those are just a few examples on how we &lsquo;usually&rsquo; fit domain concepts into primitive types. This kind of design tends to take us more towards procedural programming, as shown below</p>

<pre><code class="csharp">string phoneNumber;
... // Lot of other code

var isExtensionPhoneNumber = phoneNumber != null &amp;&amp; phoneNumber.Length &lt;=5;
</code></pre>

<p>The problem with this is that these constraints/logics tends to leak across the code-base and we run into problems either not handling this at certain places, handling them wrongly or any changes to these constraints ripples across the code.</p>

<h3>Value Object</h3>

<p>A common factor in all the above examples is that those domain concepts follow value equality and not reference equality. Just like two strings or integers compares with each other based on their value, two names, temperature, color all compare against each other based on their value. This is where a Value Object fits in well.</p>

<blockquote><p><em><a href="http://martinfowler.com/bliki/ValueObject.html">Value Object</a> is an object whose equality is determined by the value it holds and are immutable.</em></p></blockquote>

<p>Below is a Value Object implementation of &lsquo;UserName&rsquo; where we have the domain constraint that name should not be empty and at least be three characters (not a real world scenario, but just for an example). The Equals and GetHashCode methods below ensures that the equality comparison is based on the value that it holds. One could also <a href="https://msdn.microsoft.com/en-au/library/ms173147(v=vs.80">override the &lsquo;==&rsquo; and &lsquo;!=&rsquo; operator</a>.aspx) if you want to support those.</p>

<pre><code class="csharp">public class UserName
{
    private string internalName;

    public UserName(string name)
    {
        if (string.IsNullOrEmpty(name))
            throw new ArgumentNullException("name");

        if (name.Length &lt; 3)
            throw new ArgumentException("Name should be atleast 3 characters long", "name");

        internalName = name;
    }

    public override bool Equals(object obj)
    {
        var objAsName = obj as UserName;
        if ((System.Object)objAsName == null)
            return false;

        return internalName == objAsName.internalName;
    }

    public override int GetHashCode()
    {
        return internalName.GetHashCode();
    }
}
</code></pre>

<p>There is no restriction on the number of parameters that a value object should be composed of. Equality and Hashcode should use all the values that it composes of. For immutability, we have made the <em>internalName</em> (in above case ) a private variable. You could also have it as public read-only property if you scenario demands, like in case of DateRange Value Object. Making the setters private and checking end date is not greater than the start date while construction, helps  protect the <a href="http://people.cs.aau.dk/~normark/oop-csharp/html/notes/contracts_themes-class-inv-sect.html">class invariants</a>. In addition to that, any update to start or end date should create a new DateRange object as WithEndDate does below.</p>

<blockquote><p><em>A class invariant is an assertion that captures the properties and relationships, which remain stable throughout the life-time of instances of the class.</em></p></blockquote>

<pre><code class="csharp">public class DateRange
{
    public DateTime StartDate { get; private set; }
    public DateTime EndDate { get; private set; }

    public DateRange(DateTime startDate, DateTime endDate)
    {
        // Ignoring null checks
        if (endDate &lt; startDate)
            throw new ArgumentException("End Date cannot be less than Start Date");

        this.StartDate = startDate;
        this.EndDate = endDate;
    }

    public DateRange WithEndDate(DateTime endDate)
    {
        return new DateRange(this.StartDate, endDate);
    }
}
... // Rest of Value Object Code to override Equals and GetHashCode
</code></pre>

<h3>Thinking as Value Objects</h3>

<p>In the beginning, it is hard to see Value Objects in your domain, but then there is an easy trick that you can follow.</p>

<blockquote><p><em>Any time you use a primitive type (unless within a Value Object) think more about the choice.</em></p></blockquote>

<p>Once you start using more and more Value Objects you will naturally get good at it and be able to start to see more of it in your domain.</p>

<ul>
<li>Look for co-existing properties, that always go together (like start date and end date, first name and last Name), and try to model them as Value Objects.</li>
<li>Any property that has a unit of measurement associated needs the value and the measurement unit together (Money, Temperature, Distance, Upload/Download size etc.), and is likely a Value Object.</li>
<li>Properties that have structural restrictions like Phone Number, Zip Code, email etc.</li>
</ul>


<p>Extracting these into Value Objects helps pull in a lot of &lsquo;<em>procedural code</em>&rsquo; into the Value Object, as shown below. Even if the extension numbers  format changes, we have a single place to contain this change and can avoid a rippling change. We can also have static factory methods to assist in creating these Value Object and helps make the code readable like the <em>CreateFromBytes</em> method below.</p>

<pre><code class="csharp">PhoneNumber phoneNumber;
... // Lot of other code
if(phoneNumber.IsAnExtension())
... //Rest of code

decimal downloadBytes;
var downloadedData = UnitOfData.CreateFromBytes(downloadBytes);
... // Lot of other code
downloadedData.GetSizeInMegabytes();
... //Rest of code
</code></pre>

<h3>Implicit and Explicit Conversions</h3>

<p>Introducing a Value Object to an existing code base might seem challenging, as it might be all over the code and a hard task to replace all at once. In cases where the Value Object replaces a single property existing in a class like a string name, phoneNumber, location etc., we can take advantage of the <a href="https://msdn.microsoft.com/en-us/library/z5z9kes2.aspx">implicit conversion operators</a>, to introduce new Value Objects gradually. Let&rsquo;s say you have a Name field that is a string and you want to move this over to a Value Object &lsquo;UserName&rsquo;. We can declare an implicit operator to convert between string and UserName, which helps us gradually change over to the new ValueObject</p>

<pre><code class="csharp">public static implicit operator UserName(string userName)
{
    return new UserName(userName);
}

public static implicit operator string(UserName userName)
{
    if (userName == null)
        throw new ArgumentNullException("userName");

    return userName.value;
}

public override string ToString()
{
    return internalName;
}
</code></pre>

<p>The implicit operator enables us to use UserName and string side-by-side and it will automatically convert between them without any explicit casts. This enables us to start anywhere in the application and start replacing the Primitive Value types into Value Objects without breaking the application.</p>

<pre><code class="csharp">string lastName = "Nath";
UserName firstName = "Rahul";
string fullNameString = string.Format("{0} {1}", firstName , lastName);
UserName fullName = fullNameString;
</code></pre>

<p>At the application boundaries, if the data is serialized into different formats (JSON/XML) or persisted into ORM&rsquo;s (Entity Framework/NHibernate) you need to add <a href="http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonConverter.htm">custom serialization formatters</a> or <a href="https://msdn.microsoft.com/en-au/data/jj591617.aspx">mapping configurations</a> to make sure that the Value Object gets serialized/persisted as expected.</p>

<p>Value Objects helps model the domain better and keeps code more readable. It also helps you change domain constraints or rules more easily and keeps them contained. Consider introducing a value object the next time you see one!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Agnostic Books For Every Developer 2]]></title>
    <link href="http://rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/"/>
    <updated>2016-01-02T22:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/language-agnostic-books-for-every-developer-2</id>
    <content type="html"><![CDATA[<p>Exactly a year back I had <a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer/">written about the same topic</a>, and over the time I have picked up a few more books, that I am sharing here. Like the earlier post I will let the books do the talking.</p>

<p><div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0131495054/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131495054&linkCode=as2&tag=rahulpnath-20&linkId=XR55UAOEPPMVMFK3">
            <img src="http://rahulpnath.com/images/books_xunit.jpg" data-holder-rendered="true" style="display: block;" >
             </a>
            <div class="caption">
              <h5><strong>xUnit Test Patterns : Refactoring Test Code</strong></h5>
            </div>
          </div>
        </div>
       <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
          <a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321503627&linkCode=as2&tag=rahulpnath-20&linkId=TR6UCCVP6CMGBBZQ" >
            <img src="http://rahulpnath.com/images/books_goos.jpeg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Growing Object-Oriented Software, Guided by Tests</strong></h5>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0132350882&linkCode=as2&tag=rahulpnath-20&linkId=CVCVZFAR5SBYVMJW" >
            <img src="http://rahulpnath.com/images/books_cleancode.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Clean Code: A Handbook of Agile Software Craftsmanship</strong></h5>          <br/>
            </div>
          </div>
        </div>
     <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0978739213/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0978739213&linkCode=as2&tag=rahulpnath-20&linkId=OYRDBB5TR4VHBK6L" >
            <img src="http://rahulpnath.com/images/books_releaseit.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Release It!: Design and Deploy Production-Ready Software</strong></h5>          <br/>
            </div>
          </div>
        </div>
       </div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321200683/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321200683&linkCode=as2&tag=rahulpnath-20&linkId=IQV6RX4M6RXKG4O2" >
            <img src="http://rahulpnath.com/images/books_eip.gif" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions</strong></h5>
            </div>
          </div>
        </div>
      <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0201633612/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201633612&linkCode=as2&tag=rahulpnath-20&linkId=JBBJOO5EP4GLYIXG" >
            <img src="http://rahulpnath.com/images/books_designpatterns.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Design Patterns: Elements of Reusable Object-Oriented Software</strong></h5>          <br/>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131177052&linkCode=as2&tag=rahulpnath-20&linkId=TTKEEYQLEMTOXPPQ" >
            <img src="http://rahulpnath.com/images/books_welc.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Working Effectively with Legacy Code</strong></h5>
            </div>
          </div>
        </div>
    <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321545613/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321545613&linkCode=as2&tag=rahulpnath-20&linkId=UZC2I2HABQUNCT2U" >
            <img src="http://rahulpnath.com/images/books_frameworkdesign.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries</strong></h5>
            </div>
          </div>
        </div>
      </div></p>

<p>Have a great year ahead and some good reading.</p>

<p><em>* The links are Amazon Affiliate Links!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When your Architecture Screams Technology!]]></title>
    <link href="http://rahulpnath.com/blog/when-your-architecture-screams-technology/"/>
    <updated>2015-05-04T03:13:55+10:00</updated>
    <id>http://rahulpnath.com/blog/when-your-architecture-screams-technology</id>
    <content type="html"><![CDATA[<p>In todays world the problem&rsquo;s that are solved by technology are innumerous and it is not just a single system that the customer is looking for. They usually need multiple systems solving different problems around their core domain. But as developers, we usually get carried away by the technology aspect of it, giving lesser importance to the problem or domain itself. Whenever we have multiple systems targeting the same core domain of the customer, we see that what gets reused across these systems are the &lsquo;<a href="https://msdn.microsoft.com/en-in/library/ee658105.aspx">Crosscutting concerns</a>&rsquo; like Caching, Authentication, Logging, Exception Management etc. But is this what really should be getting shared? Are our customer trying to solve these crosscutting issues? Should it not be their core domain logics and rules and validations that get shared. The Architecture Screams Technology preventing anything else but these crosscutting concerns (which are not technology specific) the only thing that is shareable across systems.</p>

<h3>Common Traits of Technology Coupling</h3>

<p>There are a lot of traits that indicate this dependency on technology and makes a system modeled around technology stand out from the one modeled around the domain. Below are some of the things that I have figured out are very strong hints indicating a tight coupling with the technology. The earlier we identify such smells the better we are to retract and get ourselves align to the needs of the domain and not the technology.</p>

<p><strong>Solution Folders and Projects</strong></p>

<p>Take a look at your solution directory from the top level and what do you infer that it is all about. Does it have folders reflecting technology stacks like ASP.Net, Web API, WPF, Ruby, NHibernate etc or does it reflect the domain space that you are trying to solve like Shipping, Stock Management, Customer Relations? This should give the first hint on what the Architecture of your application reflects. But you could easily get tricked here as &lsquo;what you see might not be what it is&rsquo;, so lets take a step in.
Before we do you might ask, Are we not building a web-site for the customer so what is wrong in having the structure indicate that? We are building a solution that solves certain problems for our customer, it is only that it is getting delivered or accessed via a web-site. Tomorrow this might be delivered via a mobile application or a rich desktop client or even a console application so having it tightly bound to web delivery mechanism is only going to hinder us on the way forward.</p>

<p><strong>Single Large Interface Project</strong></p>

<p>Having all the interfaces used across the application to be in a single interfaces project is something that I have come across quite often and this clearly indicates that something is definitely wrong here. As mentioned in <a href="http://www.amazon.in/gp/product/0131857258/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0131857258&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=VVMXRINDZWYFRWP4">Agile Principles, Patterns, and Practices in C#</a> by <a href="https://twitter.com/unclebobmartin">Uncle Bob</a>, Interfaces should belong to the clients and should stay close to them. If multiple clients needs to use the same interface then probably you could move them out into a common library. But all interfaces in a single project possibly means you have more of <a href="http://martinfowler.com/bliki/HeaderInterface.html">Header Interfaces</a> and not <a href="http://blog.ploeh.dk/2013/01/10/RoleInterfaceRoleHint/">Role interfaces</a> as that would primarily be specific to the clients that use them. Also watch out for the references that these projects have and whether they have any technology specific references which would possibly indicate a <a href="http://en.wikipedia.org/wiki/Leaky_abstraction">leaky abstraction</a>.</p>

<p><strong>Single Large Entities Project</strong></p>

<p>Same as interfaces, this is another common thing that is quite common and might possible indicate a problem in the way a domain is modeled. In a complex domain it is highly likely that an entity is not the same everywhere and is very context specific. A customer might have a different meaning in the context of Shipping and totally different in context of Customer Relations, but having a single customer that is acts as a super set for all these contexts is a problem. Also having all the entities together probably means that enough thought has not been put into separating what parts of the system changes together and what does not. This is a clear indication of poorly modeled domain. On top of this if you are using any kind of O/RM technologies to map these to the database then it just adds on to your problems when you use a single large context to map to the database.</p>

<p><strong>No Explicit boundaries</strong></p>

<p>It&rsquo;s very likely that the application talks across difference boundaries and interacts with different systems. Some of them might be external, like a third party service and some other are internal, most commonly a database. If you see the same entities that are passed along at all these boundaries then its very likely that you have a leaky abstraction, which again would get reflected by looking at the reference folder of Entities/Interfaces project. This kind of abstractions tend to break the entire system when any of these boundaries changes, causing a  rippling effect in the code.</p>

<p><strong>Source Control Commit History</strong></p>

<p>Looking at the previous commits in your source control you can tell if your dependencies are well managed and if there are a lot of technology coupling. If you have commits that have large number of files associated especially one&rsquo;s modified then it again means that you have a lot of leaking abstractions. This leak could be a technology leak or even a function leak, where the abstractions are not well contained which causes a ripple effect when anything associated changes.</p>

<p><strong>Anemic Domain Model</strong></p>

<p>This is one of the most common and greatest indication of technology coupling and lack of proper modeling of the problem domain. Open up any of the classes in your entities project and all you see are properties with getters and setters with hardly any function in them. Object Oriented Programming brought data and functions together, but hardly do we see them together. We either have classes that act as data bags or classes that use these data classes to perform transactions over them. <a href="http://www.martinfowler.com/bliki/AnemicDomainModel.html">Anemic Domain Model </a> works fine for applications that perform basic <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> operations and with very less business logic in them, but as complexity grows it becomes very difficult to maintain and extend. Anemia in the entities is the biggest reason why we end up having only cross-cutting features to be shared across applications for the same domain.</p>

<h3>Onion Architecture</h3>

<p>Technology should be only seen as enablers for solving the problems and it should never get in way of the original problem. Onion Architecture or Hexagonal Architecture try to solve this problem of keeping the domain model clean and separate and have the technology dependency point into it. This enables switching out the technology specific implementations at any point and also enabling us to reuse the core domain components across various systems or hosts.</p>

<blockquote><p>&ldquo;The overriding rule that makes this architecture work is <em>The Dependency Rule</em>. This rule says that source code dependencies can only point inwards. Nothing in an inner circle can know anything at all about something in an outer circle. In particular, the name of something declared in an outer circle must not be mentioned by the code in the an inner circle. That includes, functions, classes. variables, or any other named software entity.&rdquo;</p></blockquote>

<p><a href="http://bit.ly/cleanarchitecture" class="center" title="Image By Uncle Bob, from http://bit.ly/cleanarchitecture"><img src="http://rahulpnath.com/images/clean_architecture.jpg" class="center" alt="Image By Uncle Bob, from http://bit.ly/cleanarchitecture"></a></p>

<p>Screaming technology is a common thing in many a projects and it is not really a big problem when the domain you are trying to solve is not that complex. But usually that is not the case and we have very complex domain logics, multiple systems targeting for different areas and highly volatile requirements. These are just some of the most common indications that I have come across that indicate a tightly coupled solution. The <a href="http://www.objectmentor.com/resources/articles/CoffeeMaker.pdf">Mark IV Special Coffee Maker</a> problem presented by Uncle Bob in his <a href="Agile%20Principles,%20Patterns,%20and%20Practices%20in%20C#](http://www.amazon.in/gp/product/0131857258/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0131857258&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=VVMXRINDZWYFRWP4">book</a>, presents us with an interesting modeling problem, shows some most common errors, why they are errors and possible ways to tackle them. That just helps to get started to think on the right path, to tackle issues in larger domains, methodologies like <a href="http://www.amazon.in/gp/product/0321125215/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0321125215&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=F6WJ7JK5CYQOIJV6">Domain Driven Design</a> would help us to solve the actual domain problems.</p>
]]></content>
  </entry>
  
</feed>
