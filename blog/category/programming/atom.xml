<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/programming/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-08-14T20:46:41+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NDC Sydney]]></title>
    <link href="http://rahulpnath.com/blog/ndc-sydney/"/>
    <updated>2016-08-08T15:26:15+00:00</updated>
    <id>http://rahulpnath.com/blog/ndc-sydney</id>
    <content type="html"><![CDATA[<p>It was a busy week with <a href="http://ndcsydney.com/">NDC Sydney</a> and a lot of other user group conferences happening at the same time since all the international speakers were in town.The conference was three days long with 105 speakers, 37 technologies, and 137 talks. Some the popular speakers were <a href="http://www.hanselman.com/">Scott Hanselman</a>, <a href="http://stackoverflow.com/users/22656/jon-skeet">Jon Skeet</a>, <a href="http://blog.ploeh.dk/">Mark Seemann</a>, <a href="http://odetocode.com/about/scott-allen">Scott Allen</a>,<a href="https://www.troyhunt.com/">Troy Hunt</a> and <a href="http://ndcsydney.com/speakers/">a lot more</a>.</p>

<p><img class="center" alt="NDC Sydney" src="/images/ndc_logo.png" /></p>

<h3>Sessions</h3>

<p>Each talk is one hour long and <a href="http://ndcsydney.com/agenda/">seven talks happen at the same time</a>. The talks that I attended are:</p>

<ul>
<li><a href="http://ndcsydney.com/talk/keynote/">Keynote: “If I knew then what I know now…” – Teaching Tomorrow’s Web to Yesterday’s Programmer</a></li>
<li><a href="http://ndcsydney.com/talk/stairway-to-cloud-orleans-framework-for-building-halo-scale-systems/">Stairway to Cloud: Orleans Framework for building Halo-scale systems</a></li>
<li><a href="http://ndcsydney.com/talk/50-shades-of-appsec/">50 Shades of AppSec</a></li>
<li><a href="http://ndcsydney.com/talk/adventures-in-building-a-fast-web-server-for-asp-net-core-1-0/">ASP.NET Core Kestrel: Adventures in building a fast web server</a></li>
<li><a href="http://ndcsydney.com/talk/domain-architecture-isomorphism-and-the-inverse-conway-maneuver/">Domain Architecture Isomorphism and the Inverse Conway Maneuver</a></li>
<li>Left early from <a href="http://ndcsydney.com/talk/building-solid-asp-net-core-1-0-apps/">Building SOLID ASP.NET Core 1.0 Apps</a> to attend <a href="http://www.meetup.com/Sydney-Alt-Net/events/231759202/">Alt.net user group</a></li>
<li><a href="http://ndcsydney.com/talk/making-hacking-childs-play/">Making Hacking Child’s Play</a></li>
<li><a href="http://ndcsydney.com/talk/understanding-an-architecture-for-the-cloud/">A cloud architecture – Azure from the bottom up</a></li>
<li><a href="http://ndcsydney.com/talk/functional-architecture-the-pits-of-success/">Functional Architecture: the Pits of Success</a></li>
<li>Moved to <a href="http://ndcsydney.com/talk/lightning-talks/">Lightning talks</a> after getting bored with <a href="http://ndcsydney.com/talk/lets-talk-auth/">Let&rsquo;s talk auth</a></li>
<li><a href="http://ndcsydney.com/talk/building-reactive-services-using-functional-programming/">Building Reactive Services using Functional Programming</a></li>
<li><a href="http://ndcsydney.com/talk/microtesting-how-we-set-fire-to-the-testing-pyramid-while-ensuring-confidence/">Microtesting: How We Set Fire To The Testing Pyramid While Ensuring Confidence</a></li>
<li><a href="http://ndcsydney.com/talk/what-does-an-open-source-microsoft-web-platform-look-like/">What does an “Open Source Microsoft Web Framework” look like</a></li>
<li><a href="http://ndcsydney.com/talk/google-cloud-platform/">Accessing the Google Cloud Platform with C#</a></li>
<li><a href="http://ndcsydney.com/talk/one-kata-three-languages/">One kata, three languages</a></li>
<li><a href="http://ndcsydney.com/talk/head-to-head/">Head to Head: Scott Allen and Jon Skeet</a></li>
<li><a href="http://ndcsydney.com/talk/deploying-and-scaling-microservices/">Deploying and Scaling Microservices</a></li>
<li><a href="http://ndcsydney.com/talk/the-experimentation-mindset/">The Experimentation Mindset</a></li>
<li><a href="http://ndcsydney.com/talk/c-7-the-future/">C# 7</a></li>
</ul>


<p>All sessions are recorded and are <a href="https://vimeo.com/ndcconferences">available here</a>. I hope the NDC Sydney ones too will be there in some time.</p>

<h3>Networking</h3>

<p>Events like this are a great place to network with other people in the industry and was one of the reasons I wanted to attend NDC. I am a regular reader of Mark Seemann&rsquo;s (@ploeh) blog, and his ideas resonate with me a lot. Also, I find his <a href="https://www.pluralsight.com/authors/mark-seemann">Pluralsight</a> videos and his book, <a href="http://amzn.to/2aFmtiC">Dependency Injection in .NET</a> helpful. It was great to meet him in person and enjoyed both of his talks on FSharp.</p>

<p><img class="center" alt="With Mark Seemann (ploeh)" src="/images/ndc_ploeh.jpg" /></p>

<h3>Sponsors</h3>

<p>Most of the <a href="http://ndcsydney.com/page/partnership/">event sponsors</a> had they stall at the conference, spreading their brand (with goodies and t-shirts) and also the work they do (a good way to attract talent to the company). There were also raffles for some big prices like Bose headphones, Das keyboards, Drones, Coffee machines, Raspberry Pi, etc. I was lucky enough to win a Raspberry Pi3 from <a href="https://twitter.com/RavenDB">@ravendb</a>.</p>

<p><img alt="Won a Raspberry Pi3. Ravendb raffle @ NDCSydney" src="/images/ndc_raspberrypi.jpg" /></p>

<p>It&rsquo;s confirmed that <a href="https://twitter.com/samnewman/status/761402917798555648">NDC Sydney is coming back next year</a>. If you are in town during that time, make sure you reserve a seat.  Look out for the early bird tickets, those are cheap, and the conference is worth it. Thanks to Readify for sponsoring my tickets and it&rsquo;s <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">one of the good things about working with Readify</a>.</p>

<p>See you at NDC Sydney next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring to Improve Readability - Separating Business Language and Programming Language Semantics]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-to-improve-readability-separating-business-language-and-programming-language-semantics/"/>
    <updated>2016-07-18T04:52:35+00:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-to-improve-readability-separating-business-language-and-programming-language-semantics</id>
    <content type="html"><![CDATA[<p>Often we write ourselves or come across code that has both business language and the programming language semantics mixed together. This makes it very hard to reason about the code and also fix any issues. It&rsquo;s easier to read code that is composed of different smaller individual functions doing a single thing.</p>

<p>If you follow the <em>One Level of Abstraction per Function Rule</em> or the <em>Stepdown Rule</em> as mentioned in the book <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=CVCVZFAR5SBYVMJW">Clean Code</a> (I <a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/">recommend reading it</a> if you have not already), it is easier to keep the business and programming language semantics separate.</p>

<blockquote><p><em>We want the code to read like a top-down narrative. We want every function to be followed by those at the next level of abstraction so that we can read the program, descending one level of abstraction at a time as we read down the list of functions. Making the code read like a top-down set of TO paragraphs is an effective technique for
keeping the abstraction level consistent.</em></p></blockquote>

<p>Recently while fixing a bug in one of the applications that I am currently working on, I came across a code with the business and programming language semantics mixed together. This made it really hard to understand the code and fixing it. So I decided to refactor it a bit before fixing the bug.</p>

<p> <a href="http://www.slideshare.net/kvg452/the-art-of-readable-code-31322040">
<img class="center" src="/images/readable_code.jpg" alt="Code should be readable" />
</a></p>

<p>The application is a subscription based service for renting books, videos, games etc. and enabled customers to have different subscription plans and terms. Currently, we are migrating away from the custom built billing module that the application uses to a SAAS based billing provider to make invoicing and billing easy and manageable. In code, a <em>Subscription</em> holds a list of <em>SubscriptionTerm</em> items, that specifies the different terms that a customer has for the specific subscription. A term typically has a start date, an optional end date and a price for that specific term. A null end date indicates that the subscription term is valid throughout the customer lifetime in the system.</p>

<pre><code class="csharp">public class Subscription
{
    public List&lt;SubscriptionTerm&gt; Terms { get; set; }
}

public class SubscriptionTerm
{
    public int Id { get; set; }
    public double Price { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime? EndDate { get; set; }
}
</code></pre>

<p>But in the new system to which we are migrating to, does not support subscription terms that overlap each other with a different price. This had to be data fixed manually in the source system, so we decided to perform a validation step before the actual migration. The code below does exactly that and was working fine until we started seeing that for cases where there were more than one SubscriptionTerm without an end date and also when end date of one was the start date of another, there were no validation errors shown.</p>

<pre><code class="csharp">public bool Validate(Subscription subscription)
{
    var hasOverlappingItems = false;
    foreach (var term in subscription.Terms)
    {
        var otherTerms = subscription.Terms.Where(a =&gt; a.Price != term.Price);
        if (otherTerms.Any())
        {
            if (
                (!term.EndDate.HasValue &amp;&amp; otherTerms.Any(a =&gt; term.StartDate &lt; a.EndDate)) ||
                (otherTerms.Where(a =&gt; !a.EndDate.HasValue).Any(a =&gt; a.StartDate &lt; term.EndDate)) ||
                (otherTerms.Any(a =&gt; term.StartDate &lt;= a.EndDate &amp;&amp; a.StartDate &lt;= term.EndDate))
            )
            {
                hasOverlappingItems = true;
                break;
            }
        }
    }

    return hasOverlappingItems;
}
</code></pre>

<p>The code, as you can see is not that readable and difficult to understand, which increases the chances of me breaking something else while trying to fix it. There were no tests covering this validator, which made it even harder to change it. While the algorithm itself to find overlappings can be improved (maybe a topic for another blog post), we will look into how we can refactor this existing code to improve its readability.</p>

<blockquote><p><em>Code is read more than written, so it&rsquo;s much better to have code optimized for reading</em></p></blockquote>

<h3>Creating the Safety Net</h3>

<p>The first logical thing to do in this case is to protect us with test cases so that any changes made does not break existing functionality.  I came up with the below test cases (<em>test data shown does not cover all cases</em>), to cover the different possible cases that this method can take.</p>

<pre><code class="csharp">[InlineData("10-Jan-2016", "10-Feb-2016", 1, "11-Feb-2016", "10-Dec-2016", 2, false)]
[InlineData("10-Jan-2015", "10-Feb-2015", 1, "20-Jan-2015", "1-Feb-2016", 2, true)]
public void ValidateReturnsExpected(
    string startDate1, string endDate1, double price1,
    string startDate2, string endDate2, double price2,
    bool expected )
{
    // Fixture setup
    var subscription = new Subscription();
    var term1 = createTerm(startDate1, endDate1, price1);
    var term2 = createTerm(startDate2, endDate2, price2);
    subscription.Terms.Add(term1);
    subscription.Terms.Add(term2);
    // Exercise system
    var sut = new OverlappingSubscriptionTermWithConflictingPriceValidator();
    var actual = sut.Validate(subscription);
    // Verify outcome
    Assert.Equal(expected, actual);
    // Teardown
}
</code></pre>

<p>All tests pass, except for those where there were issues in the destination system and I was about to fix.</p>

<h3>Refactoring for Readability</h3>

<p>Now that I have some tests to back me up for the changes that I am to make, I feel more confident to do the refactoring. Looking at the original validator code, all I see is <strong>DATETIME</strong> - There is a lot of manipulation of dates that is happening, which strongly indicates there is some abstraction waiting to be pulled out. We had seen in, <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Thinking Beyond Primitive Values: Value Objects</a>, that any time we use a primitive type, we should think more about the choice of type. We saw that properties that co-exist (like DateRange) should be pulled apart as Value Objects. The StartDate and EndDate in SubscriptionTerm fall exactly into that category.</p>

<pre><code class="csharp">public class DateRange
{
    public DateTime StartDate { get; private set; }

    public DateTime? EndDate { get; private set; }

    public DateRange(DateTime startDate, DateTime? endDate)
    {
        if (endDate.HasValue &amp;&amp; endDate.Value &lt; startDate)
            throw new ArgumentException("End date cannot be less than start Date");

        StartDate = startDate;
        EndDate = endDate;
    }
}
</code></pre>

<p>Since these properties are used in a lot of other places, I did not want to make a breaking change, by deleting the existing properties and adding in a new DateRange class. So I chose to add a new read-only property <em>TermPeriod</em> to SubscriptionTerm which returns a DateRange, constructed from it&rsquo;s Start and End dates, as shown below.</p>

<pre><code class="csharp">public DateRange TermPeriod
{
    get
    {
        return new DateRange(StartDate, EndDate);
    }
}
</code></pre>

<p>From the existing validator code, what we are essentially trying to check is if there are any SubscriptionTerms for a subscription that overlaps, i.e if one TermPeriod falls in the range of another. Introducing a method, <em>IsOverlapping</em> on DateRange to check if it overlaps with another DateRange seems logical at this stages. Adding a few tests cases to protect myself here to implement the IsOverlapping method in DateRange class. I also added in the tests to cover the failure scenarios that were seen before.</p>

<pre><code class="csharp Tests for IsOverlapping">[InlineData("10-Jan-2016", "10-Feb-2016", "11-Feb-2016", "10-Dec-2016", false)]
[InlineData("10-Jan-2015", "10-Feb-2015", "20-Jan-2015", "1-Feb-2016", true)]
[InlineData("10-Jan-2015", null, "20-Jan-2016", null,  true)]
[InlineData("28-Jan-16", "10-Mar-16", "10-Mar-16", null, true)]
public void OverlappingDatesReturnsExpected(
    string startDateTime1,
    string endDateTime1,
    string startDateTime2,
    string endDateTime2,
    bool expected)
{
    // Fixture setup
    var range1 = CreateDateRange(startDateTime1, endDateTime1);
    var range2 = CreateDateRange(startDateTime2, endDateTime2);
    // Exercise system
    var actual = range1.IsOverlapping(range2);
    // Verify outcome
    Assert.Equal(expected, actual);
    // Teardown
}
</code></pre>

<pre><code class="csharp IsOverlapping in DateRange">public bool IsOverlapping(DateRange dateRange)
{
    if (!EndDate.HasValue &amp;&amp; !dateRange.EndDate.HasValue)
        return true;

    if (!EndDate.HasValue)
        return StartDate &lt;= dateRange.EndDate;

    if (!dateRange.EndDate.HasValue)
        return dateRange.StartDate &lt;= EndDate;

    return StartDate &lt;= dateRange.EndDate
        &amp;&amp; dateRange.StartDate &lt;= EndDate;
}
</code></pre>

<p>Given two DateRange&rsquo;s I can now tell if they overlap or not, which now can be used to check if two SubscriptionTerms overlap. I just need to check if their TermPeriod&rsquo;s overlap. The validator code is now much more easy to understand.</p>

<pre><code class="csharp IsOverlapping in SubscriptionTerm">public bool IsOverlapping(SubscriptionTerm term)
{
    return TermPeriod.IsOverlapping(term.TermPeriod);
}
</code></pre>

<pre><code class="csharp Validator after Refactoring">public bool Validate(Subscription subscription)
{
    foreach (var term in subscription.Terms)
    {
        var termsWithDifferentPrice = subscription.Terms.Where(a =&gt; a.Price != term.Price);
        return termsWithDifferentPrice
            .Any(a =&gt; a.IsOverlapping(term));
    }

    return false;
}
</code></pre>

<p>The code now reads as a set of TO Paragraphs as mentioned in the book <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=CVCVZFAR5SBYVMJW">Clean Code</a>.</p>

<blockquote><p><em>To check if a subscription is valid, check if the subscription has overlapping SubscriptionTerms with a conflicting price. To check if two subscriptions are overlapping, check if their subscription term periods overlap each other. To check if two term periods overlap check if start date of one is before the end date of other</em></p></blockquote>

<p>Readability of code is an important aspect and should be something that we strive towards for. The above just illustrates an example of why readability of code is important and how it helps us on a longer run. It makes maintaining code really easy. Following some basic guidelines like One Level of Abstraction per Function, allows us to write more readable code. Separating code into different small readable functions covers just one aspect of Readability, there are a lot of other practices mentioned in the book <a href="http://shop.oreilly.com/product/9780596802301.do">The Art of Readable Code</a>. The sample code with all the tests and validator is available <a href="https://github.com/rahulpnath/Blog/tree/master/Refactoring/RefactoringForReadability">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protect Yourself Against Line Ending Issues when Using Environment.Newline to Split Text]]></title>
    <link href="http://rahulpnath.com/blog/protect-yourself-against-line-ending-issues-when-using-environment-dot-newline-to-split-text/"/>
    <updated>2016-07-11T05:45:31+00:00</updated>
    <id>http://rahulpnath.com/blog/protect-yourself-against-line-ending-issues-when-using-environment-dot-newline-to-split-text</id>
    <content type="html"><![CDATA[<blockquote><p><em>In computing, a <a href="https://en.wikipedia.org/wiki/Newline">newline</a>, also known as a line ending, end of line (EOL), or line break, is a special character or sequence of characters signifying the end of a line of text and the start of a new line. The actual codes representing a newline vary across operating systems, which can be a problem when exchanging text files between systems with different newline representations.</em></p></blockquote>

<p>I was using a Resource (resx) file to store large text of comma separated values (CSV). This key-value mapping represented the mapping of product codes between an old and new system. In code, I split this whole text using <a href="https://msdn.microsoft.com/en-us/library/system.environment.newline(v=vs.110).aspx">Environment.NewLine</a> and then by comma to generate the map, as shown below.</p>

<pre><code class="csharp">AllMappings = Resources.UsageMap
    .Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
    .Select(s =&gt; s.Split(new[] { ',' }))
    .ToDictionary(item =&gt; item[0], item =&gt; item[1]);
</code></pre>

<p>It all worked fine on my machine and even on other team members machines. There was no reason to doubt this piece of code, until on the development environment we noticed the mapped value in the destination system always null.</p>

<h3>Analyzing the Issue</h3>

<p>Since in the destination system, all the other values were getting populated as expected, except for this mapping it was easy to narrow down to the class that returned the mapping value, to be the problematic one. Initially, I thought this was an issue with the resource file not getting bundled properly. I used <a href="https://www.jetbrains.com/decompiler/">dotPeek</a> to decompile the application and verified that resource file was getting bundled properly and had exactly the same text (visually) as expected.</p>

<p><img src="/images/newline_dotpeek.png" alt ="Resource file disassembled in dotPeek" /></p>

<p>I copied the resource file text from disassembled code in dotPeek into <a href="http://www.flos-freeware.ch/notepad2.html">Notepad2</a> (configured to show the line endings) and everything started falling into place. The resource text file from the build generated code ended with LF (\n), while the one on our development machines had CRLF (\r\n). All machines, including the build machines are running Windows and the expected value for <a href="https://msdn.microsoft.com/en-us/library/system.environment.newline(v=vs.110).aspx">Environemnt.Newline</a> is CRLF - <strong> A string containing &ldquo;\r\n&rdquo; for non-Unix platforms, or a string containing &ldquo;\n&rdquo; for Unix platforms.</strong></p>

<p><figure>
<img src="/images/newline_diff.png" alt ="Difference between build generated and development machine resource file" />
<figcaption><em>Difference between build generated and development machine resource file</em></figcaption>
</figure></p>

<h3>Finding the Root Cause</h3>

<p>We use git for our source control and <a href="https://help.github.com/articles/dealing-with-line-endings/">configured to use &lsquo;auto&rsquo; line endings</a> at the repository level. This ensures that the source code, when checked out, matches the line ending format of the machine. We use <a href="https://www.atlassian.com/software/bamboo">Bamboo</a> on our build servers running Windows. The checked out files on the build server had LF line endings, which in turn gets compiled into the assembly.</p>

<p>The checkout step in Bamboo used the built in git plugin (JGit) and has certain limitations. It&rsquo;s recommended to use native git to use the full git features. JGit also has a known issue with <a href="https://jira.atlassian.com/plugins/servlet/mobile#issue/BAM-9591">line endings on a Windows machine</a> and checks out a file with LF endings. So whenever the source code was checked out, it replaced all line endings in the file with LF before compilation. So the resource file ended up having LF line endings in the assembly, and the code could no longer find Environment.Newline (\r\n) to split.</p>

<h3>Possible Fixes</h3>

<p>Two possible ways to fix this issue is</p>

<ul>
<li>Switch to using native git on the bamboo build process</li>
<li>Use LF to split the text and trim any excess characters. This reduces dependency on line endings variations and settings between different machines only until we are on a different machine which has a different format.</li>
</ul>


<p>I chose to use LF to split the text and trim any additional characters, while also <a href="https://confluence.atlassian.com/bamboo/defining-a-new-executable-capability-289277164.html">updating Bamboo to use native git</a> for checkout.</p>

<pre><code class="csharp">AllMappings = Resources.UsageMap
    .Split(new string[] {"\n"}, StringSplitOptions.RemoveEmptyEntries)
    .Select(s =&gt; s.Split(new[] { ',' }))
    .ToDictionary(item =&gt; item[0].Trim().ToUpper(), item =&gt; item[1].Trim());
</code></pre>

<h3>Protecting Against Line Endings</h3>

<p>The easiest and fastest way that this would have come to my notice was to have a unit test in place. This would ensure that the test fails on the build machine. A test like below will pass on my local but not on the build machine as UsageMap would not return any value for the destination system.</p>

<pre><code class="csharp">[Theory]
[InlineData("MovieWeek", "Weekly-Movie")]
[InlineData("Dell15", "Laptop-Group3")]
public void SutReturnsExpected(string sourceSystemCode, string expected)
{
    var sut = new UsageMap();
    var actual = sut.GetDestinationCode(sourceSystemCode);
    Assert.Equal(expected, actual);
}
</code></pre>

<p>Since there are different systems with different line endings and also applications with different line ending settings and issues of its own, there does not seem to be a &lsquo;one fix for all&rsquo; cases. The best I can think of in these cases is it protect us with such unit tests. It fails fast and brings it immediately to out notice. Have you ever had to deal with an issue with line endings and found better ways to handle them?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make it Easy for the New Person Joining the Team - Have a Project Ramp up Plan]]></title>
    <link href="http://rahulpnath.com/blog/make-it-easy-for-the-new-person-joining-your-team-have-a-project-ramp-up-plan/"/>
    <updated>2016-05-18T12:38:24+00:00</updated>
    <id>http://rahulpnath.com/blog/make-it-easy-for-the-new-person-joining-your-team-have-a-project-ramp-up-plan</id>
    <content type="html"><![CDATA[<p>Recently I was in a discussion with my friend/colleague on conducting a few ramp up sessions for the new hires in our team. The discussion went as below,</p>

<blockquote><p><em>Me: We should hold a few sessions to make the new guys in team more comfortable</em></p>

<p><em>Friend: It&rsquo;s too early for it. We should let them find their own way and not &lsquo;spoon-feed&rsquo; them with information.</em></p>

<p><em>Me: But we are not &lsquo;spoon-feeding&rsquo; them, we are just making their learning process faster and giving then an overview on how all the technology fits together in our world of things.</em></p>

<p><em>Friend: But &lsquo;I did not have any ramp up when I joined, and I felt it was better to have learned it on my own, though it took a lot more time.</em></p></blockquote>

<p><a href="http://www.mindtickle.com/wp-content/uploads/2014/02/new_employee_orientation_business_strategy_research.png" class="center" title="Image, from http://www.mindtickle.com/wp-content/uploads/2014/02/new_employee_orientation_business_strategy_research.png"><img src="/images\rampup_plan.png" class="center" alt="Rampup Plan"></a></p>

<p>Just like there are company-wide induction/onboarding sessions, I have always felt that project specific onboarding plans are also required and help new hires be part of the team and be more productive with their day-to-day activities faster. As mentioned in this <a href="http://www.fastcompany.com/3029820/work-smart/infographic-the-real-ways-to-hold-on-to-new-hires/3">article</a>, <em>New hires care more about effective job training and clear guidelines, and it&rsquo;s time you provide that for them.</em> It&rsquo;s best to have a plan in place when you have someone new joining your team and you along with the team are the best people to put that plan together.</p>

<h3>Boy Scout Rule</h3>

<p>The Boy Scouts have a <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">rule</a> - <em>&ldquo;Always leave the campground cleaner than you found it.&rdquo;</em>  New hires are like &lsquo;new camp group&rsquo; at a campground, so it&rsquo;s the duty of the &lsquo;existing team&rsquo; there to make it a good experience for them.</p>

<blockquote><p><em>&lsquo;Refactor&rsquo; your experiences to make it better for the next person who is about to take on the same journey</em></p></blockquote>

<p>It&rsquo;s not that my friend was intentionally trying not to pass on any information, but he felt that learning on their own would be better. Even I agree with him that learning on your own is far better than &lsquo;spoon-feeding&rsquo; - but a ramp up plan is not spoon-feeding. A ramp up plan is only to speed up the learning process and to make it more comfortable for someone joining new.</p>

<h3>When to create the plan?</h3>

<p>The need for such a plan is there only when there has been enough progress made on the project, after which there is someone new joining the team. So when a new hire is scheduled to join is a good time to create the &lsquo;draft&rsquo; plan. Once the new hire has gone through it and updated back with his own experiences it could become the first version of the plan, which can then be confidently shared to anyone joining after as it has worked for at least one person.</p>

<h3>What should be there in the plan</h3>

<p><em>It depends!</em></p>

<p>It&rsquo;s totally up to the team to decide what should be there in the plan. Some of the things that I usually have are</p>

<ul>
<li><p><strong>Overview of the project and what problem it is trying to solve</strong></p>

<p>It&rsquo;s really important that everyone on the team knows what the application is trying to solve and have a common goal to work towards. It&rsquo;s not just about the code we write but about the problem we are solving and that needs to be clearly defined. I would record a video, when this is done the first time and share it with anyone joining after that, as most of the core concepts of a project rarely change. There could be a follow-up session post watching the video, to also have a quick walk through and fill any missing gaps.</p></li>
<li><p><strong>Introduction to various technologies used in the project and how everything fits together</strong></p>

<p>Technology changes so fast these days that it is nearly impossible to stay updated with all the available options. So a walk through of the different technologies and pointers to resources that worked for you and the team will be of help. If there are any specific libraries, frameworks getting used, an introduction to those should also help.</p></li>
<li><p><strong>Release cycle and Release management</strong>
Every project has its own model of delivering the end product and everyone on the team should understand this process well. Having a continuous build is becoming more common these days and helps reduce the complexity of release. An end to end walk-through of the deployment process helps understand the application better and provides exposure to all the moving parts in the system.</p></li>
<li><p><strong>Environment/Machine setup</strong>
Software installation is one of the biggest pain when setting up a new machine for a project, especially with having specific versions of the software. Having a documented list of all the project dependencies (hardware and software) makes setting the project environment easy. It&rsquo;s preferable to have these <a href="https://chocolatey.org/">scripted</a>. Have a common place, where you can find links to all the various environments (dev, at,prod etc) and related resources.</p></li>
<li><p><strong>Patterns and Conventions</strong>
Every project has its own conventions and certain core patterns that are followed. It&rsquo;s good to have these patterns available for reference so that it helps understand the code better and helps reduce code-review cycles. Than having one big boring document, what I prefer more is to have multiple blog articles targeting each of those. I try to generalize commonly used patterns in the projects that I have worked on and create blog posts. This also helps generate content for <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">your blog</a>.</p></li>
<li><p><strong>Tips &amp; Tricks</strong>
This could range from how to easily navigate the code base, scripts to do some commonly occurring task and general things to keep an eye for.</p></li>
</ul>


<p>These are just some of the things I generally try to include in a ramp up plan but as said it totally depends on the team and the project.</p>

<h3>Sharing the plan</h3>

<p>Depending on the plan, if it has confidential information, you could split this into two (or more) different documents and share it at different phases of onboarding. Once a new hire is confirmed it&rsquo;s good to share the parts which do not have any confidential information. Technology stack, conventions used, machine setup (<a href="https://en.wikipedia.org/wiki/Bring_your_own_device">BYOD</a>) are usually not confidential and can be shared well before actual employment. Once all employment agreements are in place the rest too can be shared. It&rsquo;s also a good idea to have some walk-through of the plan itself to make it easier to follow.</p>

<h3>Iterate and Improve</h3>

<p>Updating back with the experiences of the people using the plan is important to keep it current and valuable. Suggesting improvements and updates should be an item in the plan so that this does not get missed. To make updates manageable, the plan must be accessible to all and preferably version controlled if they are documents.</p>

<p>What are your thoughts on having a ramp up plan?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable NuGet Package Restore for a .Net Poject]]></title>
    <link href="http://rahulpnath.com/blog/disable-nuget-package-restore-for-a-net-poject/"/>
    <updated>2016-05-02T13:26:59+00:00</updated>
    <id>http://rahulpnath.com/blog/disable-nuget-package-restore-for-a-net-poject</id>
    <content type="html"><![CDATA[<p><em>If you have decided on <a href="http://www.rahulpnath.com/blog/checking-in-package-dependencies-into-source-control/">Checking in Package Dependencies into Source Control</a> for an existing project that uses Nuget Packages then this post is for you</em></p>

<p>When using NuGet package references that are not included in the source control, these packages gets restored during build time. There are <a href="https://docs.nuget.org/consume/package-restore">multiple ways that NuGet supports restore these dependencies at build time</a></p>

<ul>
<li>Automatic Package Restore is the current recommended approach (within Visual Studio), which is available from NuGet 2.7.</li>
<li>Command-line package restore on build servers</li>
<li>MSBuild-integrated package restore approach is the original Package Restore implementation and is still used in many projects.</li>
</ul>


<p>Depending on the type to of restore the project uses, NuGet has different configuration entries in the <em>csproj</em> files and <em>.nuget</em> folder in the solution root. So when choosing to check in package dependencies into the source control, it is a good idea to remove all these <a href="https://docs.nuget.org/consume/package-restore/migrating-to-automatic-package-restore">generated configurations</a> and files that are not required any more. The below script does this for you!</p>

<div class="alert alert-warning">
<strong>WARNING!</strong> The script deletes the <em>.nuget</em> folder (if it exists), updates the <em>.csproj</em> files. Please make sure that the project folder is under source control or you have a backup of the folder. After running the script make sure that all the changes that you see are expected as explained here and the project builds and runs as before.
</div>


<p>The PowerShell script does the below for a given solution directory folder (mandatory)</p>

<ul>
<li>For each of the <em>csproj</em> file in the given folder, the script removes the

<ul>
<li><em>RestorePackages</em> node</li>
<li><em>NugetPackageImportStamp</em> node</li>
<li><em>nuget target import</em> from the solution root .nuget folder</li>
<li><em>EnsureNuGetPackageBuildImports</em> node</li>
</ul>
</li>
<li>Removes <em>.nuget</em> folder from the solution root if it exists.</li>
</ul>


<p><em>The script leaves blank lines in the </em>csproj<em> files in place of the removed nodes.</em></p>

<pre><code class="powershell Remove NuGet Restore https://gist.github.com/rahulpnath/13d3b4f54cec51e22344876b1566b911#file-remove-nuget-restore-ps1">param([Parameter(Mandatory=$true)][string]$solutionDirectory) 

 $importNugetTargetsTag= [regex]::escape(@'
&lt;Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists('$(SolutionDir)\.nuget\NuGet.targets')" /&gt;
'@)

$restorePackagesTag = '&lt;RestorePackages&gt;.*?&lt;/RestorePackages&gt;'
$nuGetPackageImportStamp = '&lt;NuGetPackageImportStamp&gt;.*?&lt;/NuGetPackageImportStamp&gt;'

$EnsureNuGetPackageBuildImportsTargetTag = '(?smi)&lt;Target Name="EnsureNuGetPackageBuildImports".*?&lt;/Target&gt;'

foreach ($f in Get-ChildItem -Recurse -Path $solutionDirectory -Filter *.csproj | sort-object)
{
    $text = Get-Content $f.FullName -Raw
    $text `
        -replace $importNugetTargetsTag, "" `
        -replace $nuGetPackageImportStamp, "" `
        -replace $restorePackagesTag, "" `
        -replace $EnsureNuGetPackageBuildImportsTargetTag, "" `
        | set-content $f.FullName
}

Get-ChildItem -Path $solutionDirectory -include .nuget -Recurse | foreach ($_) { remove-item $_.fullname -Force -Recurse }
</code></pre>

<p>Any similarity with the scripts <a href="http://weblogs.asp.net/jongalloway/scripting-net-project-migration-to-automatic-nuget-package-restore">here</a> is intended as that was my starting place. To explicitly <a href="https://docs.nuget.org/consume/package-restore#opting-out">opt out of the Automatic Package Restore</a> on Visual Studio add a <em>Nuget.config</em> in the solution root.
&#8220;` xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<configuration>
  <packageRestore>
    <!-- Opts out of both Automatic Package Restore and MSBuild-Integrated Package Restore -->
    <add key="enabled" value="False" /></p>

<pre><code>&lt;!-- Opts out of Automatic Package Restore in Visual Studio --&gt;
&lt;add key="automatic" value="False" /&gt;
</code></pre>

<p>  </packageRestore>
</configuration>
&#8220;`</p>

<p>Hope this helps you to move away from NuGet restore at build time.</p>
]]></content>
  </entry>
  
</feed>
