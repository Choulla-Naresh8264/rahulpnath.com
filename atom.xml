<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2015-03-06T20:30:29+05:30</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authenticating a Client Application with Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/"/>
    <updated>2015-03-06T11:40:25+05:30</updated>
    <id>http://rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault</id>
    <content type="html"><![CDATA[<p>Azure Key Vault provides an easy way for managing cryptographic keys and secrets (like connection strings or passwords) in a secure and distributed manner as opposed to having them in the configuration file or a database. If you are new to Azure Key Vault check out the <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">Getting Started with Azure Key Vault</a> on how to setup the vault and add keys and use that from a console application.</p>

<p>In this post we will explore into the ways of authenticating a client application with a key vault. For an application to use the key vault it must authenticate using a token from the Azure Active Directory (AD). For this an application needs to be registered in the Azure AD and this application needs to be authorized to access key or secret in the vault using the <a href="https://msdn.microsoft.com/en-us/library/azure/dn903607.aspx">Set-AzureKeyVaultAccessPolicy</a> that comes as part of the <a href="https://gallery.technet.microsoft.com/scriptcenter/Azure-Key-Vault-Powershell-1349b091">key vault powershell scripts</a>.</p>

<blockquote><p>As of today, the keyvault will be created in the Default AD associated to the azure subscription and there is no way that it can be created in a different directory. But maybe this will be <a href="https://social.msdn.microsoft.com/Forums/azure/en-US/21d0dcaa-791c-4f96-8f9d-738b6b0076b2/create-a-new-key-vault-in-a-different-directory?forum=AzureKeyVault">supported in future</a>.</p></blockquote>

<p>So for a client to access the key vault, it needs to obtain the token from the Azure AD application, which can be done using 2 ways:</p>

<ul>
<li>Using ClientId and secret</li>
<li>Using ClientId and certificate</li>
</ul>


<h4><strong>Using ClientId and Secret</strong></h4>

<p>Creating an application that can be authenticated using clientid and secret can be done using the management portal. In the azure management portal, we need to create to the application under the default AD. To find the default AD you can check under the settings in the portal</p>

<p><img class="center" alt="Default Active Directory under Settings" src="http://rahulpnath.com/images/default_ad_settings.PNG" /></p>

<p>To add an application in the default, under Active Directory select the default AD and the applications tab and select &lsquo;<em>Add an application</em>&rsquo;.</p>

<p><img class="center" alt="Create an Application under default" src="http://rahulpnath.com/images/default_ad.PNG" /></p>

<p>From the pop-up select &lsquo;<em>Add an application my organization is developing</em>&rsquo; and give a name of your choice and of type &lsquo;<em>Web Application AND/OR WEB API</em>&rsquo;. In the App properties window it asks for the &lsquo;<em>Sign-On Url</em>&rsquo; and &lsquo;<em>App ID Uri</em>&rsquo;, for which you can give two unique values and is not mandatory that it should exists. On confirming these values the AD application would be created and you would be presented with the application properties. Under the &lsquo;<em>Configure</em>&rsquo; tab, you can see the Client ID and below that there is an option to create the &lsquo;<em>keys</em>&rsquo; which will be the secret.</p>

<p><img class="center" alt="AD Application Configure" src="http://rahulpnath.com/images/ad_application_configure.PNG" /></p>

<p>In the drop-down under the keys select the duration and choose a duration of your choice and save. On saving the secret will be generated. Copy this secret and keep for reference to use in the client application.</p>

<p><img class="center" alt="AD Application Secret Generation" src="http://rahulpnath.com/images/ad_application_keys.PNG" /></p>

<p>Now that we have created the application and have the clientid and the secret we need to authorize the application to access the key vault. For this we use the <em>Set-AzureKeyVaultAccessPolicy</em> from the powershell and provide the client id of the application that we have just created. The <em>PermissionToKeys</em> parameter determines the permission that the application would have on the keys in the vault which can take multiple comma separated values (all, backup, create, decrypt, delete, encrypt, import, get, list, restore, sign, wrapkey, unwrapkey, update and verify). Similarly for access to secrets in the keyvault you need to set <em>PermissionToSecrets</em> which can all take multiple values (all, delete, get, list and set).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">PS</span> <span class="n">C</span><span class="err">:</span><span class="p">\&gt;</span> <span class="nb">Set-AzureKeyVaultAccessPolicy</span> <span class="n">-VaultName</span> <span class="s1">&#39;TestVaultRahul&#39;</span> <span class="n">-ServicePrincipalName</span> <span class="s1">&#39;01c74fc1-4fb3-455e-8612-d5ad05a7fe2a&#39;</span> <span class="n">-PermissionsToKeys</span> <span class="n">all</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now using the clientid and the secret we can authenticate from the client application using it as below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">keyClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultClient</span><span class="p">((</span><span class="n">authority</span><span class="p">,</span> <span class="n">resource</span><span class="p">,</span> <span class="n">scope</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">adCredential</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClientCredential</span><span class="p">(</span><span class="n">clientid</span><span class="p">,</span> <span class="n">applicationSecret</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">authenticationContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthenticationContext</span><span class="p">(</span><span class="n">authority</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">authenticationContext</span><span class="p">.</span><span class="n">AcquireToken</span><span class="p">(</span><span class="n">resource</span><span class="p">,</span> <span class="n">adCredential</span><span class="p">).</span><span class="n">AccessToken</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Using ClientId and Certificate</strong></h4>

<p>Creating an application that can be authenticated using the clientid and the certificate is only possible using powershell scripts, and these are again available with the key vault powershell scripts. For this we first need to create a certificate or if your organization already has provided one use that. Since this is for demo I would be creating a test certificate as <a href="https://msdn.microsoft.com/en-in/library/ff699202.aspx">explained here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">makecert</span> <span class="p">-</span><span class="n">sv</span> <span class="n">mykey</span><span class="p">.</span><span class="n">pvk</span> <span class="p">-</span><span class="n">n</span> <span class="s">&quot;cn=AD Test Vault Application&quot;</span> <span class="n">ADTestVaultApplication</span><span class="p">.</span><span class="n">cer</span> <span class="p">-</span><span class="n">b</span> <span class="m">03</span><span class="p">/</span><span class="m">03</span><span class="p">/</span><span class="m">2014</span> <span class="p">-</span><span class="n">e</span> <span class="m">06</span><span class="p">/</span><span class="m">05</span><span class="p">/</span><span class="m">2016</span> <span class="p">-</span><span class="n">r</span>
</span><span class='line'><span class="n">pvk2pfx</span> <span class="p">-</span><span class="n">pvk</span> <span class="n">mykey</span><span class="p">.</span><span class="n">pvk</span> <span class="p">-</span><span class="n">spc</span> <span class="n">ADTestVaultApplication</span><span class="p">.</span><span class="n">cer</span> <span class="p">-</span><span class="n">pfx</span> <span class="n">ADTestVaultApplication</span><span class="p">.</span><span class="n">pfx</span> <span class="p">-</span><span class="n">po</span> <span class="n">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we have the certificate, we can create a new AD application and specify certificate authentication for the application as shown below. Make sure that you give the full path to the certificate as below (mine was located under C:\cert)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Connect-AzureAD</span> <span class="n">-DomainName</span> <span class="s1">&#39;&lt;domainname&gt;&#39;</span>
</span><span class='line'><span class="nv">$newADApplication</span> <span class="p">=</span> <span class="nb">New-AzureADApplication</span> <span class="n">-DisplayName</span> <span class="s1">&#39;TestVaultApplication&#39;</span>
</span><span class='line'><span class="nb">Add-AzureADApplicationCredential</span> <span class="n">-ObjectId</span> <span class="nv">$newADApplication</span><span class="p">.</span><span class="n">objectId</span> <span class="n">-FilePath</span> <span class="n">C</span><span class="err">:</span><span class="p">\</span><span class="n">cert</span><span class="p">\</span><span class="n">ADTestVaultApplication</span><span class="p">.</span><span class="n">cer</span>
</span><span class='line'><span class="nv">$newADApplication</span><span class="p">.</span><span class="n">appId</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the application is created, we need to perform the same authorization steps as above to give the application access to the key vault, after which we can use the clientid (that would be output to the powershell console) and the certificate to authenticate the application. Make sure that the certificate is installed into the store so that it can be used by the application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">keyClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultClient</span><span class="p">((</span><span class="n">authority</span><span class="p">,</span> <span class="n">resource</span><span class="p">,</span> <span class="n">scope</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">authenticationContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthenticationContext</span><span class="p">(</span><span class="n">authority</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="n">X509Certificate2</span> <span class="n">certificate</span><span class="p">;</span>
</span><span class='line'>    <span class="n">X509Store</span> <span class="n">store</span> <span class="p">=</span> <span class="k">new</span> <span class="n">X509Store</span><span class="p">(</span><span class="n">StoreName</span><span class="p">.</span><span class="n">My</span><span class="p">,</span> <span class="n">StoreLocation</span><span class="p">.</span><span class="n">CurrentUser</span><span class="p">);</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">store</span><span class="p">.</span><span class="n">Open</span><span class="p">(</span><span class="n">OpenFlags</span><span class="p">.</span><span class="n">ReadOnly</span><span class="p">);</span>
</span><span class='line'>        <span class="n">X509Certificate2Collection</span> <span class="n">certificateCollection</span> <span class="p">=</span> <span class="n">store</span><span class="p">.</span><span class="n">Certificates</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">X509FindType</span><span class="p">.</span><span class="n">FindByThumbprint</span><span class="p">,</span> <span class="s">&quot;E2F3EAE0A131EE0CF1FF1995A6ABA9F9462A0C03&quot;</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">certificateCollection</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">certificateCollection</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Certificate not installed in the store&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">certificate</span> <span class="p">=</span> <span class="n">certificateCollection</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">finally</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">store</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">clientAssertionCertificate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClientAssertionCertificate</span><span class="p">(</span><span class="n">applicationId</span><span class="p">,</span> <span class="n">certificate</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">authenticationContext</span><span class="p">.</span><span class="n">AcquireToken</span><span class="p">(</span><span class="n">resource</span><span class="p">,</span> <span class="n">clientAssertionCertificate</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">AccessToken</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could use either ways to authenticate an application to Azure Key Vault. Using the certificate way would be more secure as you can also password protect your certificate so that it cannot be installed without having that. If using the client secret anybody having access to the configuration would be able to access the vault. Also make sure that you give the application&rsquo;s only necessary permissions for accessing keys and secrets while registering the application. You could use the sample used in the <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">Getting Started with Azure Key Vault</a> <a href="https://github.com/rahulpnath/Blog/tree/master/AzureKeyVault">sample</a>. The code in there uses clientId and secret, you could change it with the above code to use certificate authentication.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/getting-started-with-azure-key-vault/"/>
    <updated>2015-01-25T18:22:06+05:30</updated>
    <id>http://rahulpnath.com/blog/getting-started-with-azure-key-vault</id>
    <content type="html"><![CDATA[<p>Azure Key Vault service is a cloud hosted, HSM(Hardware Security Modules)-backed service for managing cryptographic keys and other secrets. With Azure Key Vault, the process of managing and controlling the keys required for an application or multiple applications for an enterprise can be handled at a centralized place. Also these sensitive information no longer needs to be exposed in the application&rsquo;s configuration file or in database. Keys can be created in the vault and accessed via url&rsquo;s by the required application. Operations against the Key Vault are authenticated and authorized using Azure Active Directory. So in short all that a developer would need to know are the URI&rsquo;s for the keys, the <a href="https://msdn.microsoft.com/en-us/library/azure/dn903625.aspx">sdk/api</a> to access the vault features and also on the mechanism to authenticate against the AD application (an appId/client secret or appId/certificate).</p>

<p><img class="center" alt="Azure Key Vault Overview" src="http://rahulpnath.com/images/azurekeyvault_overview.png" /></p>

<h3>Key Types</h3>

<p>The initial release of Azure Key Vault only supports RSA keys (asymmetric cryptography) - it supports both software and HSM processed keys, and are represented as JSON Web Key objects. In future there might be more support for the different key types that are there in cryptography. For those who are new to cryptography or needs a quick recap on cryptography algorithms:</p>

<h5><strong>Symmetric Cryptography</strong></h5>

<p>Symmetric cryptography, uses the same key to encrypt and decrypt the data. The keys are shared between the identities that require to transfer the encrypted data.</p>

<p><img class="center" alt="Symmetric Encryption" src="http://rahulpnath.com/images/symmetric_encryption.png" /></p>

<h5><strong>Asymmetric Cryptography</strong></h5>

<p>Asymmetric cryptography, also known as public key cryptography uses two separate keys - a public key and private key. The public key can be used to encrypt the data or to verify a digital signature whereas the private key is used to decrypt the text or to digital sign.</p>

<p><img class="center" alt="Asymmetric Encryption" src="http://rahulpnath.com/images/asymmetric_encryption.png" /></p>

<p>To create a new key in the Azure Key Vault, first we need to create the vault, using powershell scripts. You would need to install <a href="http://www.rahulpnath.com/blog/azure-key-vault-and-powershell-module-version/">azure module version 0.8.13 version or higher</a> for the key vault scripts to execute. Detailed steps on creating the vault and keys is documented <a href="http://azure.microsoft.com/en-in/documentation/articles/key-vault-get-started/">here</a>. Once we have the key created we can get the attributes of the key, using <em>Get-AzureKeyVaultKey</em>. This is as per the <a href="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-41#page-25">JSON Web Key(JWK) format</a>. The &lsquo;<em>n/e</em>&rsquo; values in the below key are for the RSA key type(<em>kty</em>), showing the public key information.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">PS</span> <span class="n">C</span><span class="err">:</span><span class="p">\&gt;</span> <span class="nb">Get-AzureKeyVaultKey</span> <span class="n">-Name</span> <span class="n">rahulkey</span> <span class="n">-VaultName</span> <span class="n">testvaultrahul</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Attributes</span> <span class="err">:</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">Azure</span><span class="p">.</span><span class="n">Commands</span><span class="p">.</span><span class="n">KeyVault</span><span class="p">.</span><span class="n">Models</span><span class="p">.</span><span class="n">KeyAttributes</span>
</span><span class='line'><span class="n">Key</span>        <span class="err">:</span> <span class="p">{</span><span class="s2">&quot;kid&quot;</span><span class="err">:</span><span class="s2">&quot;https://testvaultrahul.vault.azure.net/keys/rahulkey/0f653b06c1d94159bc7090596bbf7784&quot;</span><span class="p">,</span><span class="s2">&quot;kty&quot;</span><span class="err">:</span><span class="s2">&quot;RSA&quot;</span><span class="p">,</span><span class="s2">&quot;key_ops&quot;</span><span class="err">:</span><span class="p">[</span><span class="s2">&quot;encrypt&quot;</span><span class="p">,</span><span class="s2">&quot;decrypt&quot;</span><span class="p">,</span><span class="s2">&quot;sign&quot;</span><span class="p">,</span><span class="s2">&quot;verify&quot;</span><span class="p">,</span><span class="s2">&quot;w </span>
</span><span class='line'><span class="s2">             rapKey&quot;</span><span class="p">,</span><span class="s2">&quot;unwrapKey&quot;</span><span class="p">],</span><span class="s2">&quot;n&quot;</span><span class="err">:</span><span class="s2">&quot;xAXdHg5IAiU44GLM41hrCgfbEf8vg414lwIXBRHwPH-GTdQo3x5hMyvEtT26udcWLeRDDYGQxquuQ03ChXmXaE1Z8rdDpuaciJVoTB8wA_icr4Ww4ld0zuk9Nf31sVP-T_ </span>
</span><span class='line'><span class="s2">             UiYBpg_3MdwbDvO53udtknLWnXEa-Y-NXlCwUus6LOtfoG1_oVg5B5OFfcW993Zb44C3ZMoOESa-fW0eT6OefBJOgXwGG5gB-zAB2D7uzhStu3Cp4OiFELQSAS4gpt2GCUI76YkTfq8jnIJ7bi5cYzUb-Sv2 </span>
</span><span class='line'><span class="s2">             9nkiwJV9I7hN6wuoz1gNRoJJVisBtidiFd8EYYuCGB3AH8OWbWS_sXEw&quot;</span><span class="p">,</span><span class="s2">&quot;e&quot;</span><span class="err">:</span><span class="s2">&quot;AQAB&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">VaultName</span>  <span class="err">:</span> <span class="n">testvaultrahul</span>
</span><span class='line'><span class="n">Name</span>       <span class="err">:</span> <span class="n">rahulkey</span>
</span><span class='line'><span class="n">Version</span>    <span class="err">:</span> <span class="n">0f653b06c1d94159bc7090596bbf7784</span>
</span><span class='line'><span class="n">Id</span>         <span class="err">:</span> <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">testvaultrahul</span><span class="p">.</span><span class="n">vault</span><span class="p">.</span><span class="n">azure</span><span class="p">.</span><span class="n">net</span><span class="p">/</span><span class="n">keys</span><span class="p">/</span><span class="n">rahulkey</span><span class="p">/</span><span class="n">0f653b06c1d94159bc7090596bbf7784</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Key Operations</h3>

<p>Now that we have a key in the vault, we can use this to perform different operations allowed on the key, as provided in the <em>key_ops</em> field in the key details above. Typical operations that can be performed using the key are Encrypt, Decrypt, Sign, Verify, WrapKey and UnWrapKey. For an application to use the key vault keys, it needs to authenticate using a token from the Azure Active Directory. For this we first need to <a href="http://azure.microsoft.com/en-us/documentation/articles/key-vault-get-started/#register">register an application with azure active directory</a> and then use the Application id and Authentication key(client secret) to authenticate against the AD application. Instead of using the  key/secret, this could also be through a certificate authentication, which might be a more preferred approach(For the simplicity of this demo will use the application id and the secret directly). To connect to the AD application we can use the <a href="https://www.nuget.org/packages/Microsoft.IdentityModel.Clients.ActiveDirectory/2.14.201151115">Active Directory Authentication Library</a> nuget package, the KeyVault libraries are availalble as part of the <a href="http://www.microsoft.com/en-us/download/details.aspx?id=45343">samples</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">keyClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultClient</span><span class="p">((</span><span class="n">authority</span><span class="p">,</span> <span class="n">resource</span><span class="p">,</span> <span class="n">scope</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">adCredential</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClientCredential</span><span class="p">(</span><span class="n">applicationId</span><span class="p">,</span> <span class="n">applicationSecret</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">authenticationContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthenticationContext</span><span class="p">(</span><span class="n">authority</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">authenticationContext</span><span class="p">.</span><span class="n">AcquireToken</span><span class="p">(</span><span class="n">resource</span><span class="p">,</span> <span class="n">adCredential</span><span class="p">).</span><span class="n">AccessToken</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the key details</span>
</span><span class='line'><span class="kt">var</span> <span class="n">keyIdentifier</span> <span class="p">=</span> <span class="s">&quot;https://testvaultrahul.vault.azure.net/keys/rahulkey/0f653b06c1d94159bc7090596bbf7784&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">GetKeyAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">publicKey</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToBase64String</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">Key</span><span class="p">.</span><span class="n">N</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The application first uses the AD application credentials to authenticate and obtain the token for further interacting with the key vault. Using the key identifier that is available we get the details of the key.For performing the get operation the &lsquo;<em>PermissionToKeys</em>&rsquo;, should be set appropriately when registering the AD application, using Set-AzureKeyVaultAccessPolicy, against the key vault. Since this is RSA asymmetric algorithm, we have the public key available to us, and we can use this to encrypt the data or to verify the signature, locally in the application itself, though the vault client provides this for convenience.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">rsa</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RSACryptoServiceProvider</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">p</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RSAParameters</span><span class="p">()</span> <span class="p">{</span> <span class="n">Modulus</span> <span class="p">=</span> <span class="n">key</span><span class="p">.</span><span class="n">Key</span><span class="p">.</span><span class="n">N</span><span class="p">,</span> <span class="n">Exponent</span> <span class="p">=</span> <span class="n">key</span><span class="p">.</span><span class="n">Key</span><span class="p">.</span><span class="n">E</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">rsa</span><span class="p">.</span><span class="n">ImportParameters</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">byteData</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">textToEncrypt</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Encrypt and Decrypt</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">encryptedText</span> <span class="p">=</span> <span class="n">rsa</span><span class="p">.</span><span class="n">Encrypt</span><span class="p">(</span><span class="n">byteData</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">decryptedData</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">DecryptDataAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">,</span> <span class="s">&quot;RSA_OAEP&quot;</span><span class="p">,</span> <span class="n">encryptedText</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">decryptedText</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">decryptedData</span><span class="p">.</span><span class="n">Result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Sign and Verify</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">hasher</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SHA256CryptoServiceProvider</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">digest</span> <span class="p">=</span> <span class="n">hasher</span><span class="p">.</span><span class="n">ComputeHash</span><span class="p">(</span><span class="n">byteData</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">signature</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">SignAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">,</span> <span class="s">&quot;RS256&quot;</span><span class="p">,</span> <span class="n">digest</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">isVerified</span> <span class="p">=</span> <span class="n">rsa</span><span class="p">.</span><span class="n">VerifyHash</span><span class="p">(</span><span class="n">digest</span><span class="p">,</span> <span class="s">&quot;Sha256&quot;</span><span class="p">,</span> <span class="n">signature</span><span class="p">.</span><span class="n">Result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As above, we use the public key available to create the <a href="https://msdn.microsoft.com/en-us/library/System.Security.Cryptography.RSACryptoServiceProvider(v=vs.110).aspx">RSACryptoServiceProvider</a> to encrypt the data and also to verify the signature locally. So in an application we can encrypt the data locally and use the vault to decrypt it when required. Decryption can happen only from the vault, as the private key is only available in the vault, and does not cross the vault boundary.</p>

<p>With Azure Key Vault, managing keys and restricting application permission for keys can be easily managed and no information needs to be passed on to the developer or to any specific individual. Also the keys are secure behind the vault service and can also be protected using a HSM. You would need to update the application id and secret in the <a href="https://github.com/rahulpnath/Blog/tree/master/AzureKeyVault">sample</a> for it to work. Hope this helps in getting you started with Azure Key Vault.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault and Powershell Module Version]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-and-powershell-module-version/"/>
    <updated>2015-01-17T18:05:53+05:30</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-and-powershell-module-version</id>
    <content type="html"><![CDATA[<p>I was trying out the public preview of the  Azure Key Vault service that has been released recently. While following the steps as mentioned in their <a href="http://blogs.technet.com/b/kv/archive/2015/01/08/azure-key-vault-making-the-cloud-safer.aspx">blog</a>, came across the below error when trying the &lsquo;<em>New-AzureKeyVault</em>&rsquo; command.</p>

<blockquote><p>Please install Azure Powershell module version 0.8.13 or newer.</p></blockquote>

<p>I did have the <a href="http://azure.microsoft.com/en-us/documentation/articles/install-configure-powershell/#Install">latest powershell for azure</a> installed, but still this error is thrown.</p>

<p><img class="center" alt="azure powershell installed version" src="http://rahulpnath.com/images/azure_powershell_installed.png" /></p>

<p>Exploring the <a href="http://msdn.microsoft.com/library/dn868052.aspx">powershell scripts for key vault</a>, below is where the error is thrown from &lsquo;<em>Common.ps1</em>&rsquo;. The script looks for the <a href="http://msdn.microsoft.com/en-us/library/dn654592.aspx">AzureResourceManager</a>, which got introduced in poweshell version 0.8.0 and lets you manage resources in a completely different way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="n">Azure-Version-Check</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$expectedMinVersion</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="n">Version</span> <span class="n">-ArgumentList</span> <span class="s2">&quot;0.8.13&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$azureModule</span> <span class="p">=</span> <span class="nb">Get-Module</span> <span class="n">AzureResourceManager</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="o">-not</span> <span class="nv">$azureModule</span><span class="p">)</span> <span class="o">-or</span> <span class="p">(</span><span class="nv">$azureModule</span><span class="p">.</span><span class="n">Version</span> <span class="o">-lt</span> <span class="nv">$expectedMinVersion</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">Throw</span> <span class="s1">&#39;Please install Azure Powershell module version 0.8.13 or newer.&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>When you use the Azure PowerShell cmdlets, the Azure module is imported into the session by default. To remove the Azure module from the session and import the AzureResourceManager and AzureProfile modules, use the Switch-AzureMode cmdlet.</p></blockquote>

<p>This is what is exactly causing the issue, we need to switch to use the azure resource manager. Running the below command and trying the &lsquo;<em>New-AzureKeyVault</em>&rsquo; command works like a charm</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Switch</span><span class="n">-AzureMode</span> <span class="n">-Name</span> <span class="n">AzureResourceManager</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>You would face this issue only if you started trying out the steps as mentioned in the <a href="http://blogs.technet.com/b/kv/archive/2015/01/09/azure-key-vault-step-by-step.aspx">azure key vault blog</a>(as I did), since the steps in the <a href="http://azure.microsoft.com/en-us/documentation/articles/key-vault-get-started/">documentation site</a></em> is updated with the above step.*</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IsRegistered on Unity Container for Generic Type]]></title>
    <link href="http://rahulpnath.com/blog/isregistered-on-unity-container-for-generic-type/"/>
    <updated>2015-01-14T22:31:51+05:30</updated>
    <id>http://rahulpnath.com/blog/isregistered-on-unity-container-for-generic-type</id>
    <content type="html"><![CDATA[<p><em>This post just describes a bug that is there in the Unity (3.5.1404) IoC container, when using the IsRegistered extension method, to check for generic types and a possible fix for it.</em></p>

<p><a href="http://msdn.microsoft.com/en-us/library/ff647202.aspx">Unity</a> IoC container provides <a href="http://msdn.microsoft.com/en-us/library/microsoft.practices.unity.unitycontainerextensions.isregistered(v=pandp.51).aspx">IsRegistered</a> extension method, that can be used to check whether a registration exists for a given type and name (can be null too) combination. When a generic type is registered in the container and trying to check IsRegistered using a concrete typed version of the generic interface it returns false.</p>

<p>As shown in the below code snippet, calling IsRegistered on a non-generic interface(<em>IFooBar</em>) returns true, indicating that a registration exists. But for the generic interface(<em>IFooGeneric&lt;></em>), trying to check if a registration exists for a concrete type (<em>IFooGeneric<string></em> - as only concrete types can be resolved from the container and an open generic type cannot be resolved) it returns false.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IUnityContainer</span> <span class="n">unityContainer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UnityContainer</span><span class="p">();</span>
</span><span class='line'><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IFooBar</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">FooBarImplementation</span><span class="p">));</span>
</span><span class='line'><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IFooGeneric</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">FooGenericImplementation</span><span class="p">&lt;&gt;));</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">hasFooBarRegistration</span> <span class="p">=</span> <span class="n">unityContainer</span><span class="p">.</span><span class="n">IsRegistered</span><span class="p">&lt;</span><span class="n">IFooBar</span><span class="p">&gt;();</span> <span class="c1">// Returns true</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">hasFooGenericStringRegistration</span> <span class="p">=</span> <span class="n">unityContainer</span><span class="p">.</span><span class="n">IsRegistered</span><span class="p">&lt;</span><span class="n">IFooGeneric</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;();</span> <span class="c1">// Returns False</span>
</span><span class='line'><span class="kt">var</span> <span class="n">fooGenericString</span> <span class="p">=</span> <span class="n">unityContainer</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IFooGeneric</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;();</span> <span class="c1">// Resolution Succeeds</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://unity.codeplex.com/SourceControl/latest#source/Unity/Src/UnityContainerExtensions.cs">IsRegistered method </a> as shown below, loops through the list of available registrations looking for a match on the registered type and name. The &lsquo;<em>typeToCheck</em>&rsquo; is the type of the object that we are trying to resolve in IsRegistered - <em>typeof(IFooGeneric<string>)</em>, but the registered type is <em>typeof(IFooGeneric&lt;>)</em>. Because of this the comparison fails and the registration does not pass the where clause of the query, causing the function to return <em>false</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">registration</span> <span class="p">=</span> <span class="k">from</span> <span class="n">r</span> <span class="k">in</span> <span class="n">container</span><span class="p">.</span><span class="n">Registrations</span>
</span><span class='line'>                   <span class="k">where</span> <span class="n">r</span><span class="p">.</span><span class="n">RegisteredType</span> <span class="p">==</span> <span class="n">typeToCheck</span> <span class="p">&amp;&amp;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">nameToCheck</span>
</span><span class='line'>                   <span class="k">select</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">registration</span><span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To fix this, we would need to modify the where condition so that in cases where the RegisteredType is a generic type definition, it would compare with the generic type definition of &lsquo;<em>typeToCheck</em>&rsquo;, as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">genericTypeToCheck</span> <span class="p">=</span> <span class="n">typeToCheck</span><span class="p">.</span><span class="n">GetTypeInfo</span><span class="p">().</span><span class="n">IsGenericType</span>
</span><span class='line'>                         <span class="p">?</span> <span class="n">typeToCheck</span><span class="p">.</span><span class="n">GetGenericTypeDefinition</span><span class="p">()</span>
</span><span class='line'>                         <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">registration</span> <span class="p">=</span> <span class="k">from</span> <span class="n">r</span> <span class="k">in</span> <span class="n">container</span><span class="p">.</span><span class="n">Registrations</span>
</span><span class='line'>                   <span class="k">where</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">RegisteredType</span><span class="p">.</span><span class="n">GetTypeInfo</span><span class="p">().</span><span class="n">IsGenericTypeDefinition</span>
</span><span class='line'>                   <span class="p">?</span> <span class="n">r</span><span class="p">.</span><span class="n">RegisteredType</span> <span class="p">==</span> <span class="n">genericTypeToCheck</span>
</span><span class='line'>                   <span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">RegisteredType</span> <span class="p">==</span> <span class="n">typeToCheck</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">&amp;&amp;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">nameToCheck</span>
</span><span class='line'>                   <span class="k">select</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">registration</span><span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A similar <a href="https://unity.codeplex.com/discussions/568979">issue</a> was already raised in the unity discussions, which I feel was closed inappropriately.</p>

<blockquote><p>If a container can Resolve a particular type then it should also be able to return that it IsRegistered.</p></blockquote>

<p>Please do be aware that using IsRegistered extensively has a <a href="http://unity.codeplex.com/discussions/268223">negative impact on performance</a> as looping through the Registration looking for the name and type has <a href="http://en.wikipedia.org/wiki/Big_O_notation">O(n) complexity</a>. But that still does not justify the bug!.</p>

<p><em>I have submitted a <a href="https://unity.codeplex.com/SourceControl/network/forks/rahulpnath/isRegisteredForGenericTypes/contribution/7903">pull request</a> for the fix and it would be worth checking the latest comments on that to see if there are any better approaches or problems that I might have missed out with my fix!</em>
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Multiple Implementations of same Interface]]></title>
    <link href="http://rahulpnath.com/blog/testing-multiple-implementations-of-same-interface/"/>
    <updated>2015-01-10T10:24:15+05:30</updated>
    <id>http://rahulpnath.com/blog/testing-multiple-implementations-of-same-interface</id>
    <content type="html"><![CDATA[<p>Often there are times when we need to test multiple implementations of the same interface. We would want to use the same test case against all the implementations so that we <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">don&rsquo;t repeat ourselves</a>. In this post we will see how we can reuse the same test cases to test both the implementation, by running them against both the implementations.</p>

<blockquote><p>If you are just interested in the approach - The same test project dll is run twice using vstest.console, by setting an environment variable. Inside the test, (either in the assembly initialize or test initialize) register the appropriate implementations into a IoC container, based on the environment variable value.</p></blockquote>

<p>Interested in the full implementation, then read on!</p>

<p>Since we are not much bothered about the actual interface and its implementation, I have a very simple interface as below, which calculates the length of the given string.There are two implementations for this that might have two different ways of calculating the length of the string given an input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IFoo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">GetLength</span><span class="p">(</span><span class="kt">string</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Implementation 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">IFoo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetLength</span><span class="p">(</span><span class="kt">string</span> <span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">input</span><span class="p">.</span><span class="n">Count</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Implementation 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">IFoo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetLength</span><span class="p">(</span><span class="kt">string</span> <span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">input</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though the sample has a simple interface, this might not be the case in a real life project. So the sample mimics a real time implementation structure - we have one interface project and two other projects that have the corresponding implementation. The implementations could also be in the same assembly and this would be applicable for those scenarios too, and can be made to work with some few tweaks in one of the steps (which I will mention when we are there). The test case project that will have the appropriate test cases.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[TestMethod]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">TestThreeLetterLength</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IFoo</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">returnValue</span> <span class="p">=</span> <span class="n">foo</span><span class="p">.</span><span class="n">GetLength</span><span class="p">(</span><span class="s">&quot;Foo&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">IsTrue</span><span class="p">(</span><span class="n">returnValue</span> <span class="p">==</span> <span class="m">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test case uses the IoC container to get the corresponding implementation of the interface, so it is not all about switching the registered implementation in the container. If this is only for the tests in this particular class then we could do this in the <a href="http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.testinitializeattribute.aspx">TestInitialize</a> method. But most likely you would have multiple tests and also multiple interfaces that we are using. So we can do this in the <a href="http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assemblyinitializeattribute.aspx">AssemblyInitialze</a> for the assembly.</p>

<figure class='code'><figcaption><span>Interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">test</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="n">GetEnvironmentVariable</span><span class="p">(</span><span class="n">TestEnviromentVariable</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">test</span> <span class="p">==</span> <span class="s">&quot;1&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">container</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">IFoo</span><span class="p">,</span> <span class="n">FooImplementation1</span><span class="p">.</span><span class="n">Foo</span><span class="p">&gt;();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">test</span> <span class="p">==</span> <span class="s">&quot;2&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">container</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">IFoo</span><span class="p">,</span> <span class="n">FooImplementation2</span><span class="p">.</span><span class="n">Foo</span><span class="p">&gt;();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above implementation might work in cases where the number of interfaces are less and also in cases where we have fewer possibilities of implementations, but as soon as the number goes up we will again have to keep repeating  the registrations and the if/else code. This is an IoC registration issue and is best handled using <a href="http://www.rahulpnath.com/blog/ioc-registration-by-convention/">IoC Registration by Convention</a>. We can have a configuration file matching the environment variable and have the assemblies that are to be loaded mentioned in that and pass only those assemblies to be explicitly registered into the convention registration logic. Even in cases where you have the implementations in the same assembly you can write your convention registration logics accordingly and decide what to register.</p>

<p>We can now run these test dll&rsquo;s using batch files by setting different environment variables as below. The bat files can be integrated into your build</p>

<figure class='code'><figcaption><span>FooTest.Implementation2.bat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="k">set</span> <span class="nv">Foo</span>.tests<span class="o">=</span><span class="m">2</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;Testing for configuration 2&quot;</span>
</span><span class='line'>msbuild TestingMultipleImplementations.sln
</span><span class='line'>vstest.console FooTestImpl<span class="m">1</span>\bin\Debug\FooTestImpl<span class="m">1</span>.dll <span class="n">/logger:trx</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps some one trying to reuse test cases for multiple implementations of the same interface. One another way to solve this issue would be to create multiple csproj files and have the same test case classes referred to both the project files, but have the reference assemblies specific to implementations. So in this case we would have multiple test dll&rsquo;s created, which can be run individually. The advantage of going via this approach is that we could have test cases specific to implementations too and also reuse test cases that are same across implementations by referring them as linked files. But currently we did not want this flexibility and did not want to add multiple project files and make it difficult for the team. You can find the sample implementation <a href="https://github.com/rahulpnath/Blog/tree/master/TestingMultipleImplementations">here</a>. Do you reuse test cases like this? Do drop in with a comment on your thoughts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IoC Registration by Convention]]></title>
    <link href="http://rahulpnath.com/blog/ioc-registration-by-convention/"/>
    <updated>2015-01-03T18:03:17+05:30</updated>
    <id>http://rahulpnath.com/blog/ioc-registration-by-convention</id>
    <content type="html"><![CDATA[<p>Sometime back we had seen, how to <a href="http://www.rahulpnath.com/blog/configuring-unity-container-comparing-code-and-xml-configuration-side-by-side/">configure the unity container using code/config file</a> and I was using a mix of this in one of my projects. This approach soon became an overhead, as the manual wiring up of registrations is really cumbersome and also error prone. Mostly there were missing registrations only to be found out, when doing test runs or deployments. We soon were forced to move out of the manual registration and find a new way to register dependencies.</p>

<p>The below image by <a href="https://twitter.com/ploeh">Mark Seemann</a> sums it all up on when and how to use a Dependency Injection(DI) container and we were right at the bottom, where the whole purpose of a DI becomes pointless.</p>

<p><a href="http://bit.ly/1zLiq6p" class="center" title="Image By Mark Seemann, from http://bit.ly/1zLiq6p"><img src="http://rahulpnath.com/images/ioc_usefulness.png" class="center" alt="Image By Mark Seemann, from http://bit.ly/1zLiq6p"></a></p>

<h4>Convention Over Configuration</h4>

<p><a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over configuration</a>, is very popular today and there are already many frameworks that have adopted it e.g. MVC, Web Api. Following the same approach would make life much simpler and registration less painful as dependencies would get auto registered, if the convention is followed. Conventions could vary across projects/teams, so it is up to the team to decide on the conventions that are to be followed and have all the developers follow them religiously.</p>

<p>Currently our registration process picks up all the assemblies from the base path and iterates through all the classes that are under the project/application namespace and gets the interfaces out of them and registers them. For interfaces that have multiple definitions we perform named registration based on the class name or name from an attribute on the class or both.</p>

<p>We are using Unity as the IoC container and it does support <a href="http://msdn.microsoft.com/en-us/library/dn507479(v=pandp.30).aspx">convention based registrations</a> out of the box. You can either use the RegisterTypes method or the RegistrationConvention class to specify the conventions. The parameters in both of these approaches enable you to specify the types to register, the mappings to create, the name to use and lifetime. Since in our registration we wanted to use the named convention only in cases where there where multiple registrations for the same interface and the other interfaces were to be registered without any name this default convention had to be modified. Also we did not want to get tightly bound to the IoC container (just in case we want to swap out the container provider) and hence thought of having the convention logics in a separate class and have them registered to the container of choice.</p>

<p>The <em>GetClassesFromAssemblies</em> function iterates over the assemblies from the base application path(bin folder) to get all the dll&rsquo;s used and gets the classes that belong to the namespaces that we want to register. Alternatively you could also pass a list of assemblies if required to be used for the convention. If you want other namespaces too you can filter those in here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;</span> <span class="n">GetClassesFromAssemblies</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Assembly</span><span class="p">&gt;</span> <span class="n">assemblies</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">allClasses</span> <span class="p">=</span> <span class="n">assemblies</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="n">AllClasses</span><span class="p">.</span><span class="n">FromAssemblies</span><span class="p">(</span><span class="n">assemblies</span><span class="p">)</span> <span class="p">:</span> <span class="n">AllClasses</span><span class="p">.</span><span class="n">FromAssembliesInBasePath</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>        <span class="n">allClasses</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span>
</span><span class='line'>            <span class="n">n</span> <span class="p">=&gt;</span>
</span><span class='line'>                <span class="n">n</span><span class="p">.</span><span class="n">Namespace</span> <span class="p">!=</span> <span class="k">null</span>
</span><span class='line'>                <span class="p">&amp;&amp;</span> <span class="n">n</span><span class="p">.</span><span class="n">Namespace</span><span class="p">.</span><span class="n">StartsWith</span><span class="p">(</span><span class="n">ApplicationNamespace</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">InvariantCultureIgnoreCase</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each of the type that is returned from the above method we get the list of interfaces that are defined on the type and needs to be registered against the type. In the sample code, I have added a couple of variations of registrations.</p>

<ul>
<li><em>IFooBar</em>        : Has only one implementation</li>
<li><em>IFoo</em>           : Has multiple implementations and should be resolved using <em>IFooFactory</em></li>
<li><em>IFooCustom</em>     : Has multiple implementations and needs to have a custom name (maybe for some reason you do not want the context information to be part of the class name). This is to be resolved using IFooCustomFactory.</li>
<li><em>IFooGeneric<T></em> : This is a generic implementation and the type can be decided at runtime.</li>
</ul>


<p>The <em>GetInterfacesToBeRegistered</em> function gets the interfaces that are to be registered for a given type. For this convention I want to <a href="http://stackoverflow.com/questions/5318685/get-only-direct-interface-instead-of-all">get only the direct interfaces</a> that are on the given type and not all the interfaces. The check below for <em>isGenericType</em> on an interface is for <em>IFooGeneric</em> as for generic interfaces the <a href="http://stackoverflow.com/questions/3117090/getinterfaces-returns-generic-interface-type-with-fullname-null">GetInterfaces does not return the full information required</a> and we need to use the <em>GetGenericTypeDefinition</em> method instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;</span> <span class="n">GetInterfacesToBeRegistered</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">allInterfacesOnType</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">GetInterfaces</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">IsGenericType</span> <span class="p">?</span> <span class="n">i</span><span class="p">.</span><span class="n">GetGenericTypeDefinition</span><span class="p">()</span> <span class="p">:</span> <span class="n">i</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">allInterfacesOnType</span><span class="p">.</span><span class="n">Except</span><span class="p">(</span><span class="n">allInterfacesOnType</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">GetInterfaces</span><span class="p">())).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we have the interfaces for the type, we add them to an internal mapping list to register it all into the unity container. The internal mapping is against the interface type definition and has the list of classes that implements the interface.Now that we have all the types and interfaces to be registered, we need to register them into the container. For any interface that has only one type implementing it, we register it with default name else we get the name from the class name or the attribute that decorates the class if any.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">RegisterConventions</span><span class="p">(</span><span class="n">IUnityContainer</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">typeMapping</span> <span class="k">in</span> <span class="n">internalTypeMapping</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">typeMapping</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="n">typeMapping</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">First</span><span class="p">();</span>
</span><span class='line'>            <span class="n">container</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">(</span><span class="n">typeMapping</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">type</span> <span class="k">in</span> <span class="n">typeMapping</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">container</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">(</span><span class="n">typeMapping</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">GetNameForRegsitration</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dependency with UnityContainer with the IoCConveniton class, can be easily removed by having an adapter interface into any container. To keep things simple I am having the direct dependency on the container in the sample. From the console application we can create a new container and use the convention class to register the dependencies. The factory implementations have the expected class conventions inside them that would be used to resolve the dependencies. Since the factory is part of the composition root I am using a <a href="http://blog.ploeh.dk/2012/03/15/ImplementinganAbstractFactory/">container based factory</a>, to resolve the dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IUnityContainer</span> <span class="n">unityContainer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UnityContainer</span><span class="p">();</span>
</span><span class='line'><span class="n">IoCConvention</span><span class="p">.</span><span class="n">RegisterByConvention</span><span class="p">(</span><span class="n">unityContainer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has really taken off a lot of work for all the developers in the team and registrations of dependencies works seamlessly. You can find the sample convention implementation <a href="https://github.com/rahulpnath/Blog/tree/master/IocConventionRegistration">here</a>. Are you using convention registrations in your applications? If not you should start using them.
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Agnostic Books For Every Developer]]></title>
    <link href="http://rahulpnath.com/blog/language-agnostic-books-for-every-developer/"/>
    <updated>2015-01-01T18:33:14+05:30</updated>
    <id>http://rahulpnath.com/blog/language-agnostic-books-for-every-developer</id>
    <content type="html"><![CDATA[<p>Reading is inevitable to keep up to date with the latest technologies and rapid changes happening in the programming world. But technology is nothing but a tool for getting things done. What one has to understand are the concepts and principles underlying these technology and the core principles of development. These are to be gained through <a href="http://www.rahulpnath.com/blog/an-enterprise-it-project-experience/">our own experiences</a> and also from the learnings and the experiences of others. Books are a great source of such experiences, and this post is a list of those that I have found interesting and helpful. I have not read all these nor was I able to fully understand whatever I have. These books are to be read/referred to multiple times, practiced and adopted into our work. It&rsquo;s also worth referring other books from the same author&rsquo;s or other writings as they are among the pioneers in our industry.</p>

<p>The books would speak for themselves and I don&rsquo;t think I can do justice writing a summary to any of these. So I have decided to just list them down here(in no specific order). It&rsquo;s worth having a personal copy of each one of these in your bookshelves. (mine is still short of some of them).</p>

<p><div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0735619670&linkCode=as2&tag=rahulpnath-20&linkId=6EBVFQ44LVCQC3VW">
            <img src="http://rahulpnath.com/images/books_codecomplete.jpg" data-holder-rendered="true" style="display: block;" >
             </a>
            <div class="caption">
              <h5><strong>Code Complete</strong></h5>
            </div>
          </div>
        </div>
       <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
          <a href="http://www.amazon.com/gp/product/0321146530/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321146530&linkCode=as2&tag=rahulpnath-20&linkId=UFKBUSTB43PNRS76" >
            <img src="http://rahulpnath.com/images/books_tdd.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Test Driven Development</strong></h5>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0131489062/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131489062&linkCode=as2&tag=rahulpnath-20&linkId=2IKSKNFHUIXAC3V4" >
            <img src="http://rahulpnath.com/images/books_applyinguml.jpeg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Applying UML and Patterns</strong></h5>          <br/>
            </div>
          </div>
        </div>
     <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321125215/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321125215&linkCode=as2&tag=rahulpnath-20&linkId=LGNNMURUNPIQJ22Q" >
            <img src="http://rahulpnath.com/images/books_ddd.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Domain Driven Design</strong></h5>          <br/>
            </div>
          </div>
        </div>
       </div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0596805829/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0596805829&linkCode=as2&tag=rahulpnath-20&linkId=BAC6OAIRWSGB4ZBB" >
            <img src="http://rahulpnath.com/images/books_restinpractice.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Rest in Practice</strong></h5>
            </div>
          </div>
        </div>
      <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=020161622X&linkCode=as2&tag=rahulpnath-20&linkId=I6W7QKVDPXSBR37P" >
            <img src="http://rahulpnath.com/images/books_pragmaticprogrammer.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>The Pragmatic Programmer</strong></h5>          <br/>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201485672&linkCode=as2&tag=rahulpnath-20&linkId=VPJIMQDT3AENNVY6" >
            <img src="http://rahulpnath.com/images/books_refactoring.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Refactoring</strong></h5>
            </div>
          </div>
        </div>
    <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321193687/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321193687&linkCode=as2&tag=rahulpnath-20&linkId=HXUV2APJ7YOHRIZY" >
            <img src="http://rahulpnath.com/images/books_umldistilled.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>UML Distilled</strong></h5>
            </div>
          </div>
        </div>
      </div>
      <div class="row">   <br/>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0201835959/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201835959&linkCode=as2&tag=rahulpnath-20&linkId=HKH5I6Q3Y6IYSCI5" >
            <img src="http://rahulpnath.com/images/books_mythicalmanmonth.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>The Mythical Man-Month</strong></h5>         <br/>
            </div>
          </div>
        </div>
      <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0262510871/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0262510871&linkCode=as2&tag=rahulpnath-20&linkId=7YASXOZAUG7JDUDI" >
            <img src="http://rahulpnath.com/images/books_sicp.jpg" data-holder-rendered="true" style="display: block;">
             </a>
            <div class="caption">
              <h5><strong>Structure and Interpretaion of Computer Programs</strong></h5>
            </div>
          </div>
        </div>
       <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0131857258/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131857258&linkCode=as2&tag=rahulpnath-20&linkId=SQ27A44S24WSXQK4" >
            <img src="http://rahulpnath.com/images/books_agilepatterns.jpg" data-holder-rendered="true" style="display: block;">
           </a>
           <div class="caption">
              <h5><strong>Agile Principles, Patterns and Practices</strong></h5>      <br/>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
         <a href="http://www.amazon.com/gp/product/0321127420/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321127420&linkCode=as2&tag=rahulpnath-20&linkId=UR5IBEFV64BK5FYG" >
            <img src="http://rahulpnath.com/images/books_poeaa.jpg" data-holder-rendered="true" style="display: block;">
          </a>
            <div class="caption">
              <h5><strong>Patterns of Enterprise Application and Architecture</strong></h5>          <br/>
            </div>
          </div>
        </div>    <br/>
      </div></p>

<p>Hope you start of this year off with some nice readings and gift yourself with some these master pieces. I am sure that I have not covered all of them and there are still more to be &lsquo;chewed and digested&rsquo;. Do drop in with a comment on Which books have helped you be better in programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Repository Pattern for Abstracting Data Access from a Cache and Data Store]]></title>
    <link href="http://rahulpnath.com/blog/using-repository-pattern-for-abstracting-data-access-from-a-cache-and-data-store/"/>
    <updated>2014-11-22T20:56:26+05:30</updated>
    <id>http://rahulpnath.com/blog/using-repository-pattern-for-abstracting-data-access-from-a-cache-and-data-store</id>
    <content type="html"><![CDATA[<blockquote><p>A Repository abstracts the persistence logic from the core business logic and allows the data to be accessed as it would have been from an in-memory object collection.</p></blockquote>

<p><a href="http://martinfowler.com/eaaCatalog/repository.html">Repository Pattern</a> is useful when you want your domain objects(or entities) to be persistence ignorant but yet have the flexibility to map your data to the choice of your data store e.g. Sql Server, Oracle, NoSQL databases, cache etc. The physical model of the stored data might vary from store to store but not the logical model. So a repository plays the role of mapping a logical model to physical model and vice versa. ORM (Object Relational Mapping) tools like <a href="http://msdn.microsoft.com/en-in/data/ef.aspx">Entity Framework</a> does help us to achieve this and we could make use of it wherever possible in building your domain specific repositories.</p>

<p>With large scale applications it is very common to have an external cache, to optimize repeated access to the data held in a data store. The repository is the ideal place to decide on populating, fetching and invalidating the cache. When building the repositories, we would not want to tightly couple ourselves with a specific cache provider or a data store provider like sql nor with any ORM tool like Entity Framework.</p>

<blockquote><p>In this blog post we will be seeing how to keep our Repositories clean and separate from the actual providers and provide a persistence ignorant data access to your business layer.</p></blockquote>

<p><img src="http://rahulpnath.com/images/RepositoryPattern.png" class="center" alt="Repository Pattern Class Diagram"></p>

<h3>Creating the Repository</h3>

<p>At the bare minimum a repository should be able to provide CRUD (Create Read Update Delete) options, for which we will have a generic interface defined and have implementation of which will be inherited from, for specific repositories.</p>

<figure class='code'><figcaption><span>Repository Interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IIdentifiable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">GetAll</span><span class="p">();</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">GetById</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">Update</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation of this interface would need to perform following functionality:</p>

<ol>
<li>Decide on whether to get the data from cache or data store and keep the data consistent.</li>
<li>Get/Modify the data from the cache</li>
<li>Get/Modify the data from the data store.</li>
</ol>


<p>Thinking of the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP (Single Responsibility Principle)</a>, it is best to keep these responsibilities separate so that each of them can change independently without changing the other. For this we need to further introduce 2 more interfaces, one for getting the data from the cache and one for the data store. These 2 need not be the same, as a cache would mostly work on a key value pair combination and the one for the data store would need to have the same methods as supported by the repository (You could have them as the same too in case required). As for the repository, it depends on these 2 interface implementation (which we call strategies), to get the data - CacheStrategy or DataStoreStrategy.</p>

<figure class='code'><figcaption><span>Cache Strategy Interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">ICacheStrategy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IIdentifiable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">InsertOrUpdate</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
</span><span class='line'>    <span class="n">T</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">Invalidate</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>DataStore Strategy Interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IDataStoreStrategy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IIdentifiable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We see that above, for the Cache Strategy interface I have added a set of methods that acts on the key and the value, the entity itself. For the DataStore strategy, we have the same methods coming from the IRepository interface so that we can translate them all into corresponding querying format of their storage and return the data.</p>

<p>The Sql data store strategy implementation using Entity Framework would be like below, which will have a context provided to it, that it can use for performing the queries on sql database. Will see more on the context later below.(The interface implementations are omitted below to keep it simple). A cache strategy would also look something similar and would depend on the caching provider that you use.</p>

<figure class='code'><figcaption><span>SqlDataStoreStrategy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SqlDataStoreStrategy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IDataStoreStrategy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">class</span><span class="p">,</span> <span class="n">IIdentifiable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">SqlDataStoreContext</span> <span class="n">dataContext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">IDbSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">dbSet</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">SqlDataStoreStrategy</span><span class="p">(</span><span class="n">IDataStoreContext</span> <span class="n">dataContext</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Since this is a specific implementation for Sql it does know about the existence of SqlDataStoreContext</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">dataContext</span> <span class="p">=</span> <span class="n">dataContext</span> <span class="k">as</span> <span class="n">SqlDataStoreContext</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">dbSet</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">dataContext</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Generic repository implementation will use these strategies to return the data. For example, a Get, it will first look the cache and then the data store.</p>

<figure class='code'><figcaption><span>Generic Repository</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">GenericRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IIdentifiable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">ICacheStrategy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">cacheStrategy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="n">IDataStoreStrategy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">dataStoreStrategy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">GenericRepository</span><span class="p">(</span><span class="n">ICacheStrategy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">cacheStrategy</span><span class="p">,</span> <span class="n">IDataStoreStrategy</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">dataStoreStrategy</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">cacheStrategy</span> <span class="p">=</span> <span class="n">cacheStrategy</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">dataStoreStrategy</span> <span class="p">=</span> <span class="n">dataStoreStrategy</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">T</span> <span class="nf">GetById</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">item</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">cacheStrategy</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">item</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">item</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">dataStoreStrategy</span><span class="p">.</span><span class="n">GetById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">cacheStrategy</span><span class="p">.</span><span class="n">InsertOrUpdate</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Creating Specific Repositories</h3>

<p>There might be cases where we want to query on specific fields or combination of fields or do something that is specific for that repository. In these cases you can extend on to the repository methods. You would need to add a couple of classes for the new specific repository.</p>

<ol>
<li>Create a new repository interface and implement it.</li>
<li>Create a new data store strategy interface which implements from the new repository interface and the base data store strategy interface and implement it.</li>
<li>In case cache strategy needs an update update its interfaces too as like step 2</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IArticleRepository</span> <span class="p">:</span> <span class="n">IRepository</span><span class="p">&lt;</span><span class="n">Article</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Article</span><span class="p">&gt;</span> <span class="n">GetAllArticlesByCategory</span><span class="p">(</span><span class="kt">string</span> <span class="n">categoryName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IArticleDataStoreStrategy</span> <span class="p">:</span> <span class="n">IDataStoreStrategy</span><span class="p">&lt;</span><span class="n">Article</span><span class="p">&gt;,</span> <span class="n">IArticleRepository</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ArticleSqlDataStoreStrategy</span> <span class="p">:</span> <span class="n">SqlDataStoreStrategy</span><span class="p">&lt;</span><span class="n">Article</span><span class="p">&gt;,</span> <span class="n">IArticleDataStoreStrategy</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">ArticleSqlDataStoreStrategy</span><span class="p">(</span><span class="n">IDataStoreContext</span> <span class="n">dataStoreContext</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">dataStoreContext</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Article</span><span class="p">&gt;</span> <span class="n">GetAllArticlesByCategory</span><span class="p">(</span><span class="kt">string</span> <span class="n">categoryName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// In case this is to return a large set of items then you can create a paged response and update the</span>
</span><span class='line'>        <span class="c1">// input also to take in the page number and number of articles in one page</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">dbSet</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">Category</span> <span class="p">==</span> <span class="n">categoryName</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Supporting Unit Of Work</h3>

<p>There might be cases where we need to update against multiple repositories and have them all saved in one single transaction. <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">UnitOfWork</a> (UOW), is the common pattern that is used for this scenario, by passing around a context object that knows how to commit/save after a set of activities. For this support we have added the below set of interfaces.(Currently in this sample only the data store is supporting the transactions)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IUnitOfWork</span> <span class="p">:</span> <span class="n">IDisposable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IRepository</span><span class="p">&lt;</span><span class="n">Blog</span><span class="p">&gt;</span> <span class="n">BlogRepository</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IArticleRepository</span> <span class="n">ArticleRepository</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">SaveChangesAsync</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">UnitOfWork</span> <span class="p">:</span> <span class="n">IUnitOfWork</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">IDataStoreContext</span> <span class="n">dataStoreContext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IUnityContainer</span> <span class="n">container</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IRepository</span><span class="p">&lt;</span><span class="n">Blog</span><span class="p">&gt;</span> <span class="n">BlogRepository</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// TODO : Use unity containers to generate the UnitOfwork so that to make sure that</span>
</span><span class='line'>                <span class="c1">// datacontext is a single instance in that instance of uow</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="n">GenericRepository</span><span class="p">&lt;</span><span class="n">Blog</span><span class="p">&gt;(</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ICacheStrategy</span><span class="p">&lt;</span><span class="n">Blog</span><span class="p">&gt;&gt;(),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="n">SqlDataStoreStrategy</span><span class="p">&lt;</span><span class="n">Blog</span><span class="p">&gt;(</span><span class="k">this</span><span class="p">.</span><span class="n">dataStoreContext</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IArticleRepository</span> <span class="n">ArticleRepository</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="c1">// TODO : Use unity containers to generate the UnitOfwork so that to make sure that</span>
</span><span class='line'>                <span class="c1">// datacontext is a single instance in that instance of uow</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">ArticleRepository</span><span class="p">(</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ICacheStrategy</span><span class="p">&lt;</span><span class="n">Article</span><span class="p">&gt;&gt;(),</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">ArticleSqlDataStoreStrategy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">dataStoreContext</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">UnitOfWork</span><span class="p">(</span><span class="n">IDataStoreContext</span> <span class="n">dataStoreContext</span><span class="p">,</span> <span class="n">IUnityContainer</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">SaveChangesAsync</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="n">dataStoreContext</span><span class="p">.</span><span class="n">SaveChangesAsync</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The DataStoreContext is what maintains the in memory representation of the changes that we make across the repositories and finally saves it to the data store on <em>SaveChangesAsync</em>. For Sql data store we make use of the DbContext provided by Entity Framework, which already implements the same method from our interface. If you see the above sql strategy code, this is the data context that we use to perform queries and updates.</p>

<figure class='code'><figcaption><span>IDataStoreContext</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IDataStoreContext</span> <span class="p">:</span> <span class="n">IDisposable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">SaveChangesAsync</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SqlDataStoreContext</span> <span class="p">:</span> <span class="n">DbContext</span><span class="p">,</span> <span class="n">IDataStoreContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Blog</span><span class="p">&gt;</span> <span class="n">Blogs</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Article</span><span class="p">&gt;</span> <span class="n">Articles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a client to perform operation, it can get the repositories through the unit of work as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">article</span> <span class="p">=</span> <span class="n">unitOfWork</span><span class="p">.</span><span class="n">ArticleRepository</span><span class="p">.</span><span class="n">GetById</span><span class="p">(</span><span class="s">&quot;1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">article</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;New Name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">unitOfWork</span><span class="p">.</span><span class="n">SaveChangesAsync</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>IQueryable on your Repositories</h3>

<p>In the repository methods we return an IEnumerable and not an IQueryable, as we want all my querying logics to be contained inside the strategies that implement the real querying. We definitely do not want the querying logic to be there all across the client code accessing the repository, as that would make maintaining the code difficult. Also each of the strategies would have their own ways of querying and should be well abstracted by them. Otherwise all we end up having would be a <a href="http://en.wikipedia.org/wiki/Leaky_abstraction">leaky abstraction</a></p>

<p>By separating out the cache and data store strategies we have made it possible to change the providers for either of them without affecting any of the repository code. We could switch out the sql data store strategy and have a oracle strategy or a mongodb strategy and have that implement the specifics on how to retrieve the the data that we want. We would also have a specific IDataStoreContext implementation for the corresponding new data store.</p>

<p>You can find the code structure for this <a href="https://github.com/rahulpnath/Blog/tree/master/RepositoryPattern">here</a>. It only provides the interfaces and some mock implementations and does not connect to any data stores or cache providers. Hope this helps in architecting the repository pattern when dealing with multiple strategies to save. What are your thoughts on this?
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not All That Returns JSON is RESTful: Understanding HATEOAS]]></title>
    <link href="http://rahulpnath.com/blog/not-all-that-returns-json-is-restful-understanding-hateoas/"/>
    <updated>2014-11-10T01:38:56+05:30</updated>
    <id>http://rahulpnath.com/blog/not-all-that-returns-json-is-restful-understanding-hateoas</id>
    <content type="html"><![CDATA[<p>Though <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> has been around for a very long time, it never came into highlight as RPC/SOAP was what used commonly when building services, abstracting away all the goodness of the underlying protocol(mostly HTTP) and building messages over it, to perform client-server communication. HTTP, an Application layer protocol was used just as a transport protocol, tunneling these messages through them.</p>

<p>It&rsquo;s not long back that we saw a new technology stack come up in ASP.Net, which redefined the way we were building services - <a href="http://www.rahulpnath.com/blog/wcf-to-asp-net-web-api/">WCF to Web API</a>. This was a major shift from the RPC/SOAP style of programming to the REST architectural pattern. The main things that changed as for a developer was to start returning JSON/XML instead of SOAP messages, use HTTP verbs for performing actions instead of the explicitly defined contracts and use a http client to invoke the services instead of a proxy. Thats where we (at least I) were or rather are at. But was this really what we wanted to achieve?</p>

<p><a href="http://geek-and-poke.com/geekandpoke/2013/6/14/insulting-made-easy" class="center" title="It's not RESTful, Image by geekandpoke"><img src="http://rahulpnath.com/images/not_restful.png" class="center" alt="It's not RESTful, Image by geekandpoke"></a></p>

<p>REST was originally introduced by <a href="http://roy.gbiv.com/">Roy Fielding</a> in his <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">dissertation</a>  and this is how he had seen it.</p>

<blockquote><p>Representational State Transfer (REST) architectural style for distributed hypermedia systems, describing the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, while contrasting them to the constraints of other architectural styles. REST is a hybrid style derived from several of the network-based architectural styles combined with additional constraints that define a uniform connector interface.</p></blockquote>

<p>We, as developers, have totally missed <strong>hypermedia</strong> and it is rarely spoken about along with REST. In fact Roy himself has called this out loud - <a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">REST APIs must be hypertext-driven</a>.</p>

<p><strong>Hypermedia and Why it is important</strong></p>

<p>The World Wide Web is the best example for hypermedia and why it is really important, because we just have a single browser that can understand all web pages of the world and not browsers for each and every web site. We send across Hyper Text(HTML) which the browser understands and uses to render the page. In this case the servers that generate these hypermedia messages(HTML) are &lsquo;smart&rsquo; enough to understand the state of the page and respond back with only the allowed actions/links back. This is the same thing that we would want our API&rsquo;s also to do - drive the application&rsquo;s state, than having the client drive the state of the application.</p>

<p>If we look at todays api&rsquo;s, we see that they return plain data and we have smart clients that are aware of the links to each resource and when and how to reach out to them. The client controls the state of the application and how to navigate through the application. An application developer would read the api documentation on what the links are for each of the actions and then hard code these details/urls into the client application. The client knows too much about the api and its structure which makes it very tightly coupled with the service, breaking it for even the slightest of change in the server.</p>

<p><strong>Hypermedia As The Engine Of Application State(HATEOAS)</strong></p>

<p>Now we really know that we do not want smart clients, at least not clients this smart as this makes it very difficult for the api to evolve. The only thing that we can now make smarter is the messages that we send across - make them hypermedia. It should just not be data but also have related links, actions and maybe also the details on how the links can be reached. The links should reflect the applications state and drive what actions are allowed for that particular state.</p>

<p>Let us take an example on how a message would be in a non-hypermedia api and a RESTful api.</p>

<figure class='code'><figcaption><span>Smart Client Messages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;account&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Rest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;accountnumber&quot;</span><span class="p">:</span> <span class="s2">&quot;12345&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;balance&quot;</span><span class="p">:</span> <span class="s2">&quot;6000.00&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>HATEOAS Messages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;account&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Rest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;accountnumber&quot;</span><span class="p">:</span> <span class="s2">&quot;9963&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;balance&quot;</span><span class="p">:</span> <span class="s2">&quot;6000.00&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;link&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;rel&quot;</span><span class="p">:</span> <span class="s2">&quot;self&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;href&quot;</span><span class="p">:</span> <span class="s2">&quot;/account/9963&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;get&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;rel&quot;</span><span class="p">:</span> <span class="s2">&quot;deposit&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;href&quot;</span><span class="p">:</span> <span class="s2">&quot;/account/9963/deposit&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;post&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;rel&quot;</span><span class="p">:</span> <span class="s2">&quot;withdraw&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;href&quot;</span><span class="p">:</span> <span class="s2">&quot;/account/9963/withdraw&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;post&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we see the first one returns just pure JSON data and leaves everything to the client to decide on whether deposit/withdraw etc are possible  and if at all they are how to reach them. In this case our &lsquo;smart client&rsquo;, would check the account balance and then decide on to allow deposit/withdraw only if there are sufficient funds. In the second case for the hypermedia messages, the server returns the allowed actions for the current account and also returns on how to perform these actions. So the server decides the possible actions for a given state of the account and the client would just render these out. The client all it would be interested is in the relations, indicated by the &lsquo;rel&rsquo; attribute to decide on to show the required UI. The <a href="https://developer.paypal.com/docs/integration/direct/paypal-rest-payment-hateoas-links/">Paypal api</a> is Hypermedia driven and is a good reference to understand more of this in detail.</p>

<p><strong>HATEOAS and Documentation</strong></p>

<p>One of the most popular discussion that you see around is that, &lsquo;Oh we still need api documentation and developers still need them to develop for your api. So what are we really achieving&rsquo;</p>

<blockquote><p><strong>HATEOAS is not about avoiding documentation.</strong></p></blockquote>

<p>It just is not. We still need a documentation to detail out what the rel&rsquo;s are and how to reach them and what they mean. But you don&rsquo;t need to put out explicit url&rsquo;s saying that this is where you need to reach for this particular action. There are a lot of relations that are already <a href="http://www.iana.org/assignments/link-relations/link-relations.xhtml">standardized</a>, and for anything specific to the api can be documented. Also the state of the application is driven by the server and not by consuming client.</p>

<p><strong>Client and Server updates</strong></p>

<p>Following the HATEOAS approach might end us with having even smarter clients which could automatically upgrade to a newer server version without any code change. Let&rsquo;s take an example of a social media site like Facebook which has two options today for any comment or post - Share and Like. If these were shown interpreting the links as provided from the server, we could easily add in a new option Dislike, in the server response and it would have automatically show up in the UI without any code change. This might not be true always but can definitely be an option.</p>

<blockquote><p>Smart messages gives us Smarter clients</p></blockquote>

<p><strong>Hypermedia Types</strong></p>

<p>Links are an integral part of hypermedia, but JSON/XML formats that are popular today, does not inherently support links.There are a couple of new media types that has emerged that provides support for hypermedia formats: HAL, JSON-LD, Collection+JSON, SIREN. A good discussion comparing these available options is available <a href="http://sookocheff.com/posts/2014-03-11-on-choosing-a-hypermedia-format/">here</a>.</p>

<p><a href="http://martinfowler.com/articles/richardsonMaturityModel.html">Richardson Maturity Model</a> is a good model while thinking about REST and can help us while building services.</p>

<p>Level 0 - The Swamp of POX <br/>
Level 1 - Resources <br/>
Level 2 - HTTP Verbs<br/>
Level 3 - Hypermedia Controls</p>

<p>Though Level 3 is no litmus test for being RESTful, you are at least in clear sight of where we all want to be. It provides a step by step way in designing and achieving REST. Are you already building Hypermedia driven api&rsquo;s? If not, hope this at least makes you to give a thought the next time you develop an api.</p>

<p>Additional Resources:</p>

<ul>
<li><p><a href="http://www.amazon.com/gp/product/0596805829/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596805829&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=DWVB6DWLT4IA2H3E">Rest In Practice: Hypermedia and Systems Architecture </a></p></li>
<li><p><a href="http://www.amazon.com/gp/product/1449358063/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1449358063&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=QVBLKISYQTJ7HY2R">RESTful Web APIs</a></p></li>
<li><p><a href="http://www.amazon.com/gp/product/1449337716/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1449337716&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=TD7FYXTI77G4P2GF">Designing Evolvable Web APIs with ASP.NET</a></p></li>
<li><p><a href="https://delicious.com/rahulpnath/hypermedia">Blogs and other links</a>
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Unity Container: Comparing Code and Xml Configuration Side by Side]]></title>
    <link href="http://rahulpnath.com/blog/configuring-unity-container-comparing-code-and-xml-configuration-side-by-side/"/>
    <updated>2014-10-19T11:42:54+05:30</updated>
    <id>http://rahulpnath.com/blog/configuring-unity-container-comparing-code-and-xml-configuration-side-by-side</id>
    <content type="html"><![CDATA[<p>Setting up dependency containers from code is very easy, but not at all the same when done using a configuration file. The project that I am currently working on uses xml configuration for <a href="https://unity.codeplex.com/">Unity container</a> and I did struggle mapping certain dependencies, so thought of putting this up.</p>

<p>To start with I have created a console application and added the Unity <a href="https://www.nuget.org/packages/Unity/">nuget package</a>. You could directly add the configurations in the app.config file, but I prefer to keep the configurations separately in a different file, <em>unity.config</em>, and have it referred in the app.config(or web.config). Also make sure that the unity.config file gets copied to the build directory(setting build properties as content and copy always should help) so that it is available to the application.</p>

<figure class='code'><figcaption><span>app.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configSections&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section</span> <span class="na">name=</span><span class="s">&quot;unity&quot;</span> <span class="na">type=</span><span class="s">&quot;Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/configSections&gt;</span>
</span><span class='line'><span class="nt">&lt;unity</span> <span class="na">configSource=</span><span class="s">&quot;unity.config&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the unity.config we need to specify the assemblies and namespaces that we will be injecting the dependencies from. Inside the container is where we register the dependencies.</p>

<figure class='code'><figcaption><span>unity.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;unity</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/practices/2010/unity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Define Assemblies--&gt;</span>
</span><span class='line'><span class="nt">&lt;assembly</span> <span class="na">name=</span><span class="s">&quot;ConfiguringUnity&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- End Assemblies--&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Define Namespaces--&gt;</span>
</span><span class='line'><span class="nt">&lt;namespace</span> <span class="na">name=</span><span class="s">&quot;ConfiguringUnity&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- End Namespaces--&gt;</span>
</span><span class='line'><span class="nt">&lt;container&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/container&gt;</span>
</span><span class='line'><span class="nt">&lt;/unity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the basic infrastructure set up to start using the container, lets take a look at some common dependency injection scenarios that we come across. The <a href="http://msdn.microsoft.com/en-us/library/ff660914(v=pandp.20).aspx">Unity Configuration Schema</a> is worth  taking a look, to understand about the configuration elements and their attributes.</p>

<p><strong>Simple Class and Interface</strong></p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">NormalClass</span><span class="p">&gt;();</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">INormalInterface</span><span class="p">,</span> <span class="n">NormalInterfaceImplementation</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>unity.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;NormalClass&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;INormalInterface&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;NormalInterfaceImplementation&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Since we have only given the interface name while registering the type, specifying the assembly and namespace names of the type is important.Unity will look through these elements to find the type specified, whenever the specified type is not a full type name. This mechanism is also referred to as <a href="http://msdn.microsoft.com/en-us/library/ff660933(v=pandp.20).aspx#_Automatic_Type_Lookup">Automatic Type Lookup</a></p>

<p><strong>Generic Interface</strong></p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IGenericInterface</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">GenericInterfaceImplementation</span><span class="p">&lt;&gt;));</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IGenericInterfaceWithTwoParameter</span><span class="p">&lt;,&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">GenericInterfaceWithTwoParametersImplementation</span><span class="p">&lt;,&gt;));</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>unity.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;IGenericInterface`1&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;GenericInterfaceImplementation`1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;IGenericInterfaceWithTwoParameter`2&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;GenericInterfaceWithTwoParametersImplementation`2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>// or
</span><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;IGenericInterface[]&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;GenericInterfaceImplementation[]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;IGenericInterfaceWithTwoParameter[,]&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;GenericInterfaceWithTwoParametersImplementation[,]&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown above registering <a href="http://msdn.microsoft.com/en-us/library/ff660933(v=pandp.20).aspx#_Generic_Types">generic types</a> in config can either use the CLR notation of `N, where N is the number of generic parameters or use square brackets with commas to indicate the number of parameters. Examples using one and two parameters are shown above. <br/>
For a generic interface, the parameters can have typed parameter associated with it, something like <em>IComplexGenericInterface&lt;ComplexGenericClass<GenericClass>></em>. In these cases we cannot directly register this using either of the notation above, as the configuration does not allow recursive formats of those notation. We can use <a href="http://msdn.microsoft.com/en-us/library/ff660933(v=pandp.20).aspx#_Type_Aliases">Aliases</a> for specifying the parameter type names and then refer the alias for registering the interface.</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">IComplexGenericInterface</span><span class="p">&lt;</span><span class="n">ComplexGenericClass</span><span class="p">&lt;</span><span class="n">GenericClass</span><span class="p">&gt;&gt;,</span> <span class="n">ComplexGenericInterfaceImplementation</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>unity.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;alias</span> <span class="na">alias=</span><span class="s">&quot;ComplexGenericInterfaceType&quot;</span>
</span><span class='line'>         <span class="na">type=</span><span class="s">&quot;ConfiguringUnity.ComplexGenericClass`1[[ConfiguringUnity.GenericClass, ConfiguringUnity, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], ConfiguringUnity, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;container&gt;</span>
</span><span class='line'>  <span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;IComplexGenericInterface[ComplexGenericInterfaceType]&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;ComplexGenericInterfaceImplementation&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/container&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown above alias is nothing but a shorthand name that will be replaced with the full type name when the configuration is loaded. This is only available at configuration time and not at runtime.</p>

<p><strong>Conflicting Interfaces</strong> <br/>
When you have conflicting interface names , probably from two different assemblies then you can create aliases or use full names to register the types. For the example I have created a class library project, ExternalLibrary and added it as a reference to the Console Application.</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">IConflictingInterface</span><span class="p">,</span> <span class="n">ConflictingInterfaceImplementation</span><span class="p">&gt;();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">ExternalLibrary</span><span class="p">.</span><span class="n">IConflictingInterface</span><span class="p">,</span> <span class="n">ExternalLibrary</span><span class="p">.</span><span class="n">ConflictingInterfaceImplementation</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>unity.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;IConflictingInterface&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;ConflictingInterfaceImplementation&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;ExternalLibrary.IConflictingInterface, ExternalLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;ExternalLibrary.ConflictingInterfaceImplementation, ExternalLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong><em>Code and Config</em></strong> instead of <strong><em>Code Vs Config</em></strong></h4>

<p>Now that we have seen some of the common usage scenarios in registering types with containers, one main thought would be &lsquo;<a href="http://stackoverflow.com/questions/5418392/should-unity-be-configured-in-code-or-configuration-file">Should Unity be configured in code or configuration file?</a>&rsquo;. Xml configurations are anytime a pain for the developer as it more prone to errors and configuration complexities. But then there are scenarios where dependencies would have to be plugged in at runtime, for which xml configuration is really helpful. Unity does allow to specify both together, making the best use of both worlds. You can choose to have only your dependencies that are Late Bound in the config and have all others in the code. You could also override an already registered dependency.</p>

<figure class='code'><figcaption><span>C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">unityContainer</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">IOverridableDependency</span><span class="p">,</span> <span class="n">OverridableCodeImplementation</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>unity.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;register</span> <span class="na">type=</span><span class="s">&quot;IOverridableDependency&quot;</span> <span class="na">mapTo=</span><span class="s">&quot;OverridableConfigImplementation&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown above we have a different mapping in code and config for the same interface and I am loading the configuration into the container after all the  code registrations are done. In this case the dependency that is registered last will take precedence. So you could use this feature to override any dependencies specified in the code.</p>

<p>There surely are a lot more cases that you would have come across while registering dependencies, do drop in a comment on the missing ones. The sample for this can be found <a href="https://github.com/rahulpnath/Blog/tree/master/ConfiguringUnity">here</a>
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Web API and External Login - Authenticating with Social Networks]]></title>
    <link href="http://rahulpnath.com/blog/asp-dot-net-web-api-and-external-login-authenticating-with-social-networks/"/>
    <updated>2014-09-10T19:29:35+05:30</updated>
    <id>http://rahulpnath.com/blog/asp-dot-net-web-api-and-external-login-authenticating-with-social-networks</id>
    <content type="html"><![CDATA[<p>The ASP.NET Web API project created from the default template in Visual Studio 2013 comes with an option to choose the Authentication method. The &lsquo;Individual User Accounts&rsquo; option of authorization will allow users of your API to authenticate using exisitng their exisitng social networks(Facebook, Twitter, Google or Microsoft). This is a very useful feature and also speeds up the signing process, as there is little or no input required from the user and also one less password less to remember. All these social logins uses <a href="http://oauth.net/">OAuth</a> to provide authorized access to their services, and there are exisitng Owin adapters for these social networks. You could very well write a custom owin adapter to plug new authorization providers.</p>

<blockquote><p>In this post we will see how we can enable Facebook login for your API when <strong><em>the client and api are hosted on seperate domains</em></strong>.</p></blockquote>

<p>We will start off with the default template for the Web API, created by Visual Studio 2013 for Web API(File->New Project->ASP.NET Web Application->Web API with Authentication set to Individual User Accounts)</p>

<p><img src="http://rahulpnath.com/images/web_api_authentication_vs_template.png" alt="Visual Studio 2013 Web Api Template" /></p>

<p>The Account Controller has all the methods that is required for a client to authenticate with the api and get the token to access protected resources. We will go through the calls that the client app would need to perform a successful authentication. I have updated the owin nuget packages to use the latest Owin 3.0.0 packages.</p>

<p><strong>1. Getting the supported Authentication providers</strong></p>

<p>The client in it login screen would be showing the allowed authorization providers along with the normal username/password login option. The <em>ExternalLogins</em> endpoint returns all the supported external authentication providers. The supported list of providers can be added in <em>Startup.Auth.cs</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">UseFacebookAuthentication</span><span class="p">(</span><span class="n">appId</span><span class="p">:</span> <span class="s">&quot;APPID&quot;</span><span class="p">,</span> <span class="n">appSecret</span><span class="p">:</span> <span class="s">&quot;APPSECRET&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
The application id and secret can be obtained by registering for an application with the corresponding provider. For facebook you can do that <a href="https://developers.facebook.com/">here</a>. You would also need to configure the web api endpoint as a website platform when obtaining the api keys. Now on querying the endoint the client will get back the endpoint that it needs to hit when an authentication with Facebook is required. A redirect url is to be passsed along with the request, to which the api will redirect to after succesfull authentication with the token. By default email is not received from facebook, but you can override this behaviour by providing some extra options when registering the provider as shown below. The OnAuthenticated method on the FacebookProvider gets called once the user is authenticated with facebook. At this point you can get the Email details explicitly and add it to the claims.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">facebookProvider</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FacebookAuthenticationProvider</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">OnAuthenticated</span> <span class="p">=</span> <span class="p">(</span><span class="n">context</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Add the email id to the claim</span>
</span><span class='line'>            <span class="n">context</span><span class="p">.</span><span class="n">Identity</span><span class="p">.</span><span class="n">AddClaim</span><span class="p">(</span><span class="k">new</span> <span class="n">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">context</span><span class="p">.</span><span class="n">Email</span><span class="p">));</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">FromResult</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">var</span> <span class="n">options</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FacebookAuthenticationOptions</span><span class="p">()</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">AppId</span> <span class="p">=</span> <span class="s">&quot;AppId&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">AppSecret</span> <span class="p">=</span> <span class="s">&quot;AppSecret&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">Provider</span> <span class="p">=</span> <span class="n">facebookProvider</span>
</span><span class='line'>              <span class="p">};</span>
</span><span class='line'><span class="n">options</span><span class="p">.</span><span class="n">Scope</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;email&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">app</span><span class="p">.</span><span class="n">UseFacebookAuthentication</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>You can also get the facebook token if required from the context and which can be used in the database to update information to facebook on behalf of the user.</p>

<p><strong>2. Making a request to an Authentication provider</strong></p>

<p>Now that we have got the list of supported list of providers, we can make the request to the required provider from the client. This is simply done by navigating to the url obtained for the corresponding provider in the previous request, i.e to the <em>ExternalLogin</em> endpoint. If the user is already authenticated (detected via cookie), then the user is redirected to the redirect url provided in above step. If the user is not authenticated then the login page of the corresponding provider will be shown and after a successfull login the redirection will happen. The token that is received here is the custom token that gets generated by the web-api and should not be mistaken for the authorization server&rsquo;s(facebook) token itself.</p>

<p>The owin middleware abstracts away the interaction with the authorization server, Facebook in our case here. On successfull login in facebook, it redirects to &lsquo;<em><a href="https://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin.Security.Facebook/FacebookAuthenticationOptions.cs">/signin-facebook</a></em> along with the facebook token. We can get the username or email from the claims provided by the authentication server that can then be passed back to the client for registering the user in the next step. The <em>ExternalLoginData</em> class get the data from the claims. I have modified this to use the new Email property that we have added. To return this email address to the client, we need to override the method as shown below in ApplicationOAuthProvider</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="n">Task</span> <span class="nf">AuthorizationEndpointResponse</span><span class="p">(</span><span class="n">OAuthAuthorizationEndpointResponseContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//  Add the claims to the return url</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">claim</span> <span class="k">in</span> <span class="n">context</span><span class="p">.</span><span class="n">Identity</span><span class="p">.</span><span class="n">Claims</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">claim</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="n">ClaimsIdentity</span><span class="p">.</span><span class="n">DefaultNameClaimType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">context</span><span class="p">.</span><span class="n">AdditionalResponseParameters</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;username&quot;</span><span class="p">,</span> <span class="n">claim</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">claim</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">context</span><span class="p">.</span><span class="n">AdditionalResponseParameters</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;email&quot;</span><span class="p">,</span> <span class="n">claim</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="n">AuthorizationEndpointResponse</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above method adds in the additional response parameters that gets embedded in the redirect url to the client.</p>

<p><strong>3. Register user</strong></p>

<p>Now that the user is successfully authenticated with  the authorization provider and we have a token, we need to register the user into our database, as we dont want to go to facebook to verify the identity for each and every request. The client can call into <em>RegisterExternal</em> method to register the user into our system. It expects us to pass a email/username for the external authenticated user, which we would have already got from the redirect url parameters. Now the external authenticated user is a valid user in our system and is allowed to make authenticated calls to the api.For the call to RegisterExternal we need to add the token that we got as part of the redirecturl as part of the Authorization header.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">registerUser</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">apiBaseUrl</span> <span class="o">+</span> <span class="s1">&#39;api/Account/RegisterExternal&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;Email&#39;</span><span class="o">:</span> <span class="nx">email</span><span class="p">,</span> <span class="s1">&#39;Name&#39;</span> <span class="o">:</span> <span class="nx">email</span><span class="p">},</span>
</span><span class='line'>        <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">xhrFields</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">withCredentials</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">beforeSend</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Authorization&#39;</span><span class="p">,</span><span class="s1">&#39;Bearer &#39;</span> <span class="o">+</span> <span class="nx">token</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Navigate to the user page</span>
</span><span class='line'>            <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">&quot;#user&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">failure</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Registration failed&#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>On successfull registeration we can get the User details by calling to the UserInfo endpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">userInfoUrl</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">apiBaseUrl</span> <span class="o">+</span> <span class="s2">&quot;api/Account/UserInfo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="nx">userInfoUrl</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">beforeSend</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Authorization&#39;</span><span class="p">,</span> <span class="s1">&#39;Bearer &#39;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">token</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can mofify the models to handle more information as required by our api. We could save the token in a local storage and retrieve it whenever a user visits the site back again. The same is the approach for integrating with the other social networks that we have. The sample using the facebook provider is availabe <a href="https://github.com/rahulpnath/Blog/tree/master/WebApiAuthentication">here</a>.
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waking up Early is All About Waking up to an Alarm]]></title>
    <link href="http://rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm/"/>
    <updated>2014-08-31T18:47:05+05:30</updated>
    <id>http://rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm</id>
    <content type="html"><![CDATA[<p>I have always been the &lsquo;<em>early to bed</em>&rsquo; type of person and my day mostly ends by ten thirty in the evening. But the &lsquo;<em>waking up early</em>&rsquo; part was not as &lsquo;strict&rsquo; as going to sleep part. I have always struggled to wake up at the sound of the alarm, which I always set without fail. It was either me hitting the dismiss button or it going completely unheard, only to be reminded about, at breakfast by my wife .</p>

<p>I have noticed that it&rsquo;s not that waking up in the morning that is a problem. Waking up from bed at any time of the day is a problem and we all tend to lie down for a few more minutes. Further reading about these on the Internet I came up with some strategies to help me wake up to an alarm. I have been following this for couple of months and its been working out for me, most of the time.</p>

<p><a href="http://flic.kr/p/6Zfgdp" class="center" title="Image By Guilherme Tavares, used under Creative Commons from http://flic.kr/p/6Zfgdp"><img src="http://rahulpnath.com/images/alarm.png" class="center" alt="Image By Guilherme Tavares, used under Creative Commons from http://flic.kr/p/6Zfgdp"></a></p>

<ol>
<li><p><strong>Plan:</strong> Plan your activities to be done after waking up, before going to sleep the day before. &lsquo;<em>Not having anything to do</em>&rsquo;, is one of the main reasons that keeps us from waking up. So plan ahead for it and find activities like reading, writing , working out, anything that you like. But have a plan!</p></li>
<li><p><strong>Jump out:</strong> Don&rsquo;t let your brain rationalize on your plan at the sound of the alarm. The decision to wake up has already been made the night before and you have a plan at hand, so just jump out of bed. The more you think, the more likely it is to doze off.</p></li>
<li><p><strong>Multiple alarms:</strong> At the early stages of trying this out, you can have multiple alarms set at very close intervals, as close as one or two minutes. Have a couple of them at one, two, five, ten minutes interval.(If somebody else shares the room with you make sure they don&rsquo;t mind this, for a couple of days till you find the rhythm.)</p></li>
<li><p><strong>Alarm tone:</strong> Change the alarm tone frequently so that your brain does not get used to it and ignore it all together. You could also try having the same tone as that of your phone ringer, which would make you think you have a call and wake up immediately.</p></li>
<li><p><strong>Early dinner:</strong> Have your dinner at least two to three hours before you sleep. Going to sleep with a full stomach makes you more tired in the morning and increases the chances of you having to hit the snooze button.</p></li>
<li><p><strong>Daily alarms:</strong> Set your alarm daily and delete of all that recurrent alarms set for the entire week. This would ensure that you plan for your day when you set the alarm. No plan, No alarm!</p></li>
<li><p><strong>Sleep Cycle:</strong> Over a period of time, listen to your body and understand how much sleep you require and adjust your timings accordingly. Too little or too much of sleep is bad.</p></li>
<li><p><strong>Smart Alarms:</strong> There are mobile applications today that come up with puzzle based alarms, you would have to solve the puzzle to turn of the alarm. You could try one of those if needed(I had not used any though).</p></li>
</ol>


<p>These tips have really helped me to wake up to an alarm and be an early riser too. The feeling of starting the day as you wished for is great and stays throughout the day, helping you to do more and <a href="http://www.rahulpnath.com/blog/staying-organized-finding-a-system-to-manage-it-all/">staying organized</a>. Hope you find this useful and do let know if any other tricks has helped you to wake up to an alarm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static Generator is All a Blog Needs - Moving to Octopress]]></title>
    <link href="http://rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress/"/>
    <updated>2014-08-27T21:34:12+05:30</updated>
    <id>http://rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress</id>
    <content type="html"><![CDATA[<p>Wordpress is what that has been powering my blog for sometime and it definitely is a blogging engine to <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">get started with</a> ease. But with time, I have been noticing that the load time is very high and there are a lot of plugins in the processing pipeline, even to do very small things. This definitely is not that great for a simple blog, where users(including me) expect fast page load times.</p>

<blockquote><p>For blogging, Wordpress is just extra baggage that you keep along that never gets used. Except for discussions, a blog is just static content and that is all it requires.</p></blockquote>

<p>There are a lot of <a href="https://www.staticgen.com/">static site generators</a> out there today and any of them should be just fine. I wanted to choose a platform that was not on Microsoft stack and Octorpess was just perfect, it being on Ruby.<a href="http://octopress.org/">Octopress</a>, which is <a href="http://jekyllrb.com/">Jekyll</a> based, provides almost all the features that a blog needs out of the box or via plugins. The <a href="http://octopress.org/docs/setup/">documentation</a> for Octopress is very good and takes you through setting it up with ease.</p>

<p><strong>Migrating from Wordpress</strong></p>

<p>The <a href="https://github.com/thomasf/exitwp">exitwp</a> tool is what I used to get all my posts from Wordpress into Markdown format, so that it can be imported into Octopress. The steps are direct and is detailed out in the readme. Code formatting was an issue after the migration. I had been mainly using <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a> for code formatting in Wordpress. Formatting this took a bit of time, as I had to go through each post and do the necessary modifications to use the <a href="http://octopress.org/docs/plugins/backtick-codeblock/">Backtick Code Blocks</a>.</p>

<p><strong>Mapping the images</strong> from the wp_content folder to a new folder was one another task. I added a <a href="http://jekyllrb.com/docs/variables/">new variable in the config</a>, to track the images folder so that I can change this to something else too later(like a CDN) and used that to refer images. In cases where the images needs to be aligned to a specific side, I used the <a href="http://stackoverflow.com/questions/255170/markdown-and-image-alignment">image tag directly</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![Microsoft Community Contributor Award Certificate for Rahul P Nath](/images/mcca_rahulpnath.png)
</span><span class='line'>
</span><span class='line'>&lt;img class="left" src="http://rahulpnath.com/images/Outlook_folders_productivity.png" alt="Outlook_folders_productivity" /&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Also updated the <em>_config.yml</em> with the required details, permalink structure, google analytics, asides that are required and linked the social accounts. Linking social accounts is important for <a href="https://plus.google.com/authorship">Content Authorship</a>, and everybody should be doing that, irrespective of the blogging engine. Disqus commenting system is supported in Octopress, You can use <a href="https://wordpress.org/plugins/disqus-comment-system/">Disqus Wordpress plugin</a> to export the comments from the exiting blog to disqus.I have also added in some custom plugins that are listed out <a href="https://github.com/rahulpnath/rahulpnath.com/blob/master/MyPlugins.markdown">here</a>. Also setup a <a href="https://www.google.co.in/cse/">search</a> for your site that would help readers find what they want.</p>

<p><strong>Deploy</strong></p>

<p>The blog is deployed to github and pushed to azure from there using <a href="http://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/">coninuous integration</a>. This blogpost <a href="http://www.ewal.net/2012/08/28/octopress-plus-windows-azure-web-sites/">here</a> details out on how to set up rake_deploy to push the blog to azure. Basically, we have a folder named <em>_azure</em>, that is gitignored in the source branch of the blog and included in the one that gets deployed. This would contain only the generated static files required for the blog that gets generated with <em>rake generate</em></p>

<p><strong>Tuning the blog for improving load time</strong></p>

<p>Once everything is setup it is really good to run some tools to check how your site is performing. Here are a couple that I found really useful.</p>

<ul>
<li><a href="https://developer.yahoo.com/yslow/">YSlow</a></li>
<li><a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a></li>
</ul>


<p>Running one of these, would really set you back for sometime and provide you with some performance improvement suggestions.</p>

<ul>
<li>Caching: - To enable caching, I added the required configuration entries in the <a href="https://github.com/rahulpnath/rahulpnath.com/blob/blog/web.config">web.config</a>(as I am hosting in azure). Since the site is all static content you can safely set caching to all the items.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;staticContent&gt;
</span><span class='line'>  &lt;mimeMap fileExtension="woff" mimeType="application/font-woff" /&gt;
</span><span class='line'>    &lt;clientCache httpExpires="Sun, 29 Mar 2020 00:00:00 GMT" cacheControlMode="UseExpires" /&gt;
</span><span class='line'>&lt;/staticContent&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Images: <a href="https://developers.google.com/speed/docs/insights/OptimizeImages">Optimizing images</a> includes multiple steps of getting the image sizes correct as required, removing out any unnecessary metadata to reduce size, reducing the pixels. Couple of tools like <a href="http://www.imagemagick.org/">ImageMagick</a>, <a href="http://pnggauntlet.com/">PngGauntlet</a> would definitely help in reducing and optimizing the images. This is a must do exercise and will definitely improve the load time.</p></li>
<li><p>Favicon: With lots of devices, browsers and clients out there, a single favicon no more serves the purpose. <a href="http://realfavicongenerator.net/">Real Favicon Generator</a> is there to the resue, where you can upload a single image and it will give you all the required formats and sizes.</p></li>
</ul>


<p><strong>Finding Broken Links:</strong>
This is a good time to find out any broken links in your blog that has been lying around since some time.Make sure that you run <a href="http://home.snafu.de/tilman/xenulink.html">Xenu&rsquo;s Link Sleuth</a>, to find and fix them.</p>

<p><strong>Writing New Posts:</strong>
I have been a great fan of <a href="http://www.microsoft.com/en-in/download/details.aspx?id=8621http://www.microsoft.com/en-in/download/details.aspx?id=8621">Windows Live Writer</a> for blogging on Wordpress. But now that I can use Markdown to write posts, I am currently using <a href="http://markdownpad.com/">MarkdownPad</a>. For editing the blog settings, layout, config I use <a href="http://www.sublimetext.com/">Sublime Text</a>, which is a great light weight text editor. I am yet to find a good Markdown plugin for it on Windows, so that I can stick to just using this one super cool editor. (Please do let know if you know of any good plugins for Markdown on Sublime in Windows, that provides live preview feature too). Also since this is integrated into git, it really fits into the workflow and keeping backups is more easy.</p>

<p>The blog is so light weight and loads faster as compared to Wordpress. After all the blog is composed of just static pages and it does not demand a database and lots of other processing that comes with Wordpress. So moving out to a static generated site is something that you should think of if you have not already or have you already moved out. What are your thoughts on this!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yo ko - A Yeoman Generator For KnockoutJS]]></title>
    <link href="http://rahulpnath.com/blog/yo-ko-a-yeoman-generator-for-knockoutjs/"/>
    <updated>2014-08-20T10:20:06+05:30</updated>
    <id>http://rahulpnath.com/blog/yo-ko-a-yeoman-generator-for-knockoutjs</id>
    <content type="html"><![CDATA[<p>Templates/Scaffolding is something that we are all used to nowadays, given that we use an IDE for development. Visual Studio is one popular IDE, that is very popular among people developing on the Microsoft platform. Visual studio comes with a lot of pre-installed templates and scaffolding templates and also has a rich extension support from the <a href="http://visualstudiogallery.msdn.microsoft.com/site/search?f%5B0%5D.Type=RootCategory&amp;f%5B0%5D.Value=templates&amp;f%5B0%5D.Text=Templates">community</a>. While developing on text editors(say like <a href="http://www.sublimetext.com/">Sublime Text</a> which is what I have been using), which are not for any specific technology you might not have all the templating and scaffolding supported right out of the box. You might find plugins for specific editors but not for all the frameworks that are available today.</p>

<p><a href="http://yeoman.io/">Yeoman</a> is the Web&rsquo;s scaffolding tool for Modern Web Apps. Yeoman is a command line tool that runs over <a href="http://nodejs.org/">Node.js</a>. Setting it up is pretty easy with the instructions <a href="http://yeoman.io/learning/index.html">here</a>. To scaffold web applications, which is the same as creating a new project in Visual Studio from a template, we need to install framework specific generators for Yeoman. There are some `<a href="http://yeoman.io/generators/official.html">officially maintained generators</a> and also ones that are <a href="http://yeoman.io/generators/community.html">maintained by the community</a>.</p>

<p>KnockoutJs helps you simplify dynamic JavaScript UIs using the Model-View-ViewModel (MVVM) pattern. If you are new to knockout and come from a XAML backgorund, <a href="http://www.rahulpnath.com/blog/knockoutjs-for-xaml-developers/">KnockoutJS For XAML Developers</a>, would help you.   For KnockoutJs, there is an awesome generator that is written by <a href="https://twitter.com/stevensanderson">Steve Sanderson</a>, the creator of knockout itself and is available <a href="https://www.npmjs.org/package/generator-ko">here</a>. You can install this as below</p>

<blockquote><p>$ npm install generator-ko</p></blockquote>

<p>Once installed you can generate your web app from the command prompt and running the command &lsquo;<strong>yo ko</strong>&rsquo;. This is will ask for the name of the project, whether to use JavaScript or TypeScript and also if you need to include automated tests using Jasmine and Karma. On giving your options your web app would be  scaffolded out.</p>

<p><img class="center" alt="hp_dv4" src="http://rahulpnath.com/images/yo_ko.png" /></p>

<p><strong>Project Structure</strong></p>

<p>The generated web app is a simple Single Page Application(SPA), using the components feature released with <a href="http://blog.stevensanderson.com/2014/08/18/knockout-3-2-0-released/">Knockout 3.2.0</a>, <a href="http://bower.io/">Bower</a> to manage packages and <a href="http://gulpjs.com/">Gulp</a> for the build</p>

<p><img class="left" alt="hp_dv4" src="http://rahulpnath.com/images/yo_ko_structure.png" /> The generator creates the folder structure as shown here and by default has setup the required packages. It uses the following packages:</p>

<ul>
<li><a href="http://getbootstrap.com/">Bootstrap</a>: Responsive UI framework</li>
<li><a href="http://millermedeiros.github.io/crossroads.js/">Crossroads</a>: Routing Library</li>
<li><a href="https://github.com/millermedeiros/hasher/">Hahser</a>: Browsing History Manager</li>
<li><a href="http://jquery.com/">Jquery</a>: Feature rich library</li>
<li><a href="http://millermedeiros.github.io/js-signals/">Js-Signals</a>: Custom/Event Messaging System</li>
<li><a href="http://www.rahulpnath.com/blog/knockoutjs-for-xaml-developers/">Knockout</a>: Simplifies dynamic Javascript UIs with <a href="http://www.rahulpnath.com/blog/tag/mvvm/">MVVM pattern</a></li>
<li><a href="http://requirejs.org/">Requirejs</a>: File and Module Loader</li>
<li><a href="https://github.com/requirejs/text">Requirejs-text</a>: AMD loader plugin for text resources</li>
</ul>


<p>There are three components: <em>about-page</em>, <em>home-page</em> and <em>nav-bar</em>. The main, <em>index.html</em> composes these components into the full blown view. The nav-bar component is referred as is and the home and about page are dynamically loaded based on the nav-bar menu interaction. As shown below the <em>div</em> binds to the component based on the selected route.We look further deep on how the view models bind and these components are tied together.<br style="clear:both;" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;nav-bar</span> <span class="na">params=</span><span class="s">&quot;route: route&quot;</span><span class="nt">&gt;&lt;/nav-bar&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;page&quot;</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;component: { name: route().page, params: route }&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The javascript modules are loaded using Requirejs and the startup class for this is <em>app/starup.js</em> as defined in the data-main attribute in index.html. The knockout components are registered here and view-bindings are setup.Registering a component can be in multiple ways and is well explained in the article <a href="http://www.knockmeout.net/2014/06/knockout-3-2-preview-components.html">here</a>. The <em>currentRoute</em> object is what gets binded to the page and is defined in the app/router.js where the crossroads is setup. To use any other routing library of your choice this is where you would need to update. Whenever a user clicks a menu item and navigates to a new route, the currentRoute is updated, which in turn triggers the corresponding component to get loaded. <a href="https://github.com/millermedeiros/hasher/">Hasher</a> library is used to listen to browser navigation events and update them to crossroads, where the input is parsed and dispatch matched signal for the first Route that matches the input.</p>

<p>The knockout components are defined in the <em>components</em> folder and has both the html and js parts in the same component folder. Whenever the component is loaded the viewmodel defined in the corresponding js file gets bounded to it. This way of developments helps to keep different components of the app well separated as modules and compose them into the view as required.</p>

<p>The build is managed is using <a href="http://gulpjs.com/">Gulp</a>, which can be installed using <a href="https://www.npmjs.org/package/gulp">npm</a>. To build the project, you need to run <em>gulp</em> at the root folder. The build packages all the javascript modules/files into a single file, replaces the required updates in the html file, minifies the html, js and css etc. If not for the build systems, the application would  have to make lots of file/scripts/css requests or would have to have it all in the same file while development which makes working as a team difficult. These build system are highly configurable and can be used to setup output as required. The build tasks are defined in the <em>gulpfile.js</em> and the &lsquo;<em>default</em>&rsquo; task runs when running the gulp command. This is will generate the optimized files in the <em>dist</em> folder, which can be hosted in the server of your choice. I use the <a href="https://www.npmjs.org/package/http-server">zero-configuration command-line http-server</a> available on nodejs.</p>

<p><img src="http://rahulpnath.com/images/yo_ko_app.png" alt="yo ko application " /></p>

<p><strong>Adding New Components</strong></p>

<p>To add new components the knockout generator provides a command which generated the html/css components in the appropriate folder. You would still need to add the registration of the component in the startup file.</p>

<blockquote><p>yo ko:component &lt;component name&gt;</p></blockquote>

<p>This is just a starting point on building Single Page Applications using knockoutjs. Start on from here to build great web applications.</p>

<p><strong>Additional Resources</strong></p>

<ul>
<li><a href="http://blog.stevensanderson.com/2014/06/11/architecting-large-single-page-applications-with-knockout-js/">Architecting large Single Page Applications with Knockout.js</a></li>
<li><a href="http://www.knockmeout.net/2014/06/knockout-3-2-preview-components.html">Knockout.js 3.2 Preview : Components</a></li>
<li><a href="http://www.scottlogic.com/blog/2014/02/28/developing-large-scale-knockoutjs-applications.html">Developing Large Scale Knockoutjs Applications</a></li>
<li><a href="http://www.scottlogic.com/blog/2014/07/30/spa-angular-knockout.html">Single Page Applications - Angular Vs Knockout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KnockoutJS For XAML Developers]]></title>
    <link href="http://rahulpnath.com/blog/knockoutjs-for-xaml-developers/"/>
    <updated>2014-07-08T05:05:39+05:30</updated>
    <id>http://rahulpnath.com/blog/knockoutjs-for-xaml-developers</id>
    <content type="html"><![CDATA[<p>After a very long time since I have actually wanted to move out to web development, recently I have started developing a website as part of my personal project, along with a friend of mine. I have been into desktop/mobile development on Microsoft technologies, using XAML for a very long time. <a href="http://www.rahulpnath.com/blog/tag/mvvm/">Model-View-View Model (MVVM)</a> is a pattern that got popular because of the powerful binding engine in XAML. It is always comforting to see familiar patterns while moving into unexplored technology areas. Same is the reason I chose to explore <a href="http://knockoutjs.com/index.html">KnockoutJS</a>(KO), which simplifies dynamic JavaScript UIs with the MVVM pattern.</p>

<p><img src="http://rahulpnath.com/images/MVVM_Knockoutjs.jpg" alt="MVVM Knockout" /></p>

<p>KnockoutJS acts as the binding engine in XAML and binds your ViewModel(VM) with your View as shown in the figure. As you expect, like in XAML it provides a way to specify declarative-bindings on html using the <a href="http://knockoutjs.com/documentation/binding-syntax.html">data-bind</a> attribute and is also widely <a href="http://knockoutjs.com/documentation/browser-support.html">supported across different browsers</a>. The Model is the data that is populated from the server after your business logics applied,  mostly populated out of Ajax JSON calls from a web service/api. This Model data might mostly need some transformation to map to your View needs which is what exactly the ViewModel does. It transforms the Model data and wraps over it to provide features like 2-way-binding, client side validation, transformation of properties, UI specific state and a lot more</p>

<p>We will see below how some of the major constructs in XAML map over to KnockoutJS.</p>

<blockquote><p><em>I assume that you are a XAML developer and am not including detailed code samples for the XAML part and would be just mentioning them.</em></p></blockquote>

<p><strong>1. INotifyPropertyChanged</strong></p>

<p>Notifying data bounded clients on updates to the underlying bound data is a typical scenario in XAML, where we use <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110).aspx">INotifyPropertyChanged</a> interface. This is also required on web pages and is handled by KO using <em><a href="http://knockoutjs.com/documentation/observables.html">observables</a></em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">personVM</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span><span class="o">:</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s1">&#39;Rahul&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">Age</span><span class="o">:</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Declaring the property as an observable, makes any changes to the property immediately reflect on the bound UI elements, just like it happens on a property of a class that implements INotifyPropertyChanged.</p>

<pre class="codepen" data-height="300" data-type="js" data-href="CuIfK" data-user="rahulpnath"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p><strong>2. DataContext</strong></p>

<p>In XAML we set the DataContext as the ViewModel to start binding the data from the ViewModel on the UI. Similarly in KO we have to call on to <em>applyBindings </em>method, passing on the ViewModel object to bind. You can see this in the above sample. You can also pass in an additional parameter indicating the part of the document that you want to explicitly bind to.</p>

<p><strong>3. DataBinding</strong></p>

<p>Binding the data to the UI in XAML is done declaratively using the <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding(v=vs.110).aspx">Binding</a> syntax. Similarly in KO we use the <a href="http://knockoutjs.com/documentation/binding-syntax.html">data-bind</a> attribute to bind to a registered, built-in or custom, binding handler. As opposed to XAML where we bind to different properties, in KO all bindings are mentioned in the same data-bind attribute, separated by comma. A binding in KO consists of a name value pair separated by a colon, where the name corresponds to the binding handler/the property that we are binding to and the value from the VM that we need it to be bound to. A simple example of binding to the text property of a label would be <em>data-bind=&ldquo;text: Name&rdquo; . </em>You can also use the <a href="http://knockoutjs.com/documentation/with-binding.html">with binding</a> to create binding contexts for descendant elements as in XAML</p>

<p><strong>4. INotifyCollectionChanged</strong></p>

<p>In XAML updates to a collection is usually handled using an <a href="http://msdn.microsoft.com/en-us/library/ms668604(v=vs.110).aspx">ObservableCollection</a>, which notifies the UI whenever an item is added/removed to the collection. Similarly in KO you can use <em>observableArray</em>, which behaves the same as ObservableCollection. It notifies the bound UI elements whenever an element is added/removed from the array. Updates or changes to individual properties on the actual objects in the array is notified to the UI only if the property is an <em>observable, </em>as in XAML. In the below sample, you can try adding an observable item or a non-observable item to the list. As soon as you add an item it reflects in the list. But selecting and editing an item will reflect in the list only if you are editing an observable item. </p>

<pre class="codepen" data-height="300" data-type="js" data-href="FreIv" data-user="rahulpnath"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p><strong>5. Dependent Properties</strong></p>

<p>In XAML when there are properties dependent on others , to notify changes we have to explicitly call RaisePropertyChanged on all the dependent properties. A very common example is below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="kt">string</span> <span class="n">firstName</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">firstName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>   <span class="k">set</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">firstName</span><span class="p">!=</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">firstName</span><span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>            <span class="n">OnPropertyChanged</span><span class="p">(</span><span class="s">&quot;FirstName&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">OnPropertyChanged</span><span class="p">(</span><span class="s">&quot;FullName&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">FirstName</span> <span class="p">+</span><span class="s">&quot; &quot;</span> <span class="p">+</span> <span class="n">LastName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here whenever FirstName is updated to notify UI elements bound to FullName would be updated only if we explicitly call PropertyChanged on FullName property too. In KO this is handled using <a href="http://knockoutjs.com/documentation/computedObservables.html">computed observables</a> and is much more elegant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>6. Commanding</strong></p>

<p>Commanding is how user interactions are bound to actions/functions on ViewModel, which will in turn perform something useful for the user. Like e.g. clicking a button. In KO this is handled using the same <a href="http://knockoutjs.com/documentation/click-binding.html">data-bind</a> attribute using key’s corresponding to event handlers. &#8220;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">data-bind=</span><span class="s">&quot;click: performSomeAction&quot;</span><span class="nt">&gt;</span>Click me<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>7. Value Converters </strong></p>

<p>The <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter(v=vs.110).aspx">IValueConverter</a> interface is to create a converter that can be applied on a Binding to provide custom logic on the data that gets bounded to the UI element. For a similar functionality in KO, there is <a href="http://knockoutjs.com/documentation/computedObservables.html">writable computed observable</a> to convert to and from a specific format of data. The read and write function on the computed observable, corresponds to the Convert and ConvertBack functions on IValueConverter on XAML.</p>

<pre class="codepen" data-height="300" data-type="js" data-href="dJhLm" data-user="rahulpnath"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>There are a lot of useful resources on the web that are freely available to get started with KnockoutJS. Some of them are listed below</p>

<ul>
<li><p><a href="http://knockoutjs.com/documentation/introduction.html">Official Documentation</a></p></li>
<li><p><a href="http://learn.knockoutjs.com/">Learn By Doing</a></p></li>
<li><p><a href="https://www.youtube.com/results?search_query=knockout+javascript">Videos</a></p></li>
<li><p><a href="http://channel9.msdn.com/Search?term=knockout#ch9Search">More Videos</a></p></li>
</ul>


<p>Hope you find this useful to easily understand KnockoutJS, re-applying your XAML knowledge . Do drop in a comment in case you find any other similarities with XAML that I have missed mentioning here and I would be happy to add it in. I am sure I have not covered it completely!
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thanks to Everyone Who Attended Our Talk at Microsoft India, Hyderabad]]></title>
    <link href="http://rahulpnath.com/blog/thanks-to-everyone-who-attended-our-talk-at-microsoft-india-hyderabad/"/>
    <updated>2014-06-18T05:52:37+05:30</updated>
    <id>http://rahulpnath.com/blog/thanks-to-everyone-who-attended-our-talk-at-microsoft-india-hyderabad</id>
    <content type="html"><![CDATA[<p>Thanks to everyone who attended our(<a href="https://twitter.com/techgd">Gautam</a> and mine) talk on Getting Started with Windows Phone and Store application on June 18, Tuesday as part of the Readiness training at Microsoft. Special thanks to <a href="https://twitter.com/vamsitp">Vamsi</a> for assisting us throughout. I hope you all enjoyed the session as much as we did. Here are some follow up information that might help you on the way forward. Since the intended audience are from testing and UX the follow up material is more aligned towards that.</p>

<ul>
<li><p>In case you would like to have a deeper understanding on the MVVM pattern, and how it helps us, the below links should be useful</p>

<ul>
<li><p><a href="http://msdn.microsoft.com/en-us/magazine/dn463790.aspx">Writing a Testable Presentation Layer with MVVM</a></p></li>
<li><p><a href="http://channel9.msdn.com/events/TechDays/Techdays-2014-the-Netherlands/Using-MVVM-So-You-Can-Write-Better-Code-and-Less-Code">Using MVVM So You Can Write Better Code and Less Code</a></p></li>
<li><p><a href="http://channel9.msdn.com/events/MIX/MIX11/OPN03">Deep Dive MVVM</a></p></li>
</ul>
</li>
<li><p>MVVM is also helpful in Unit Testing improving the overall maintainability of the code too.</p>

<ul>
<li><a href="http://channel9.msdn.com/Events/Build/2012/3-017">Unit Testing Windows Store Apps</a></li>
</ul>
</li>
<li><p>Check out how you can create automated tests and also on the Coded UI support</p>

<ul>
<li><p><a href="http://channel9.msdn.com/events/TechEd/NorthAmerica/2014/DEV-B347#fbid=">Automated Testing of XAML-Based Windows Phone Applications</a></p></li>
<li><p><a href="http://channel9.msdn.com/events/Build/2013/3-323">Automated Testing of XAML-Based Windows Store Apps</a></p></li>
<li><p><a href="http://blogs.msdn.com/b/visualstudioalm/archive/2014/04/05/using-coded-ui-to-test-xaml-based-windows-phone-apps.aspx">Using Coded UI to test XAML-based Windows Phone apps</a></p></li>
<li><p><a href="http://blogs.msdn.com/b/cdndevs/archive/2014/05/05/save-time-money-and-your-sanity-coded-ui-testing-for-the-windows-phone-part-1.aspx">Save Time, Money, and Your Sanity: Coded UI Testing for the Windows Phone</a></p></li>
<li><p><a href="http://blogs.msdn.com/b/visualstudioalm/archive/2013/06/26/using-coded-ui-to-test-xaml-based-windows-store-apps.aspx">Using Coded UI to test XAML-based Windows Store apps</a></p></li>
</ul>
</li>
<li><p>Look into the tools and ways to analyze and improve performance</p>

<ul>
<li><p><a href="http://channel9.msdn.com/Events/MIX/MIX11/DVC01">Analyzing and Improving Windows Phone Application Performance</a></p></li>
<li><p><a href="http://channel9.msdn.com/Events/Build/2014/3-578">Diagnosing Issues in Windows Phone XAML Apps Using Visual Studio</a></p></li>
<li><p><a href="http://channel9.msdn.com/Events/Build/2014/4-557">How to Analyze Performance Issues in Your Windows and Windows Phone Apps</a></p></li>
</ul>
</li>
<li><p>See how app crashes information can be tracked from a deployed app and how it can used and inferred upon to fix  issues. This is very important so that you can improve on the app reliability and performance for further updates.</p>

<ul>
<li><a href="http://channel9.msdn.com/Events/Build/2014/3-657">Avoiding Windows Store App Failures</a></li>
</ul>
</li>
<li><p>Learn about the security features and how it is important</p>

<ul>
<li><p><a href="http://channel9.msdn.com/Events/Build/2014/2-531">New Security Features for Windows Phone</a></p></li>
<li><p><a href="http://channel9.msdn.com/Events/TechEd/NorthAmerica/2014/WIN-B357#fbid=">Windows Phone 8.1 Security and Management: The Right Choice for the Enterprise!</a></p></li>
</ul>
</li>
</ul>


<p>Stay in touch. You can find the presentation slides <a href="https://github.com/rahulpnath/Speaking/tree/master/Windows%20Phone%20And%20Store%20Apps">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Web Sites: Moving Wordpress to Cloud]]></title>
    <link href="http://rahulpnath.com/blog/azure-web-sites-moving-wordpress-to-cloud/"/>
    <updated>2014-05-26T21:16:09+05:30</updated>
    <id>http://rahulpnath.com/blog/azure-web-sites-moving-wordpress-to-cloud</id>
    <content type="html"><![CDATA[<p>It’s been almost an year since I have moved to this custom hosted blog and is nearing its renewal with my current host, Godaddy. Now that Azure has full support for Web Sites which enables you to deploy web applications on a scalable and reliable cloud infrastructure and being a FTE(Full Time Employee), I have the privilege of a free <a href="http://azure.microsoft.com/en-us/pricing/member-offers/msdn-benefits-b/">msdn account that offers 150$ free credit on azure</a>, I have decided on to move to Azure for my blog. You could also try this with <a href="http://azure.microsoft.com/en-us/pricing/free-trial/">a free Azure trial that offers you 200$ credit for all the services</a></p>

<p><strong>Setting up Wordpress</strong> on Azure is very easy and is just a matter of few clicks from the <a href="https://manage.windowsazure.com">Management Portal</a>. You can find the detailed steps to get this done <a href="http://azure.microsoft.com/en-us/documentation/articles/web-sites-php-web-site-gallery/">here</a>. By default Azure Web Sites are installed in the root directory of IIS. To move this into a sub-folder of your choice, you can use any FTP client(FileZilla). The connection details can be obtained from the Management Portal as shown in the below screen shot.</p>

<p><img src="http://rahulpnath.com/images/PortalQuickglance.jpg" alt="Portal Quick glance" /> <img src="http://rahulpnath.com/images/PortalQuickglance1.jpg" alt="Portal Quick glance 1" /></p>

<p><strong>Mapping your custom domain </strong>to the new wordpress site is about adding a <a href="http://azure.microsoft.com/en-us/documentation/articles/web-sites-custom-domain-name/">CName record for awverify or www</a> in your Domain dashboard provided by the domain registrar. Once you have the required CName entries you can map the custom domain in the portal using the ‘Manage Domains’ option.</p>

<p><img src="http://rahulpnath.com/images/CustomDomain.jpg" alt="Custom Domain" /></p>

<p><strong>Restoring your content </strong>from my current host was easy as I am using <a href="http://vaultpress.com">Vaultpress</a> for my site backup and it provides an option to <a href="http://help.vaultpress.com/restore-to-a-new-site/">backup to a different web site too</a>. If not you could also use <a href="http://www.davebost.com/2013/07/11/moving-a-wordpress-blog-to-windows-azure-transferring-your-content">FTP to move your current site content which is detailed out here</a>. Once the content is restored you would need to update the Wordpress Url and Site address url in the General Settings of your blog dashboard. You could also update this directly on the MySQL database in the <em>wp_options</em> table(<em>home</em> and <em>siteurl</em> property). To connect to the database you would get the connection string details from the portal and you can use <a href="http://www.mysql.com/products/workbench/">MySQL Workbench</a> to connect to it. You might have to recheck your permalink setting on the Wordpress dashboard to ensure that it is the same as you were using earlier.</p>

<p><img src="http://rahulpnath.com/images/AzureGeneralSettings.jpg" alt="General Settings" /></p>

<p>Now you are up an running your blog on Azure!!</p>

<p><strong>Things to look out for:</strong></p>

<p><strong>1</strong>. Make sure that all your blog links use your custom domain and not <yourdomain>.azurewebsite.net.</p>

<p><strong>2</strong>. I had my Jetpack commenting system broken as I had moved the blog to a subdirectory. To correct this you would need to disconnect jetpack from the wordpress account and reconnect it. You can do this from the Wordpress dashboard. If reconnecting throws some error, then connect to your SQL database and delete of the entries that starts with jetpack in the <em>wp_options</em> table.(Make sure you have a db backup before you do this). Reconnecting after that should work fine</p>

<p><strong>3. </strong>If you see any error indicating there is a Redirect loop error, this is mostly because you would be redirecting a no-www request to the www sub domain. In this case make sure that the siteurl and home property in wp_options table also has www in the urls. Otherwise it will keep redirecting itself between no-www and www creating a redirect loop.</p>

<p><strong>Edit:
4. </strong>If you face any error while trying to connect to the azure hosted web site from <a href="http://www.microsoft.com/en-in/download/details.aspx?id=8621">Windows Live Writer</a>(WLW), this most likely is because it uses <a href="http://codex.wordpress.org/XML-RPC_Support">xmlrpc.php</a> for publishing posts to the site and this is accessed over the https enpoint. Since https is not setup for the custom domain, accessing xmlrpc.php over https would present you with the below certificate error.</p>

<p><img src="http://rahulpnath.com/images/wlw_https_error.jpg" alt="Https error" /></p>

<p>You could either configure your ssl bindings in azure portal, under the <a href="http://ruslany.net/2013/07/how-to-setup-ip-ssl-on-windows-azure-web-sites/">Configure tab under your website</a>. SSL bindings to custom domains can only be used in Basic or Standard mode. If yours is not in basic or standard mode as mine, you can workaround this by either configuring the blog in WLW using your *.azurewebsites.net url.</p>

<p><strong>Azure Plans &amp; Pricing</strong></p>

<p>If you do not have a free account, you might be thinking of the costs that would be really incurred for you to move on to Azure. In short Azure Web Sites is offered in four tiers: <strong>Free</strong>, <strong>Shared (Preview)</strong>, <strong>Basic</strong> and <strong>Standard</strong>. The pricing details for each of these is available in detail <a href="http://azure.microsoft.com/en-us/pricing/details/web-sites/">here</a>. To have a custom domain name mapping you would at least need to choose Shared mode. For more information on how to choose the right plan for you, Scott Hanselman has a very good article on <a href="http://www.hanselman.com/blog/PennyPinchingInTheCloudWhenDoAzureWebsitesMakeSense.aspx">Penny Pinching in the cloud.</a></p>

<p>Do you plan to move to Azure Web Sites some time soon?
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series: Image Caching Library - JetImageLoader]]></title>
    <link href="http://rahulpnath.com/blog/windows-phone-series-image-caching-library-jetimageloader/"/>
    <updated>2014-04-18T05:26:17+05:30</updated>
    <id>http://rahulpnath.com/blog/windows-phone-series-image-caching-library-jetimageloader</id>
    <content type="html"><![CDATA[<p>Recently on a client project, I had a requirement to cache images locally on the phone and then load it from there from subsequent requests. Initially I had plans for custom implementing this using sqlite and custom code. While googling for this, I came across an awesome custom library that solved my problem with just a few lines of code – <a href="https://github.com/artem-zinnatullin/jet-image-loader">JetImageLoader</a> by <a href="https://github.com/artem-zinnatullin">Artem</a>. This is available via nuget, making it easy to install</p>

<p><a href="http://www.nuget.org/packages/WP-JetImagLoader/0.8.5"><img src="http://rahulpnath.com/images/WP-JetImagLoader.png" alt="WP-JetImagLoader" /></a></p>

<p>Integrating this library into any existing project is even easier and is just about using a converter on your Image datatemplate as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Image</span> <span class="na">Source=</span><span class="s">&quot;{Binding UserAvatarUrl, Converter={StaticResource JetImageLoaderConverter}}&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You would need to add a custom converter and add this as part of the resource. There is a sample for this on Github where the <a href="https://github.com/artem-zinnatullin/jet-image-loader">project source</a> also lives.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">JetImageLoaderImplementation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">BaseMemoryCache</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="n">stream</span><span class="p">&gt;</span> <span class="n">MemoryCacheImpl</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WeakMemoryCache</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="n">stream</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">BaseStorageCache</span> <span class="n">StorageCacheImpl</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LimitedStorageCache</span><span class="p">(</span><span class="n">IsolatedStorageFile</span><span class="p">.</span><span class="n">GetUserStoreForApplication</span><span class="p">(),</span> <span class="s">&quot;\\image_cache&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="n">SHA1CacheFileNameGenerator</span><span class="p">(),</span> <span class="m">1024</span> <span class="p">*</span> <span class="m">1024</span> <span class="p">*</span> <span class="m">10</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">JetImageLoaderConfig</span> <span class="nf">GetJetImageLoaderConfig</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">JetImageLoaderConfig</span><span class="p">.</span><span class="n">Builder</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">IsLogEnabled</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>            <span class="n">CacheMode</span> <span class="p">=</span> <span class="n">CacheMode</span><span class="p">.</span><span class="n">MemoryAndStorageCache</span><span class="p">,</span>
</span><span class='line'>            <span class="n">DownloaderImpl</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpWebRequestDownloader</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">MemoryCacheImpl</span> <span class="p">=</span> <span class="n">MemoryCacheImpl</span><span class="p">,</span>
</span><span class='line'>            <span class="n">StorageCacheImpl</span> <span class="p">=</span> <span class="n">StorageCacheImpl</span>
</span><span class='line'>        <span class="p">}.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">JetImageLoaderConverter</span> <span class="p">:</span> <span class="n">BaseJetImageLoaderConverter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="n">JetImageLoaderConfig</span> <span class="nf">GetJetImageLoaderConfig</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JetImageLoaderImplementation</span><span class="p">.</span><span class="n">GetJetImageLoaderConfig</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">object</span> <span class="nf">Convert</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Globalization</span><span class="p">.</span><span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="n">Convert</span><span class="p">(</span><span class="k">value</span><span class="p">,</span> <span class="n">targetType</span><span class="p">,</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">culture</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is all you need to do to have all the images that are bound with the converter to be cached locally on to the Memory and storage. You could also choose to cache it to only memory or storage. Do check this out in case you want to have images cached locally.</p>

<p>The nuget is for Windows 8 library, but there is also a version for <a href="https://github.com/artem-zinnatullin/jet-image-loader/tree/master/JetImageLoader.Wp7">WP7.1 avaialble on Github</a> (which apparently is a pull request from me, indeed my very first on Github that got merged)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Two Months and Counting - Android and Nexus 5]]></title>
    <link href="http://rahulpnath.com/blog/review-two-months-and-counting-android-and-nexus-5/"/>
    <updated>2014-03-10T21:38:29+05:30</updated>
    <id>http://rahulpnath.com/blog/review-two-months-and-counting-android-and-nexus-5</id>
    <content type="html"><![CDATA[<p>Gadgets, especially mobile phones have always been of interest to me and so is it even today. Its been over two months since I have moved over to Android on Nexus 5. I have been a loyal, hardcore Windows phone fan for over 3 years before that and it did take time to get used to the new operating system. There are still things that I like about Windows phone but there are things that I don’t like too, so I though of giving Android a try. <a href="https://www.google.com/nexus/5/">Nexus 5</a> is one powerful device that is worth every penny for its power packed features and there is no reason not to like it. The <a href="http://www.androidpolice.com/2013/10/20/weekend-poll-nexus-5-white-or-black/">White vs Black</a> confusion was there but then I got the White one, as that was the only thing in stock, and after all with a protective cover on, it didn’t matter much.</p>

<p><strong>Things that I love:</strong></p>

<ul>
<li><p><strong>Notification</strong> : The one stop place for all notifications is one of the best things that I like moving to Android from Windows phone. A <a href="http://i.msdn.microsoft.com/dynimg/IC619123.png">missed toast</a> is always missed until I next decide to open that app in Windows phone or maybe a lock screen notification. But now it is right there on the notification center. (though I have many notifications turned off as part of <a href="http://rahulpnath.com/blog/staying-organized-finding-a-system-to-manage-it-all/">Staying Organized</a>)</p></li>
<li><p><strong>Toggle Settings : <a href="https://play.google.com/store/apps/details?id=com.painless.pc">Toggling settings</a></strong> like Wi-Fi, Bluetooth, 3G etc is also top on my likes. There is at least 2 steps required for toggling these settings in Windows phone</p></li>
<li><p><strong>Google Now : </strong>I have been googling around for a lot of years and like the way Google Now updates on searches that I have done. Yes I know that we have a privacy problem here, but I have decided to stay on the internet – everything gets tracked here. The <strong>speech recognition</strong> of Google is as best it can get today, best thing being it understands my accent (Indian) pretty much all the time.</p></li>
<li><p><strong>Apps: </strong>I have never been a fan of apps and I rarely used them. Windows phone did have all the major apps, but most of them lacked all the features because of which I had to switch to the web app at times. This in fact made me use the web app always. But Android apps mostly has all the features which makes me use them more. Some of the apps that I use regularly are :</p>

<ul>
<li><p><a href="https://play.google.com/store/apps/details?id=ch.bitspin.timely">Timely</a> : An awesome alarm clock with the cool Smart Rise feature</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.google.android.gm">Gmail</a> : With all the features of the web app</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.skype.raider">Skype</a>, <a href="https://play.google.com/store/apps/details?id=com.microsoft.office.lync15">Lync</a>, <a href="https://play.google.com/store/apps/details?id=com.whatsapp">Whatsapp</a>, <a href="https://play.google.com/store/apps/details?id=com.facebook.katana">Facebook</a>, <a href="https://play.google.com/store/apps/details?id=com.twitter.android">Twitter</a>: Helps me keep connected with my friends, peers and customers</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.google.android.apps.giant">Google Analytics</a> and <a href="https://play.google.com/store/apps/details?id=org.wordpress.android">Wordpress</a> – For keeping track of my blog</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2">Authenticator</a> – for all two-step verification codes</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.microsoft.skydrive">Onedrive</a>, <a href="https://play.google.com/store/apps/details?id=com.dropbox.android">Dropbox</a>, <a href="https://play.google.com/store/apps/details?id=com.github.mobile">GitHub</a> – For managing my cloud storage. GitHub has a lot more to improve on features.</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.stitcher.app">Stitcher</a>, <a href="https://play.google.com/store/apps/details?id=com.devhd.feedly">Feedly</a>, <a href="https://play.google.com/store/apps/details?id=mobi.beyondpod">BeyondPod</a> – For feeds and podcasts</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.microsoft.office.onenote">OneNote</a> and the native email app - For tracking notes, <a href="http://rahulpnath.com/blog/staying-organized-finding-a-system-to-manage-it-all/">tasks and exchange emails</a>. The native email application has a lot of scope for improvement</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.alienmanfc6.wheresmyandroid">Where&rsquo;s My Droid</a> - Finding a lost phone equivalent on Windows Phone.</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=com.amazon.kindle">Kindle</a> and <a href="https://play.google.com/store/apps/details?id=com.overdrive.mobile.android.mediaconsole">Overdrive</a> - For my kindle books and audio books</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=net.nurik.roman.dashclock">DashClock Widget</a> - For lock screen notifications</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=ro.weednet.contactssync">UberSync</a> – To sync facebook contacts and profile pictures to a contact. This is something that is really good in windows phone. Ability to link all social accounts of a person/contact.</p></li>
</ul>
</li>
<li><p><strong>Customization: </strong>The level of customization and control that each application gives is enormous that almost everything is configurable. You can mute/turn off notifications on annoying text promotion messages, different color notifications, auto update settings and a lot more.</p></li>
<li><p><strong>Chrome: </strong>This definitely is one another on my top likes. I have been using chrome for a long time and absolutely love the experience even on android. The password sync across devices is cool and so is <a href="https://support.google.com/chrome/answer/2591582?hl=en">Sync tabs across devices</a>. Bookmarks sync and support for <a href="https://play.google.com/store/apps/details?id=com.delicious">Delicious</a> is also good. IE definitely has a long way to go there. The <a href="https://developers.google.com/chrome-developer-tools/docs/remote-debugging">developer support</a> for chrome on android is also worth mentioning.</p></li>
</ul>


<p><strong>Things that I don’t like and miss:</strong></p>

<ul>
<li><p><strong>Jumplist: <a href="http://rahulpnath.com/blog/windows-phone-series-jump-lists/">Jumplists</a></strong> really made navigating through large lists a lot easier on Windows phone. Now I always need to hit the search button and type.</p></li>
<li><p><strong>People Hub: </strong>This was one of the best things of Windows phone, having the ability to <a href="http://www.windowsphone.com/en-us/how-to/wp7/people/people-hub?signin=true">link all your social networks</a> into one and have a quick access of all updates.</p></li>
<li><p><strong>Nokia Music and Drive: </strong>In fact all the Nokia suite apps were really good and especially these two.</p></li>
</ul>


<p>The lists itself explains much of it – <strong>I am liking it a lot. </strong>The android experience on a Nexus device is fast and smooth.</p>

<p><strong>Cases and Covers:</strong></p>

<p>I have been alternating between 2 cases for my Nexus 5 from Spigen and liking them both especially the Neo Hybrid. The white shows of through its transparent back and the overall grip on the phone is very good and comfortable.</p>

<ul>
<li><p><a href="http://www.amazon.in/gp/product/B00HYA10LC/ref=as_li_ss_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=B00HYA10LC&amp;linkCode=as2&amp;tag=rahulpnath-21">Spigen Google Nexus 5 Case ULTRA HYBRID</a></p></li>
<li><p><a href="http://www.amazon.in/gp/product/B00EV8Y6QQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=B00EV8Y6QQ&amp;linkCode=as2&amp;tag=rahulpnath-21">Spigen Google Nexus 5 Case Protective Neo Hybrid</a></p></li>
</ul>


<p>The <strong>battery</strong> backup on the device is pretty good and is lasting for me through a day. I have not yet been on any trips with the phone, so can’t comment on the battery in such situations where generally it lasts lesser. But <a href="http://www.ibtimes.com/google-working-nexus-5-battery-drain-fix-affects-all-android-devices-kitkat-qualcomm-chips-1559771">Google has also announced</a> on a battery leak issue for which a fix would be out soon. Hope that would improve it further. I have never been a fan of phone <strong>camera, </strong>since <a href="http://rahulpnath.com/blog/photography-learning-to-click/">I prefer my DSLR</a> for that, but even then for a camera it is pretty decent with lots of options and filters. At times it does come handy and works perfect.</p>

<p>If you are planning to get a new phone and then this is worth considering. If you are already using one then do let know on what you feel about the phone?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series: Bing Maps and Turn-by-Turn Navigation]]></title>
    <link href="http://rahulpnath.com/blog/windows-phone-series-bing-maps-and-turn-by-turn-navigation/"/>
    <updated>2014-03-08T05:10:39+05:30</updated>
    <id>http://rahulpnath.com/blog/windows-phone-series-bing-maps-and-turn-by-turn-navigation</id>
    <content type="html"><![CDATA[<p>Many applications today provide features that integrate with users location and provide information on a map based on that. In this blog will see how we can use the Bing maps to show a users current location, search for destination and show route to that location. For this will use Bing maps, and you would have to create an account here and create a key that we would be using. Make sure that you read on the <a href="http://www.microsoft.com/maps/product/terms.html">licensing terms</a> on the api if you are planning to use this in a published application.</p>

<p>To use Maps in windows phone application, you would need to add a reference to ‘<em>Microsoft.Phone.Controls.Maps</em>’ once you create a new Windows phone project. Add the maps control to the application as below to display current location or other map related features.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;maps:Map</span> <span class="na">Grid.Row=</span><span class="s">&quot;1&quot;</span> <span class="na">Name=</span><span class="s">&quot;mapBing&quot;</span>  <span class="na">AnimationLevel=</span><span class="s">&quot;None&quot;</span> <span class="na">VerticalAlignment=</span><span class="s">&quot;Stretch&quot;</span> <span class="na">VerticalContentAlignment=</span><span class="s">&quot;Stretch&quot;</span>
</span><span class='line'>          <span class="na">CopyrightVisibility=</span><span class="s">&quot;Collapsed&quot;</span>  <span class="na">LogoVisibility=</span><span class="s">&quot;Collapsed&quot;</span>
</span><span class='line'>          <span class="na">ZoomBarVisibility=</span><span class="s">&quot;Collapsed&quot;</span>
</span><span class='line'>          <span class="na">ZoomLevel=</span><span class="s">&quot;12&quot;</span> <span class="na">CredentialsProvider=</span><span class="s">&quot;BING MAPS API KEY&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;maps:MapLayer</span> <span class="na">Name=</span><span class="s">&quot;RouteLayer&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;maps:MapLayer</span> <span class="na">Name=</span><span class="s">&quot;StartPoint&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;maps:MapLayer</span> <span class="na">Name=</span><span class="s">&quot;DestinationPoint&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;maps:MapLayer</span> <span class="na">Name=</span><span class="s">&quot;CurrentPosition&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;maps:MapLayer</span> <span class="na">Name=</span><span class="s">&quot;MyPathLayer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/maps:MapLayer&gt;</span>
</span><span class='line'><span class="nt">&lt;/maps:Map&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This adds a map user control to the application and also different layers to the application, on which we would be displaying the pins, routes etc. Anything that gets shown on the map is shown on different layers. Each of these can be cleared, deleted or toggled for visibility making it easy to work on maps.</p>

<p><strong>Track Me</strong></p>

<p>The  first thing that we would want is to track our location, so that we could provide information related to our current location. For this we use the <a href="http://msdn.microsoft.com/en-us/library/system.device.location.geocoordinatewatcher(v=vs.110">GeoCoordinateWatcher</a>.aspx), that provides the location information based in latitude and longitude. Registering for the PositionChanged event will update us whenver the location information related to the user has changed, so that we can update/obtain the real time location of the user if he is on the move. Once we have the user location co-ordinates, we can use the <a href="http://msdn.microsoft.com/en-us/library/ff701715.aspx">Location API</a>, to get the location name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">GeoPosition</span> <span class="n">myPosition</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">TrackMe</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">startingPoint</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CurrentPosition</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">myWatcher</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">myWatcher</span><span class="p">.</span><span class="n">PositionChanged</span> <span class="p">-=</span> <span class="n">myWatcher_PositionChanged</span><span class="p">;</span>
</span><span class='line'>        <span class="n">myWatcher</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>        <span class="n">myWatcher</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">myWatcher</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GeoCoordinateWatcher</span><span class="p">();</span>
</span><span class='line'>    <span class="n">myWatcher</span><span class="p">.</span><span class="n">TryStart</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromMilliseconds</span><span class="p">(</span><span class="m">1000</span><span class="p">));</span>
</span><span class='line'>    <span class="n">myWatcher</span><span class="p">.</span><span class="n">PositionChanged</span> <span class="p">+=</span> <span class="n">myWatcher_PositionChanged</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nf">myWatcher_PositionChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">GeoPositionChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="n">myPosition</span> <span class="p">=</span> <span class="n">myWatcher</span><span class="p">.</span><span class="n">Position</span><span class="p">;</span>
</span><span class='line'>     <span class="n">currentLocation</span> <span class="p">=</span> <span class="n">myWatcher</span><span class="p">.</span><span class="n">Position</span><span class="p">.</span><span class="n">Location</span><span class="p">;</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">isInDriveMode</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>         <span class="n">DrawMyCurrentRoute</span><span class="p">(</span><span class="n">currentLocation</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">LocationManager</span><span class="p">.</span><span class="n">GetLocationName</span><span class="p">(</span><span class="n">UpdateLocation</span><span class="p">,</span> <span class="n">myPosition</span><span class="p">.</span><span class="n">Location</span><span class="p">.</span><span class="n">Latitude</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">myPosition</span><span class="p">.</span><span class="n">Location</span><span class="p">.</span><span class="n">Longitude</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Destination and Routes</strong></p>

<p>Location points are depicted on maps using the Pushpin user control. Now that we have the users location, we need to get the destination where the user wants to go. We have added a simple panorama control where in one of them has a map and the other has the details to enter the destination location. Once the user enters the destination location name, we need to get the co-ordinates of this location. For this we use the Location API again but with a different endpoint. We might get multiple responses for the same location name, for which we add destination pushpins to the map, so that user can select the correct location from the map that he intends to go. On getting confirmation on the destination point, we now need to get the route from the current location to the destination location. A route is nothing but a set of co-ordinates between the start and the destination that the user will have to pass through to reach the final destination. You can use the <a href="http://msdn.microsoft.com/en-us/library/ff701705.aspx">Routes API</a> or consume it adding a service reference to <a href="http://dev.virtualearth.net/webservices/v1/routeservice/routeservice.svc/mex">http://dev.virtualearth.net/webservices/v1/routeservice/routeservice.svc/mex</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">RouteServiceClient</span> <span class="n">routeService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RouteServiceClient</span><span class="p">(</span><span class="s">&quot;BasicHttpBinding_IRouteService&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">routeService</span><span class="p">.</span><span class="n">CalculateRouteCompleted</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">DrawRoute</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">mapBing</span><span class="p">.</span><span class="n">SetView</span><span class="p">(</span><span class="n">LocationRect</span><span class="p">.</span><span class="n">CreateLocationRect</span><span class="p">(</span><span class="n">locations</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">routeService</span><span class="p">.</span><span class="n">CalculateRouteAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">RouteRequest</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Credentials</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Credentials</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ApplicationId</span> <span class="p">=</span> <span class="n">LocationManager</span><span class="p">.</span><span class="n">bingApiKey</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">Options</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RouteOptions</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">RoutePathType</span> <span class="p">=</span> <span class="n">RoutePathType</span><span class="p">.</span><span class="n">Points</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">Waypoints</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ObservableCollection</span><span class="p">(</span>
</span><span class='line'>        <span class="n">locations</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">new</span> <span class="n">Waypoint</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">Phone</span><span class="p">.</span><span class="n">Controls</span><span class="p">.</span><span class="n">Maps</span><span class="p">.</span><span class="n">Platform</span><span class="p">.</span><span class="n">Location</span><span class="p">()</span> <span class="p">{</span> <span class="n">Latitude</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">Latitude</span><span class="p">,</span> <span class="n">Longitude</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">Longitude</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Draw route draws a route line on the RouteLayer on the map, so that the user can see the path that he needs to take to reach his final destination. As the user starts moving the routes are recalcualted and redrawn on the map, so that there is a constant feedback to the user on the path that he is taking. Along with the routes we also get a text direction information that describes the direction in which we need to travel. This can be spoken out to the user so that he need not always look at the mobile to find the next immediate action that he needs to perform. Here I have used the Google translate api</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">speechUrl</span> <span class="p">=</span> <span class="s">&quot;http://translate.google.com/translate_tts?tl=en&amp;amp;q=&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">SpeakText</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Play the audio</span>
</span><span class='line'>    <span class="n">med1</span><span class="p">.</span><span class="n">Source</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">speechUrl</span> <span class="p">+</span> <span class="n">message</span><span class="p">);</span>
</span><span class='line'>    <span class="n">med1</span><span class="p">.</span><span class="n">Play</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could add on more features to this using the different location related api’s that are available and provide the user a more enhanced experience.</p>

<p><img src="http://rahulpnath.com/images/Bing_wp_route.jpg" alt="Bing_wp_route" /><img src="http://rahulpnath.com/images/Bing_wp_place_search.jpg" alt="Bing_wp_place_search" /><img src="http://rahulpnath.com/images/Bing_wp_directions_text.jpg" alt="Bing_wp_directions_text" /></p>

<p><strong>Testing</strong></p>

<p>Using the <a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh202933(v=vs.105">additional tools along with the phone emulator</a>.aspx), you can simulate location changes and also be at any location without actually being there and test. The emulator also provides a lot of functionality to simulate movement along a specific route and fire location changes in fixed amount of time etc, that come handy while testing.
<img src="http://rahulpnath.com/images/Bing_wp_simulator_geolocation.jpg" alt="Bing_wp_simulator_geolocation" /></p>

<p>You could also install it on to a phone and dash out to test it for yourself in your real-time location and reach the coffee-shop faster!. Find the sample code <a href="https://github.com/rahulpnath/Blog/tree/master/SimpleGPS">here</a> and feel free to use it.
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
</feed>
