<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-06-08T12:07:18+10:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Azure Key Vault using Azure Resource Manager (ARM) Templates]]></title>
    <link href="http://rahulpnath.com/blog/managing-azure-key-vault-using-azure-resource-manager-arm-templates/"/>
    <updated>2016-06-05T06:15:31+10:00</updated>
    <id>http://rahulpnath.com/blog/managing-azure-key-vault-using-azure-resource-manager-arm-templates</id>
    <content type="html"><![CDATA[<p>Creating and managing Azure Key Vault was mostly supported through PowerShell cmdlets <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">initially</a>, but there are multiple ways of achieving this now - <a href="http://www.rahulpnath.com/blog/managing-azure-key-vault-over-the-rest-api/">REST API</a>, <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">PowerShell</a>, CLI or ARM templates. In this post, we will look into how we can use <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/">Azure Resource Manager</a> (ARM) templates to create and manage a Key Vault.</p>

<h3>Azure Resource Manager and Templates</h3>

<p>Simply put, the <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/">Azure Resource Manager</a>(ARM) allows to group different resources in your solution that form a logical unit and manage them together. It allows to spin up all the resources required for your system and deploy them as and when required. You can achieve this using custom PowerShell scripts or creating a template (in JSON format) - Azure Resource Manager Template.</p>

<blockquote><p><em>Within the ARM template, you define the infrastructure for your app, how to configure that infrastructure, and how to publish your app code to that infrastructure.</em></p></blockquote>

<p>You can <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-export-template/">export a template from existing resources</a> for a starting point and then work off that. But in this post, I will start with an empty template as it helps to understand all the template parts. A template is nothing but a JSON file with a specific <a href="http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#">schema</a>. All templates have the below format where a few of the elements are not mandatory. If you are not familiar with the template format and the different elements that make it, I&rsquo;ll wait while you read more about the <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/#template-format">Template format</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;$schema&quot;</span><span class="p">:</span> <span class="s2">&quot;http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;contentVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;parameters&quot;</span><span class="p">:</span> <span class="p">{</span>  <span class="p">},</span>
</span><span class='line'>   <span class="nt">&quot;variables&quot;</span><span class="p">:</span> <span class="p">{</span>  <span class="p">},</span>
</span><span class='line'>   <span class="nt">&quot;resources&quot;</span><span class="p">:</span> <span class="p">[</span>  <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;outputs&quot;</span><span class="p">:</span> <span class="p">{</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Key Vault ARM Template</h3>

<p>The <a href="https://github.com/Azure/azure-resource-manager-schemas/blob/c301d6ed1d8876cad60af1f81d420e9249a80594/schemas/2015-06-01/Microsoft.KeyVault.json">Key Vault schema</a> is authored here and is part of the root schema URL that we had <a href="http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#">seen above</a>. Though it might not be able to fully understand the schema details, it helps to understand at a high level what are the different parameters that are allowed when defining a Key Vault. At present, the schema allows only creating <a href="http://www.rahulpnath.com/blog/moving-sensitive-information-from-configuration-file-to-azure-key-vault/">Secrets</a> within a Key Vault and <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">Keys have to be created separately</a>.</p>

<p>Like we did using the <a href="http://www.rahulpnath.com/blog/managing-azure-key-vault-over-the-rest-api/">REST API</a>, with this ARM template I want to create or update a Key Vault with a specified set of properties (like Vault Name, tenant etc), the access policies to specify the AD objects (applications/users) that have access to the Vault and create a few secrets.</p>

<p>Create a new JSON file with any name you like (<em>azuredeploy.json</em>) and copy the above template structure into it. For the content version, you can use any value that you like for e.g. 1.0.0. Next, we need to define the parameters that we need, that are specific to each Key Vault deployment. Without parameters, we will be always deploying the resources with the same name and properties, so it is a good practice to externalize it and use it as required. <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/#parameters">Parameters</a> have a defined structure and allows to have basic validation for the input values. All parameters that does not have a <em>defaultValue</em> needs to be passed in while using the template.</p>

<h4><strong>Parameters</strong></h4>

<p>Let&rsquo;s see a few of the different parameter types that we use in this template. The <em>keyVaultName</em> parameter is a simple string value and is required to be passed in as it does not have a default value specified, where as the <em>enableVaultForVolumeEncryption</em> is an optional parameter and defaults to false. The parameters <em>accessPolicies</em> and <em>secrets</em> are of type <em>array</em> and takes in any valid JSON array. But in this specific case, I want it to be in a specific format but I am yet not sure if I can specify a format structure for the JSON input. Sound off in the comments if you know of a way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;parameters&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;keyVaultName&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;metadata&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Name of the Key Vault&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;accessPolicies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;array&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;defaultValue&quot;</span><span class="p">:</span> <span class="s2">&quot;{}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;metadata&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Access policies object {&quot;</span><span class="err">tenantId</span><span class="s2">&quot;:&quot;&quot;,&quot;</span><span class="err">objectId</span><span class="s2">&quot;:&quot;&quot;,</span>
</span><span class='line'><span class="s2">                    &quot;</span><span class="err">permissions</span><span class="s2">&quot;:{&quot;</span><span class="err">keys</span><span class="s2">&quot;:[&quot;&quot;],&quot;</span><span class="err">secrets</span><span class="s2">&quot;:[&quot;&quot;]}}&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;enableVaultForVolumeEncryption&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;bool&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;defaultValue&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;metadata&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Specifies if the vault is enabled for volume encryption&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;secrets&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;array&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;defaultValue&quot;</span><span class="p">:</span> <span class="s2">&quot;{}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;metadata&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;all secrets {&quot;</span><span class="err">secretName</span><span class="s2">&quot;:&quot;&quot;,&quot;</span><span class="err">secretValue</span><span class="s2">&quot;:&quot;&quot;}&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Resources</strong></h4>

<p>The Resources section of the template defines the resources to be deployed or updated and takes in an array of values. Resource manager supports two modes of deployment - <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/#incremental-and-complete-deployments">Incremental and Complete deployment</a> - and the way you define the resources here will affect what and how things get deployed. The template supports the use of certain <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/#expressions-and-functions">Expressions and Functions</a>, to enable dynamic creation of values. Expressions are enclosed in square brackets ([]) and can appear anywhere is a JSON string value and evaluated when the template is deployed. To use a literal string that starts with a bracket [, use two brackets [[.</p>

<p>The <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-functions/#parameters">parameter function</a> is used to get the value of a parameter that is passed in. I use this to access the Vault name, accessPolicies and other parameters that we had defined earlier. Since accessPolicies in the template expects an array I pass in the parameter object as is to it.</p>

<p>Secrets are defined as nested resources within the Key Vault and can be defined as a nested property within the Key Vault resource as shown in the <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-template-keyvault/#examples">example here</a>. Since here we are interested in dynamically generating the Secrets based on the array value passed in as <em>secrets</em> parameter, I use the <em><a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-create-multiple/#copy-copyindex-and-length">copy, copyIndex and length function</a></em> to iterate through the array and generate the required template. The <em>copy</em> function iterates and produces the same template structure with different values as specified by the parameter values.</p>

<p>Since the Secret is defined as a separate resource, <em>name</em> property needs to indicate that it is a nested resource, hence we are concatenating the Vault Name with it. Without that I was getting the error :</p>

<p><span style='color: red;'><em>A nested resource type must have an identical number of segments as its resource name. A root resource type must have segment length one greater than its resource name.</em></span>.</p>

<p>The <em><a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-define-dependencies/#dependson">dependsOn</a></em> element specifies that the Secret resource is dependent on the Key Vault resource.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'> <span class="s2">&quot;resources&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Microsoft.KeyVault/vaults&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;[parameters(&#39;keyVaultName&#39;)]&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;accessPolicies&quot;</span><span class="p">:</span> <span class="s2">&quot;[parameters(&#39;accessPolicies&#39;)]&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">...</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Microsoft.KeyVault/vaults/secrets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;[concat(parameters(&#39;keyVaultName&#39;), &#39;/&#39;, parameters(&#39;secrets&#39;)[copyIndex()].secretName)]&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="s2">&quot;[parameters(&#39;secrets&#39;)[copyIndex()].secretValue]&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;dependsOn&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;[concat(&#39;Microsoft.KeyVault/vaults/&#39;, parameters(&#39;keyVaultName&#39;))]&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;copy&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;secretsCopy&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;count&quot;</span><span class="p">:</span> <span class="s2">&quot;[length(parameters(&#39;secrets&#39;))]&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deploying with ARM Templates</h3>

<p>To deploy the ARM template we need to pass in the required parameters and run the template.</p>

<h4><strong>Parameter File</strong></h4>

<p>Parameters can be passed in individually or as a <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/#parameter-file">Parameter File</a>. Parameter file (<em>azuredeploy.parameters.json</em>) is a JSON file with a specific format. Below is a sample parameter file for our Key Vault ARM template. We can have different such templates for each of our deployment environments with values specific for the environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;$schema&quot;</span><span class="p">:</span> <span class="s2">&quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;contentVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;parameters&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;keyVaultName&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="s2">&quot;NewARMVaultP&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;tenantId&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;accessPolicies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nt">&quot;tenantId&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;TENANT ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nt">&quot;objectId&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;AD OBJECT ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nt">&quot;permissions&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;all&quot;</span><span class="p">],</span>
</span><span class='line'>                        <span class="nt">&quot;secrets&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;all&quot;</span><span class="p">]</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span> <span class="err">...</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;secrets&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nt">&quot;secretName&quot;</span><span class="p">:</span> <span class="s2">&quot;ConnectionString&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nt">&quot;secretValue&quot;</span><span class="p">:</span> <span class="s2">&quot;SecureString1&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span> <span class="err">...</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4><strong>Deployment</strong></h4>

<p>The ARM template along with the parameter file can be deployed in different ways - <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/">PowerShell, Azure CLI, REST API, Visual Studio or from Azure Portal</a>. Using PowerShell we can deploy as below. The <em><a href="https://msdn.microsoft.com/en-us/library/mt679014.aspx">Test-AzureRmResourceGroupDeployment</a></em> cmdlet tests if the template file and parameter file are in correct format. This is mostly useful when authoring the template. <em><a href="https://msdn.microsoft.com/en-us/library/mt603823.aspx">New-AzureRmResourceGroupDeployment</a></em> deploys using the given template file and parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Test-AzureRmResourceGroupDeployment</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span> <span class="n">-TemplateFile</span> <span class="p">.\</span><span class="n">azuredeploy</span><span class="p">.</span><span class="n">json</span>
</span><span class='line'>        <span class="n">-TemplateParameterFile</span> <span class="p">.\</span><span class="n">azuredeploy</span><span class="p">.</span><span class="n">parameters</span><span class="p">.</span><span class="n">json</span> <span class="n">-Verbose</span>
</span><span class='line'><span class="nb">New-AzureRmResourceGroupDeployment</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span> <span class="n">-TemplateFile</span> <span class="p">.\</span><span class="n">azuredeploy</span><span class="p">.</span><span class="n">json</span>
</span><span class='line'>         <span class="n">-TemplateParameterFile</span> <span class="p">.\</span><span class="n">azuredeploy</span><span class="p">.</span><span class="n">parameters</span><span class="p">.</span><span class="n">json</span> <span class="n">-Verbose</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://armviz.io/#">ARM Template Visualizer</a> (ArmViz) is a visual way of editing and managing ARM templates and can be useful when dealing with a large number of resource deployments in a template. Also check out some <a href="https://azure.microsoft.com/en-us/documentation/articles/best-practices-resource-manager-design-templates/">Good practices for designing templates</a>. Most of the template code above is <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-template-keyvault/">based off this example here</a>. <strike>I will try to push this template into the <a href="https://github.com/Azure/azure-quickstart-templates">Azure Quickstart Templates</a> but meanwhile it is <a href="https://github.com/rahulpnath/Blog/tree/master/KeyVault%20ARM%20Template">available here</a>.</strike> The ARM template is available with the <a href="https://azure.microsoft.com/en-us/documentation/templates/201-key-vault-secret-create/">Azure Quickstart Templates</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Azure Key Vault over the REST API]]></title>
    <link href="http://rahulpnath.com/blog/managing-azure-key-vault-over-the-rest-api/"/>
    <updated>2016-05-25T06:23:39+10:00</updated>
    <id>http://rahulpnath.com/blog/managing-azure-key-vault-over-the-rest-api</id>
    <content type="html"><![CDATA[<p>Creating and managing Azure Key Vault was mostly supported through PowerShell cmdlets <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">initially</a>, but there are multiple ways of achieving this now - REST API, <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">PowerShell</a>, CLI or <a href="http://www.rahulpnath.com/blog/managing-azure-key-vaults-using-azure-resource-manager-arm-templates/">ARM templates</a>. In this post, we will look into how we can use the REST API to create and manage a Key Vault.</p>

<h3>Azure Resource Manager API</h3>

<p>The <a href="https://msdn.microsoft.com/en-AU/library/azure/dn790568.aspx">Azure Resource Manager API</a> provides programmatic access to manage Azure services that support <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/">Resource Manager</a>. Since Key Vault supports Resource Manager, we will be using it. Any requests to the API must be authenticated and can be done using an Azure AD application. Most of the steps to create an AD application are same as we saw when creating an AD application to <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">Authenticate a Client Application with Azure Key Vault</a>. From the &lsquo;<em>permissions to other applications</em>&rsquo; tab in portal (as shown below), we can give the application access to Management API&rsquo;s.</p>

<p>To get the token to access the Management API resource (<em><a href="https://management.azure.com">https://management.azure.com</a> </em>), I use the <a href="https://www.nuget.org/packages/Microsoft.IdentityModel.Clients.ActiveDirectory">ADAL library</a> with the required data. All the information that needs to be passed to the ADAL library is available under the AD application in the azure portal (as shown below).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">token</span> <span class="p">=</span> <span class="k">await</span> <span class="n">GetAccessToken</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&quot;https://login.microsoftonline.com/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;https://management.azure.com/&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">GetAccessToken</span><span class="p">(</span><span class="kt">string</span> <span class="n">authority</span><span class="p">,</span> <span class="kt">string</span> <span class="n">resource</span><span class="p">,</span> <span class="kt">string</span> <span class="n">scope</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">adCredential</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClientCredential</span><span class="p">(</span><span class="n">APPLICATION_ID</span><span class="p">,</span> <span class="n">APPLICATION_SECRET</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">authenticationContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthenticationContext</span><span class="p">(</span><span class="n">authority</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">authenticationContext</span><span class="p">.</span><span class="n">AcquireTokenAsync</span><span class="p">(</span><span class="n">resource</span><span class="p">,</span> <span class="n">adCredential</span><span class="p">)).</span><span class="n">AccessToken</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>Earlier authentication requests were served from <a href="https://login.windows.net">https://login.windows.net</a> (authority URL) which is <a href="https://blogs.technet.microsoft.com/ad/2015/03/06/simplifying-our-azure-ad-authentication-flows/">now updated</a> to <a href="https://login.microsoftonline.com">https://login.microsoftonline.com</a> .</em></p></blockquote>

<p><img src="http://rahulpnath.com/images\service_management_adAccess.png" class="center" alt="AD Application access to Azure Service Management API"></p>

<h3>Key Vault Management Client</h3>

<p>The <a href="https://www.nuget.org/packages/Microsoft.Azure.Management.KeyVault/">Microsoft.Azure.Management.KeyVault</a> NuGet package, provides capabilities to connect to the Management API&rsquo;s and manage the Vaults. With the NuGet reference added I can use the <em><a href="https://github.com/Azure/azure-sdk-for-net/blob/master/src/ResourceManagement/KeyVaultManagement/KeyVaultManagement/Generated/KeyVaultManagementClient.cs">KeyVaultManagementClient</a></em>.</p>

<blockquote><p><em>Much of the SDK code is generated  using <a href="https://github.com/azure/autorest">Autorest</a>, from the REST API&rsquo;s metadata spec&rsquo;s in Swagger format.</em></p></blockquote>

<p>With the Azure Subscription Id and the token from the previous step a TokenCloudCredentials is created that is used to connect the Key Vault Management Client.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">token</span> <span class="p">=</span> <span class="k">await</span> <span class="n">GetAccessToken</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;https://login.microsoftonline.com/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;https://management.azure.com/&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">tokenCredentials</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TokenCloudCredentials</span><span class="p">(</span><span class="n">SUBSCRIPTION_ID</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">keyVaultManagementClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultManagementClient</span><span class="p">(</span><span class="n">tokenCredentials</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Key Vaults exists under a Resource Group and for it to be accessible using the AD application authenticated token, we need to grant permission to the application. Just like we managed <a href="http://www.rahulpnath.com/blog/managing-user-permissions-for-key-vault/">User Permissions for Key Vault</a> we can give the AD application access to the Resource Group. We can do this from the new portal (as shown in the other post) or using the <em>New-AzureRmRoleAssignment</em> PowerShell cmdlet. <em>Get-AzureRmADServicePrincipal</em> is used o get the ObjectId of an existing application passing the application name as SearchString. I have yet not found a better way to find the application ObjectId. Please drop a comment if you know of any.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Get-AzureRmADServicePrincipal</span>  <span class="n">-SearchString</span> <span class="s1">&#39;AD Application Name&#39;</span>
</span><span class='line'><span class="nb">New-AzureRmRoleAssignment</span> <span class="n">-ObjectId</span> <span class="p">&lt;</span><span class="n">AD</span> <span class="n">Application</span> <span class="n">Object</span> <span class="n">Id</span><span class="p">&gt;</span>
</span><span class='line'>     <span class="n">-RoleDefinitionName</span> <span class="n">Reader</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Creating New Key Vault</h3>

<p>We have all the required permissions setup, to create a key vault using the KeyVaultManagament client library. Using this is straightforward as shown below.
The <em><a href="https://github.com/Azure/azure-content/blob/master/articles/resource-manager-template-keyvault.md#sku">Sku</a></em> is used to specify <a href="https://azure.microsoft.com/en-us/pricing/details/key-vault/">Key vault service tier</a> - &lsquo;Standard&rsquo; or &lsquo;Premium&rsquo;. For HSM backed keys it is Premium. Family on Sku object takes in a hardcoded value of &lsquo;A&rsquo;. <em><a href="https://github.com/Azure/azure-content/blob/master/articles/resource-manager-template-keyvault.md#propertiesaccesspolicies-object">AccessPolicies</a></em> specify the AD object identifier of user or application that can access the vault. In this case, I am adding the current AD application with full (<a href="https://github.com/Azure/azure-content/blob/master/articles/resource-manager-template-keyvault.md#propertiesaccesspoliciespermissions-object"><em>all</em></a>) access to Keys and Secrets. Adding an access policy in same as using the <a href="https://msdn.microsoft.com/en-us/library/mt603625.aspx"><em>Set-AzureRmKeyVaultAccessPolicy</em></a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">VaultCreateOrUpdateParameters</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Location</span> <span class="p">=</span> <span class="s">&quot;southeast asia&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Properties</span> <span class="p">=</span> <span class="k">new</span> <span class="n">VaultProperties</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Sku</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sku</span> <span class="p">{</span> <span class="n">Family</span> <span class="p">=</span> <span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Standard&quot;</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">TenantId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">TENANT_ID</span><span class="p">),</span>
</span><span class='line'>        <span class="n">AccessPolicies</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">AccessPolicyEntry</span><span class="p">&gt;()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">AccessPolicyEntry</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">TenantId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">TENANT_ID</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">ObjectId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">AD_OBJECT_ID</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">PermissionsToKeys</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;all&quot;</span> <span class="p">},</span>
</span><span class='line'>                        <span class="n">PermissionsToSecrets</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;all&quot;</span> <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">vaultFromCode</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyVaultManagementClient</span><span class="p">.</span><span class="n">Vaults</span>
</span><span class='line'>        <span class="p">.</span><span class="n">CreateOrUpdateAsync</span><span class="p">(</span><span class="s">&quot;SharedGroup&quot;</span><span class="p">,</span> <span class="s">&quot;VaultFromCode&quot;</span><span class="p">,</span> <span class="n">parameters</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Managing Existing Key Vaults</h3>

<p><strong>Update a Key Vault</strong></p>

<p>When updating an existing Key Vault, the full state (<em>VaultCreateOrUpdateParameters</em>) must be passed back and not just the update. To add a new <em>AccessPolicyEntry</em>, the existing policy entry values must also be passed back. In the code below, I get the existing state of the Key Vault using the <em>Get</em> and use the current vault properties to add in the new AccessPolicyEntry.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">keyVault</span> <span class="p">=</span> <span class="p">(</span><span class="k">await</span> <span class="n">keyVaultManagementClient</span><span class="p">.</span><span class="n">Vaults</span>
</span><span class='line'>   <span class="p">.</span><span class="n">GetAsync</span><span class="p">(</span><span class="s">&quot;SharedGroup&quot;</span><span class="p">,</span> <span class="s">&quot;VaultFromCode&quot;</span><span class="p">)).</span><span class="n">Vault</span><span class="p">;</span>
</span><span class='line'>            <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">VaultCreateOrUpdateParameters</span><span class="p">();</span>
</span><span class='line'>            <span class="n">parameters</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="n">keyVault</span><span class="p">.</span><span class="n">Location</span><span class="p">;</span>
</span><span class='line'>            <span class="n">parameters</span><span class="p">.</span><span class="n">Properties</span> <span class="p">=</span> <span class="n">keyVault</span><span class="p">.</span><span class="n">Properties</span><span class="p">;</span>
</span><span class='line'>            <span class="n">parameters</span><span class="p">.</span><span class="n">Properties</span><span class="p">.</span><span class="n">AccessPolicies</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">new</span> <span class="n">AccessPolicyEntry</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>       <span class="n">TenantId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">TENANT_ID</span><span class="p">),</span>
</span><span class='line'>       <span class="n">ObjectId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;AD Object IDentifier&quot;</span><span class="p">),</span>
</span><span class='line'>       <span class="n">PermissionsToKeys</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;get&quot;</span> <span class="p">},</span>
</span><span class='line'>       <span class="n">PermissionsToSecrets</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;get&quot;</span> <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'><span class="k">await</span> <span class="n">keyVaultManagementClient</span><span class="p">.</span><span class="n">Vaults</span><span class="p">.</span><span class="n">CreateOrUpdateAsync</span><span class="p">(</span><span class="s">&quot;SharedGroup&quot;</span><span class="p">,</span> <span class="s">&quot;VaultFromCode&quot;</span><span class="p">,</span> <span class="n">parameters</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Delete a Key Vault</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">await</span> <span class="n">keyVaultManagementClient</span><span class="p">.</span><span class="n">Vaults</span><span class="p">.</span><span class="n">DeleteAsync</span><span class="p">(</span><span class="s">&quot;SharedGroup&quot;</span><span class="p">,</span> <span class="s">&quot;VaultFromCode&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps you manage Azure Key Vault using the REST API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make it Easy for the New Person Joining the Team - Have a Project Ramp up Plan]]></title>
    <link href="http://rahulpnath.com/blog/make-it-easy-for-the-new-person-joining-your-team-have-a-project-ramp-up-plan/"/>
    <updated>2016-05-18T12:38:24+10:00</updated>
    <id>http://rahulpnath.com/blog/make-it-easy-for-the-new-person-joining-your-team-have-a-project-ramp-up-plan</id>
    <content type="html"><![CDATA[<p>Recently I was in a discussion with my friend/colleague on conducting a few ramp up sessions for the new hires in our team. The discussion went as below,</p>

<blockquote><p><em>Me: We should hold a few sessions to make the new guys in team more comfortable</em></p>

<p><em>Friend: It&rsquo;s too early for it. We should let them find their own way and not &lsquo;spoon-feed&rsquo; them with information.</em></p>

<p><em>Me: But we are not &lsquo;spoon-feeding&rsquo; them, we are just making their learning process faster and giving then an overview on how all the technology fits together in our world of things.</em></p>

<p><em>Friend: But &lsquo;I did not have any ramp up when I joined, and I felt it was better to have learned it on my own, though it took a lot more time.</em></p></blockquote>

<p><a href="http://www.mindtickle.com/wp-content/uploads/2014/02/new_employee_orientation_business_strategy_research.png" class="center" title="Image, from http://www.mindtickle.com/wp-content/uploads/2014/02/new_employee_orientation_business_strategy_research.png"><img src="http://rahulpnath.com/images\rampup_plan.png" class="center" alt="Rampup Plan"></a></p>

<p>Just like there are company-wide induction/onboarding sessions, I have always felt that project specific onboarding plans are also required and help new hires be part of the team and be more productive with their day-to-day activities faster. As mentioned in this <a href="http://www.fastcompany.com/3029820/work-smart/infographic-the-real-ways-to-hold-on-to-new-hires/3">article</a>, <em>New hires care more about effective job training and clear guidelines, and it&rsquo;s time you provide that for them.</em> It&rsquo;s best to have a plan in place when you have someone new joining your team and you along with the team are the best people to put that plan together.</p>

<h3>Boy Scout Rule</h3>

<p>The Boy Scouts have a <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">rule</a> - <em>&ldquo;Always leave the campground cleaner than you found it.&rdquo;</em>  New hires are like &lsquo;new camp group&rsquo; at a campground, so it&rsquo;s the duty of the &lsquo;existing team&rsquo; there to make it a good experience for them.</p>

<blockquote><p><em>&lsquo;Refactor&rsquo; your experiences to make it better for the next person who is about to take on the same journey</em></p></blockquote>

<p>It&rsquo;s not that my friend was intentionally trying not to pass on any information, but he felt that learning on their own would be better. Even I agree with him that learning on your own is far better than &lsquo;spoon-feeding&rsquo; - but a ramp up plan is not spoon-feeding. A ramp up plan is only to speed up the learning process and to make it more comfortable for someone joining new.</p>

<h3>When to create the plan?</h3>

<p>The need for such a plan is there only when there has been enough progress made on the project, after which there is someone new joining the team. So when a new hire is scheduled to join is a good time to create the &lsquo;draft&rsquo; plan. Once the new hire has gone through it and updated back with his own experiences it could become the first version of the plan, which can then be confidently shared to anyone joining after as it has worked for at least one person.</p>

<h3>What should be there in the plan</h3>

<p><em>It depends!</em></p>

<p>It&rsquo;s totally up to the team to decide what should be there in the plan. Some of the things that I usually have are</p>

<ul>
<li><p><strong>Overview of the project and what problem it is trying to solve</strong></p>

<p>It&rsquo;s really important that everyone on the team knows what the application is trying to solve and have a common goal to work towards. It&rsquo;s not just about the code we write but about the problem we are solving and that needs to be clearly defined. I would record a video, when this is done the first time and share it with anyone joining after that, as most of the core concepts of a project rarely change. There could be a follow-up session post watching the video, to also have a quick walk through and fill any missing gaps.</p></li>
<li><p><strong>Introduction to various technologies used in the project and how everything fits together</strong></p>

<p>Technology changes so fast these days that it is nearly impossible to stay updated with all the available options. So a walk through of the different technologies and pointers to resources that worked for you and the team will be of help. If there are any specific libraries, frameworks getting used, an introduction to those should also help.</p></li>
<li><p><strong>Release cycle and Release management</strong>
Every project has its own model of delivering the end product and everyone on the team should understand this process well. Having a continuous build is becoming more common these days and helps reduce the complexity of release. An end to end walk-through of the deployment process helps understand the application better and provides exposure to all the moving parts in the system.</p></li>
<li><p><strong>Environment/Machine setup</strong>
Software installation is one of the biggest pain when setting up a new machine for a project, especially with having specific versions of the software. Having a documented list of all the project dependencies (hardware and software) makes setting the project environment easy. It&rsquo;s preferable to have these <a href="https://chocolatey.org/">scripted</a>. Have a common place, where you can find links to all the various environments (dev, at,prod etc) and related resources.</p></li>
<li><p><strong>Patterns and Conventions</strong>
Every project has its own conventions and certain core patterns that are followed. It&rsquo;s good to have these patterns available for reference so that it helps understand the code better and helps reduce code-review cycles. Than having one big boring document, what I prefer more is to have multiple blog articles targeting each of those. I try to generalize commonly used patterns in the projects that I have worked on and create blog posts. This also helps generate content for <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">your blog</a>.</p></li>
<li><p><strong>Tips &amp; Tricks</strong>
This could range from how to easily navigate the code base, scripts to do some commonly occurring task and general things to keep an eye for.</p></li>
</ul>


<p>These are just some of the things I generally try to include in a ramp up plan but as said it totally depends on the team and the project.</p>

<h3>Sharing the plan</h3>

<p>Depending on the plan, if it has confidential information, you could split this into two (or more) different documents and share it at different phases of onboarding. Once a new hire is confirmed it&rsquo;s good to share the parts which do not have any confidential information. Technology stack, conventions used, machine setup (<a href="https://en.wikipedia.org/wiki/Bring_your_own_device">BYOD</a>) are usually not confidential and can be shared well before actual employment. Once all employment agreements are in place the rest too can be shared. It&rsquo;s also a good idea to have some walk-through of the plan itself to make it easier to follow.</p>

<h3>Iterate and Improve</h3>

<p>Updating back with the experiences of the people using the plan is important to keep it current and valuable. Suggesting improvements and updates should be an item in the plan so that this does not get missed. To make updates manageable, the plan must be accessible to all and preferably version controlled if they are documents.</p>

<p>What are your thoughts on having a ramp up plan?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS: Setting up the Environment]]></title>
    <link href="http://rahulpnath.com/blog/reactjs-setting-up-the-environment/"/>
    <updated>2016-05-12T04:27:36+10:00</updated>
    <id>http://rahulpnath.com/blog/reactjs-setting-up-the-environment</id>
    <content type="html"><![CDATA[<p><em>This post helps setting up the development environment for React on VS Code using Browserify and Gulp</em></p>

<p>I have been playing around with <a href="https://facebook.github.io/react/">React</a> for the past few days and liking the one way binding and immutability concept that it puts forward. The component-based approach and having all related code in a single place is really interesting. Need to explore more and see how it really turns out building UI&rsquo;s with React.</p>

<p>The openness of the Web makes it really difficult to get started with any development platform on it and is the same with React. There are a lot of options for getting things done and can get <a href="https://en.wikipedia.org/wiki/Decision_fatigue">overwhelming when newly starting out</a>. This post explains &lsquo;one way&rsquo; to set up the development environment when developing an application using the React JavaScript framework. I am using VS Code for some time now and wanted to use the same for React development. Except for setting up VS Code, everything else would still make sense to you if you are using a different editor.</p>

<h3>Package Manager for External Dependencies</h3>

<p>One of the first things we need when starting with a fresh project on React, is the React library itself. I use Node Package Manager(npm) for managing all my code and development dependencies. Use the below commands to set up the <a href="https://docs.npmjs.com/cli/init">npm configuration (<em>package.json</em>) </a> and install the latest version of React library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm init
</span><span class='line'>npm i --save react
</span><span class='line'>npm i --save react-dom
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>When installing npm packages use <a href="https://docs.npmjs.com/files/package.json#dependencies">&ndash;save</a> if it needs to be deployed with the application and use <a href="https://docs.npmjs.com/files/package.json#devdependencies">&ndash;save-dev</a> for a package added to support development.</em></p></blockquote>

<h3>Setting up VS Code</h3>

<p>JavaScript development experience is better when you have <em><a href="https://code.visualstudio.com/Docs/languages/javascript">jsconfig.json</a></em> file in your project root. VSCode recommends adding this file through a small light bulb notification on the right side of the status bar (as shown below). With this configuration file, VSCode treats all the <em>js</em> files under the same project context.</p>

<p><img class="center" src= "http://rahulpnath.com/images/vscode_jsconfig_balloon.png" alt="Visual Studio code jsconfig balloon notification" /></p>

<p>Intellisense for libraries is available through type definition files, usually available in the <a href="http://definitelytyped.org/">DefinitelyTyped</a> <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">repository</a>. With npm, you can manage these definition files using the <a href="https://github.com/typings/typings">TypeScript Definition Manager (typings)</a> package. To get started install the typings package and support for node packages. Now you can use <a href="https://github.com/typings/typings/blob/master/docs/commands.md">typings</a> to manage all the typescript definitions and use it for getting IntelliSense support. Once you have the correct type definitions installed for the packages you use, VSCode will show IntelliSense as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm i --save-dev typings
</span><span class='line'>typings install --ambient node
</span><span class='line'>typings install --save-dev gulp
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src= "http://rahulpnath.com/images/react_vscode_intellisense.png" alt="Visual Studio code Intellisense" /></p>

<h3>Hello World from React</h3>

<p>Now that we have enough to get us started let&rsquo;s write our first react component, which displays a message passed into it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">HelloWorld</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>   <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>       <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>           <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>       <span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">HelloWorld</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s save the above into <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/components/helloworld.js">components/helloworld.js</a></em>. To use this component in the application, it needs to be rendered into the HTML page. So let&rsquo;s add a main entry point for the application as below and save it into <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/main.js">main.js</a></em>. Notice how the component is referred in here and rendered into the HTML div element <em>app</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">HelloWorld</span> <span class="nx">from</span> <span class="s1">&#39;./components/helloworld&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">HelloWorld</span> <span class="nx">message</span> <span class="o">=</span><span class="s2">&quot;Hello World From React&quot;</span> <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For completeness below is how the <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/Index.html">Index.html</a></em> looks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>     <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Browserify for Bundling</h3>

<p>Now that we have all the code needed for rendering the component, let&rsquo;s bundle up all the different JavaScript files together so that we can deploy it as a single file. Since we are using <em>JSX</em> and ES6 features, which not all browsers support, we need to transform it. <a href="https://babeljs.io/">Babel</a> is a JavaScript compiler to get this done and it also has preset specific to <a href="https://babeljs.io/docs/plugins/preset-react/">react</a> and <a href="https://babeljs.io/docs/plugins/preset-es2015/">es2015</a>. <a href="http://browserify.org">Browserify</a> bundles all the JavaScript modules and also enables specifying transforms using the <a href="https://github.com/substack/node-browserify#usage">&ndash;transform (-t)</a> switch, to pass in <a href="https://github.com/babel/babelify">babel</a> along with the presets required.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>browserify -t [babelify --presets [react es2015] ] src\main.js -o dest\main.js -d
</span></code></pre></td></tr></table></div></figure>


<p>If you now manually copy over the HTML file into the <em>dest</em> folder and open it from there you should be seeing the &lsquo;<em>Hello World from React</em>&rsquo; message.</p>

<h3>Automating Build and More</h3>

<p>I definitely did not want to keep running the above command and copy the HTML(/CSS) files, every time I make a change, to see the output - so automating it was very much required. What I would essentially like to have is every time I make a change on any of the files in the project, the build to trigger and output the updated application into the <em>dest</em> folder and automatically refreshing the browser so that I can see the changes (near) real-time. I chose to use <a href="http://gulpjs.com/">Gulp</a> as this is popular and I have had some <a href="http://www.rahulpnath.com/blog/organizing-tests-into-test-suites-for-visual-studio/">experience using it before</a>.</p>

<h4><strong><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/gulpfile.js">gulpfile.js</a></strong></h4>

<p>To organize all the different path&rsquo;s used in the gulp build file, I have an object, <em>path</em> holding all the properties together, that&rsquo;s used in the <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname--deps-fn">gulp tasks</a>. The different tasks that I have defined are to <em>build</em> ( which <em>copyHtmlFiles</em> and builds and transforms <em>js</em> files), <em><a href="https://github.com/adametry/gulp-eslint">lint</a></em>, <em><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb">watch</a></em>&lsquo;es the source folder for changes and triggers the required build, <em><a href="https://www.npmjs.com/package/gulp-connect">connect</a></em>&rsquo;s a server to host the application and automatically <em>reload</em>&rsquo;s the browser whenever code is changed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">appConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">localBaseUrl</span><span class="o">:</span> <span class="s1">&#39;http://localhost&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">8090</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">paths</span> <span class="o">:</span> <span class="nx">path</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;copyHtmlFiles&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">DEST</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="nx">reload</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;js&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browserify</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">MAINJS</span><span class="p">,</span> <span class="p">{</span> <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">babelify</span><span class="p">,</span> <span class="p">{</span> <span class="nx">presets</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;react&#39;</span><span class="p">,</span> <span class="s1">&#39;es2015&#39;</span><span class="p">]</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">bundle</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">source</span><span class="p">(</span><span class="s1">&#39;main.js&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">DEST</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="nx">reload</span><span class="p">());;</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;copyHtmlFiles&#39;</span><span class="p">,</span> <span class="s1">&#39;js&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">JS</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">lint</span><span class="p">({</span> <span class="nx">config</span><span class="o">:</span> <span class="s1">&#39;eslint.config.json&#39;</span> <span class="p">}))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">lint</span><span class="p">.</span><span class="nx">format</span><span class="p">())</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;copyHtmlFiles&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">JS</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;js&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">connect</span><span class="p">.</span><span class="nx">server</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;dist&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">livereload</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">port</span><span class="o">:</span> <span class="nx">appConfig</span><span class="p">.</span><span class="nx">port</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;reload&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;dist/**/*&#39;</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="nx">reload</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">DEST</span> <span class="o">+</span> <span class="s1">&#39;Index.html&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">open</span><span class="p">({</span><span class="nx">uri</span> <span class="o">:</span> <span class="nx">appConfig</span><span class="p">.</span><span class="nx">localBaseUrl</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">appConfig</span><span class="p">.</span><span class="nx">port</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the default gulp task running, either using <a href="https://code.visualstudio.com/Docs/editor/tasks">VSCode Task Runner</a> or the <a href="https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md#4-run-gulp">command line</a>, any edits that I make to the code gets build and pushed to the output directory and the browser refreshes to show the latest changes.</p>

<p><img class="center" src= "http://rahulpnath.com/images/react_realtime_edits.gif" alt="React real-time browser refresh" /></p>

<p><em>If you find any package details missing see the <a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/package.json">package.json</a> file.</em></p>

<p>You can find the hello world project template <a href="https://github.com/rahulpnath/Blog/tree/master/React_Template">here</a>. The repository size is a bit high as I have <a href="http://www.rahulpnath.com/blog/checking-in-package-dependencies-into-source-control/">included the npm packages</a> (<em>node_modules</em>) in the repository, which you would have anyways downloaded when doing a &lsquo;<a href="https://docs.npmjs.com/cli/install">npm install</a>&rsquo;.</p>

<p>Hope this helps you to get started with React!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable NuGet Package Restore for a .Net Poject]]></title>
    <link href="http://rahulpnath.com/blog/disable-nuget-package-restore-for-a-net-poject/"/>
    <updated>2016-05-02T13:26:59+10:00</updated>
    <id>http://rahulpnath.com/blog/disable-nuget-package-restore-for-a-net-poject</id>
    <content type="html"><![CDATA[<p><em>If you have decided on <a href="http://www.rahulpnath.com/blog/checking-in-package-dependencies-into-source-control/">Checking in Package Dependencies into Source Control</a> for an existing project that uses Nuget Packages then this post is for you</em></p>

<p>When using NuGet package references that are not included in the source control, these packages gets restored during build time. There are <a href="https://docs.nuget.org/consume/package-restore">multiple ways that NuGet supports restore these dependencies at build time</a></p>

<ul>
<li>Automatic Package Restore is the current recommended approach (within Visual Studio), which is available from NuGet 2.7.</li>
<li>Command-line package restore on build servers</li>
<li>MSBuild-integrated package restore approach is the original Package Restore implementation and is still used in many projects.</li>
</ul>


<p>Depending on the type to of restore the project uses, NuGet has different configuration entries in the <em>csproj</em> files and <em>.nuget</em> folder in the solution root. So when choosing to check in package dependencies into the source control, it is a good idea to remove all these <a href="https://docs.nuget.org/consume/package-restore/migrating-to-automatic-package-restore">generated configurations</a> and files that are not required any more. The below script does this for you!</p>

<div class="alert alert-warning">
<strong>WARNING!</strong> The script deletes the <em>.nuget</em> folder (if it exists), updates the <em>.csproj</em> files. Please make sure that the project folder is under source control or you have a backup of the folder. After running the script make sure that all the changes that you see are expected as explained here and the project builds and runs as before.
</div>


<p>The PowerShell script does the below for a given solution directory folder (mandatory)</p>

<ul>
<li>For each of the <em>csproj</em> file in the given folder, the script removes the

<ul>
<li><em>RestorePackages</em> node</li>
<li><em>NugetPackageImportStamp</em> node</li>
<li><em>nuget target import</em> from the solution root .nuget folder</li>
<li><em>EnsureNuGetPackageBuildImports</em> node</li>
</ul>
</li>
<li>Removes <em>.nuget</em> folder from the solution root if it exists.</li>
</ul>


<p><em>The script leaves blank lines in the </em>csproj<em> files in place of the removed nodes.</em></p>

<figure class='code'><figcaption><span>Remove NuGet Restore</span><a href='https://gist.github.com/rahulpnath/13d3b4f54cec51e22344876b1566b911#file-remove-nuget-restore-ps1'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">param</span><span class="p">([</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Mandatory</span><span class="p">=</span><span class="nv">$true</span><span class="p">)]</span><span class="no">[string]</span><span class="nv">$solutionDirectory</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'> <span class="nv">$importNugetTargetsTag</span><span class="p">=</span> <span class="no">[regex]</span><span class="p">::</span><span class="n">escape</span><span class="p">(</span><span class="sh">@&#39;</span>
</span><span class='line'><span class="sh">&lt;Import Project=&quot;$(SolutionDir)\.nuget\NuGet.targets&quot; Condition=&quot;Exists(&#39;$(SolutionDir)\.nuget\NuGet.targets&#39;)&quot; /&gt;</span>
</span><span class='line'><span class="sh">&#39;@</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$restorePackagesTag</span> <span class="p">=</span> <span class="s1">&#39;&lt;RestorePackages&gt;.*?&lt;/RestorePackages&gt;&#39;</span>
</span><span class='line'><span class="nv">$nuGetPackageImportStamp</span> <span class="p">=</span> <span class="s1">&#39;&lt;NuGetPackageImportStamp&gt;.*?&lt;/NuGetPackageImportStamp&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$EnsureNuGetPackageBuildImportsTargetTag</span> <span class="p">=</span> <span class="s1">&#39;(?smi)&lt;Target Name=&quot;EnsureNuGetPackageBuildImports&quot;.*?&lt;/Target&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$f</span> <span class="k">in</span> <span class="nb">Get-ChildItem</span> <span class="n">-Recurse</span> <span class="n">-Path</span> <span class="nv">$solutionDirectory</span> <span class="n">-Filter</span> <span class="p">*.</span><span class="n">csproj</span> <span class="p">|</span> <span class="nb">sort-object</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="nv">$f</span><span class="p">.</span><span class="n">FullName</span> <span class="n">-Raw</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="p">`</span>
</span><span class='line'>        <span class="o">-replace</span> <span class="nv">$importNugetTargetsTag</span><span class="p">,</span> <span class="s2">&quot;&quot;</span> <span class="p">`</span>
</span><span class='line'>        <span class="o">-replace</span> <span class="nv">$nuGetPackageImportStamp</span><span class="p">,</span> <span class="s2">&quot;&quot;</span> <span class="p">`</span>
</span><span class='line'>        <span class="o">-replace</span> <span class="nv">$restorePackagesTag</span><span class="p">,</span> <span class="s2">&quot;&quot;</span> <span class="p">`</span>
</span><span class='line'>        <span class="o">-replace</span> <span class="nv">$EnsureNuGetPackageBuildImportsTargetTag</span><span class="p">,</span> <span class="s2">&quot;&quot;</span> <span class="p">`</span>
</span><span class='line'>        <span class="p">|</span> <span class="nb">set-content</span> <span class="nv">$f</span><span class="p">.</span><span class="n">FullName</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Get-ChildItem</span> <span class="n">-Path</span> <span class="nv">$solutionDirectory</span> <span class="n">-include</span> <span class="p">.</span><span class="n">nuget</span> <span class="n">-Recurse</span> <span class="p">|</span> <span class="k">foreach</span> <span class="p">(</span><span class="nv">$_</span><span class="p">)</span> <span class="p">{</span> <span class="nb">remove-item</span> <span class="nv">$_</span><span class="p">.</span><span class="n">fullname</span> <span class="n">-Force</span> <span class="n">-Recurse</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Any similarity with the scripts <a href="http://weblogs.asp.net/jongalloway/scripting-net-project-migration-to-automatic-nuget-package-restore">here</a> is intended as that was my starting place. To explicitly <a href="https://docs.nuget.org/consume/package-restore#opting-out">opt out of the Automatic Package Restore</a> on Visual Studio add a <em>Nuget.config</em> in the solution root.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;packageRestore&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Opts out of both Automatic Package Restore and MSBuild-Integrated Package Restore --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;enabled&quot;</span> <span class="na">value=</span><span class="s">&quot;False&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Opts out of Automatic Package Restore in Visual Studio --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;automatic&quot;</span> <span class="na">value=</span><span class="s">&quot;False&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/packageRestore&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Hope this helps you to move away from NuGet restore at build time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking in Package Dependencies into Source Control]]></title>
    <link href="http://rahulpnath.com/blog/checking-in-package-dependencies-into-source-control/"/>
    <updated>2016-04-26T12:21:21+10:00</updated>
    <id>http://rahulpnath.com/blog/checking-in-package-dependencies-into-source-control</id>
    <content type="html"><![CDATA[<p><em>This post looks into why we should include packages in the source control and not resolve it via configuration files at build time.</em></p>

<p>Over the past few years, <a href="https://en.wikipedia.org/wiki/Package_manager">Package Managers</a> have gained an important role in the way software gets developed. There is an <a href="https://github.com/showcases/package-managers">increasing number of package managers</a> catering to different programming languages and areas of development, making the distribution of reusable libraries and plugins easy. The convention that&rsquo;s usually followed with these package dependencies is to exclude them from source control, and use a configuration file (<a href="https://docs.npmjs.com/files/package.json">package.json</a>, <a href="https://docs.nuget.org/consume/package-restore">packages.config</a>) to retrieve all the packages at build time. Even the <a href="https://github.com/github/gitignore">GitHub’s collection</a> of <a href="https://git-scm.com/docs/gitignore">.gitignore</a> file templates ignores the packages folders of various package managers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># NuGet Packages
</span><span class='line'>*.nupkg
</span><span class='line'># The packages folder can be ignored because of Package Restore
</span><span class='line'>**/packages/*
</span><span class='line'>...
</span><span class='line'># Dependency directories
</span><span class='line'>node_modules
</span><span class='line'>jspm_packages
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Common Arguments for not Checking in Packages</h3>

<p>Since checking in packages is not a common practice, let&rsquo;s first see some of the arguments for not doing this and how it compares to having them checked in.</p>

<h4><strong>Storage</strong></h4>

<p><em>Packages are something that can be resolved at runtime and keeping them excluded saves that extra space on the source control system.</em></p>

<p>Yes, this might have been a good reason few years back, but these days this is not a good reason as storage has become really cheap. Moreover popular source control systems charge by the <a href="https://github.com/pricing/plans">number of repositories</a> and not by the space it occupies (although it has <a href="https://help.github.com/articles/what-is-my-disk-quota/">limits</a> on it).</p>

<h4><strong>Time</strong></h4>

<p><em>The clone is faster when you do not have packages in the source control repository as opposed to having them.</em></p>

<p>But for the project to build we need the packages restored first. So the time is either spent in the clone or in the restore. But if the packages are included in the git clone then you can immediately start working on the project after a clone and do not need any internet connectivity to make the project build. This is also of advantage if you want to run a &lsquo;<a href="https://git-scm.com/docs/git-clean">git clean</a>&rsquo; - which cleans the working tree by recursively removing files that are not under version control. With packages not under the source control, you have to restore them every time you run it - This is not a problem if you have internet connectivity, but will block your work if you do it when you don&rsquo;t.</p>

<blockquote><p><em>Without checking in dependent packages, you can&rsquo;t git clone and get on a flight nor can you git clean while on a <a href="https://en.wikipedia.org/wiki/Airplane_mode">flight</a></em></p></blockquote>

<p>Moreover cloning a repository is a one-time activity, while a clean can be done any time a developer wants to. So it actually saves more time to keep the packages checked in.</p>

<h3>More Reason for Checking in Packages</h3>

<p>Now that we have seen most of the common arguments are not valid, let&rsquo;s see more reasons on why including the packages into the source control is actually better.</p>

<h4><strong>Explicit Dependencies</strong></h4>

<p>It&rsquo;s always better to be explicit about your code dependencies and not have them resolved by a package manager.</p>

<blockquote><p><em>Packages are nothing but code and can alter the behaviour of the application.</em></p></blockquote>

<p>There are possibilities of specific package versions getting <a href="http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm">removed from the package manager</a>, which your application is still dependent on and leads to build breakage! If your package configuration is set up in such a way to resolve the latest available package of  the specific dependency, there are possibilities that the package owner pushes an update that is not backward compatible, causing the build to break! Given that these possibilities exist there is no reason to exclude package dependencies from checked in.</p>

<h4><strong>Package Source Downtime</strong></h4>

<p>Though the publicly available package sources like NuGet, npm are available almost all the time, it is likely that they too <a href="http://stackoverflow.com/questions/17806889/nuget-feed-reliability">can go down</a>. The last thing you would want is to get blocked by the downtime of these services - be it failure to build locally or on a server or even block a critical deployment. With the packages available in your source control, you have one less moving part in your whole deployment pipeline and it is better to have lesser dependencies.</p>

<h4><strong>Custom Package Sources</strong></h4>

<p>Many times I have had to update my Package sources in Visual Studio and break my head on the specific order of these entries to get the project building. This is very common when using custom packages sources like <a href="http://inedo.com/proget">ProGet</a> or <a href="https://myget.org/">MyGet</a>. Such dependencies make project setup harder and is easily avoided if all the dependent assemblies are available within the repository.  You can still have them as custom NuGet sources but have the dependencies included into the repository and update the references whenever source changes. This makes project ramp up easier and faster, with one less configuration step.</p>

<p><img class="center" alt="Nuget custom package source" src="http://rahulpnath.com/images/nuget_package_sources.png" /></p>

<p>Do you still see any reason for not checking in package dependencies into the source control? If not let&rsquo;s go and change that package folder exclude and have them included in the source. (I just updated <a href="http://www.rahulpnath.com/blog/clal-command-line-application-launcher/">CLAL</a> to <a href="https://github.com/rahulpnath/clal/commit/736023d9ab4bd285cb077ff54acd1bbaad142a08">include dependencies.</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git checkout TFS]]></title>
    <link href="http://rahulpnath.com/blog/git-checkout-tfs/"/>
    <updated>2016-04-15T05:23:08+10:00</updated>
    <id>http://rahulpnath.com/blog/git-checkout-tfs</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a year since using <a href="https://git-scm.com/">Git</a> as my mainstream version control system and I am loving it! Before Git, I had used Team Foundation Version Control (TFVC) for a very long time and was so used to it that I found Git a bit complex and overwhelming in the beginning. Team Foundation Server (TFS) is the whole product suite from Microsoft that provides source code management. Until TFS 2013, it supported only TFVC which is when it introduced <a href="https://blogs.msdn.microsoft.com/mvpawardprogram/2013/11/13/git-for-tfs-2013/">Git in TFS</a>. Even today people use TFS and TFVC synonymously (like in the title of this post) though they are not the same.</p>

<h3>Fundamental shift in thinking</h3>

<p>By design, Git is a Distributed VCS, whereas TFS is centralized one. It takes quite a while to get your head around this and what it actually means. By definition</p>

<blockquote><p><em><strong>TFVC</strong>: Uses a single, centralized server repository to track and version files. Local changes are always checked in to the central server where other developers can get the latest changes.</em></p>

<p><em><strong>Git</strong>: Git is a distributed version control system. Each developer has a copy of the source repository on their dev machine. Developers can commit each set of changes on their dev machine and perform version control operations such as history and compare without a network connection.</em></p></blockquote>

<p>You. may not see the real Distributed benefits if you are working off a central repository (hosted on a server like GitHub or Bitbucket) and using <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow">TFS way of development</a> :</p>

<p><em>Get latest code => Make your changes => Merge latest +> Check in (</em>Commit and push<em>)</em></p>

<p>The real power of Git is better understood when you start working disconnected, use branches to keep unrelated development activities separate and merge those into the main trunk (<em>master</em>) once comfortable. You get a local copy of the project and lets you make changes independent of all the other changes in the project.</p>

<blockquote><p><em>Git feels so lightweight and never gets in the way of doing things.</em></p></blockquote>

<h3>Make command line your friend</h3>

<p>If you are a UI savvy person then Git might a good starting point to start using the command line. At first, it definitely feels hard especially if you were TFS/Visual Studio users and might be tempted to use the GUI tools available (<a href="https://desktop.github.com/">GitHub Desktop</a> or <a href="https://www.sourcetreeapp.com/">SourceTree</a>)</p>

<blockquote><p><em>Repetitive tasks become more evident when you use a command line and easily automatable.</em></p></blockquote>

<p>I use Cmder (<a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of my favourite tools</a>) with Git and have <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/">set up SSH</a> to Bitbucket and Github (expected soon on TFS), secured by a paraphrase, so that I do not have to key in the credentials every time I interact with the repositories. I <a href="https://github.com/cmderdev/cmder/issues/193#issuecomment-63040989">start the ssh-agent the very first time I open Cmder</a>, which prompts for my paraphrase and continues to run in the background. Alternatively, you can also use <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows">Credential Manager</a> to store credentials, when working with HTTP enabled Git repository. For the common commands, I have set up aliases like below, to save a bit on the keystrokes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gl=git log --oneline --all --graph --decorate  $*
</span><span class='line'>gs=git status
</span><span class='line'>ga=git add -A
</span><span class='line'>gp=git pull
</span><span class='line'>gpp=git push
</span><span class='line'>gc=git commit -m &quot;$*&quot;
</span><span class='line'>gcc=git commit
</span></code></pre></td></tr></table></div></figure>


<h3>Different workflows</h3>

<p>Git can be used in many ways and which makes it hard to get started. There are a few popular <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/">workflows</a> that one can use. Currently, I am using -  <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow">Feature Branch workflow</a> -
which means that all work happen on independent feature branches and once completed gets merged into the main trunk (master branch). Code Reviews happens on the way it gets pulled into the main branch, which ensures code quality and familiarity.</p>

<p><a href="https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/01.svg"><img class="center" alt="Git Feature Branch Workflow" src="http://rahulpnath.com/images/git_featurebranch_workflow.png" /></a></p>

<h3>Not Just for Code</h3>

<p>Git is a version control system and does not limit itself to storing code. You can use it for <a href="http://readwrite.com/2013/11/08/seven-ways-to-use-github-that-arent-coding/">version controlling any of your work</a>. For example, this blog is <a href="https://github.com/rahulpnath/rahulpnath.com">hosted on Github</a> and all the <a href="https://github.com/rahulpnath/rahulpnath.com/commits/master">changes are version controlled</a>, which gives me the flexibility to work and commit locally. Since the blog is <a href="http://www.rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress/">static generated</a> I can also preview all the changes locally. I use git whenever I work on any documents or <a href="https://github.com/rahulpnath/Speaking">presentations</a> so that I can avoid manual copy of files and renaming with suffixes like &lsquo;<em>Draft</em>, &rsquo;<em>Draft1</em>,<em>Final</em>,&ldquo;<em>FinalRevision</em>&lsquo; etc. (if that sounds any similar)</p>

<h3>Managing Commits</h3>

<p>When coming to commits, which are nothing but checkpoints of meaningful work done, people might have a different  definition for &lsquo;<em>meaningful</em>&rsquo; - for some it might be really granular, for others a bit coarse and for yet another it means all the work is done. I tend to commit quite often - even a rename of a variable leads to a commit so that I do not have to backtrack if at all something goes wrong immediately after that.</p>

<p>if you really like the idea of committing often (locally), but want the pushes to remotes more coarse, you can &lsquo;<strong><a href="http://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git">squash your commits</a></strong>&rsquo;, before pushing it to remote branch. This allows you to commit often locally and still push  meaningful commit in the main source history. Make sure that the <a href="http://chris.beams.io/posts/git-commit/">commit messages and clear and communicates the intent</a> and helps <a href="http://megakemp.com/2014/08/14/the-importance-of-a-good-looking-history/">keep a good looking history</a>.</p>

<p>Git is one of the best things that happened to developers and hopes it stays long!</p>

<p><strong>References</strong></p>

<ul>
<li><a href="http://gitref.org/index.html">Git Reference</a></li>
<li><a href="https://git-scm.com/book/en/v2">Pro Git</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLAL - Command Line Application Launcher]]></title>
    <link href="http://rahulpnath.com/blog/clal-command-line-application-launcher/"/>
    <updated>2016-04-07T06:11:22+10:00</updated>
    <id>http://rahulpnath.com/blog/clal-command-line-application-launcher</id>
    <content type="html"><![CDATA[<p>CLAL (Command Line Application Launcher) is a desktop application to launch any (currently supports only SQL Server Management Studio - <a href="https://msdn.microsoft.com/en-us/library/ms162825.aspx">ssms</a>) command line application. It helps manage different configurations with which a command line application can be launched - such as different connection strings to various databases.</p>

<p><strong> <a href="http://bit.ly/1REGiFT">Install the latest version here</a> </strong></p>

<p>CLAL allows you to first specify the meta data of the command line application first and then create the various configurations for that by filling in the parameters as specified in the metadata. Currently since this only supports <em>ssms</em>, the metadata edit screen is not present and is hard coded into the application. The image below shows the various database servers that I connect to, and CLAL helps me reach them quickly</p>

<p><img class="center" alt="Command Line Application Launcher" src="http://rahulpnath.com/images/clal.png" /></p>

<p>Use the &lsquo;<em>Add Configuration</em>&rsquo; button to add a new configuration. You can specify a <em>Friendly Name</em> for the configuration and then fill in the other details required by the command line. Alternatively for <em>ssms</em> you can also paste in a connection string and have all the fields automatically populated.</p>

<p><img class="center" alt="Command Line Application Launcher" src="http://rahulpnath.com/images/clal_new.png" /></p>

<p>Once new configuration is saved you can launch the application with the specified configuration either using the <em>Launch</em> button or double click on the configuration name in the list.</p>

<blockquote><p><em>Work in progress to support other command line applications and to update the look and feel.</em></p></blockquote>

<p><a href="https://github.com/rahulpnath/clal/issues"><strong>Contribute</strong></a> to the development by coding or reporting issues that you find file using the application. <a href="http://www.rahulpnath.com/blog/category/clal/">Check out these articles</a> for my learnings while building this application.</p>

<h4><strong>Credits</strong></h4>

<p><a href="https://github.com/rahulpnath/clal/tree/master/Resources">Icons/Logo</a>: <a href="https://twitter.com/RoshTS">Rosh TS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring to Improve Testability: Extracting Dependencies]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-to-improve-testability-extracting-dependencies/"/>
    <updated>2016-04-03T03:14:28+10:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-to-improve-testability-extracting-dependencies</id>
    <content type="html"><![CDATA[<p><a href="https://pixabay.com/en/code-data-programming-code-944504/" class="center" title="Image By Lawrence Monk, from https://pixabay.com/en/code-data-programming-code-944504/"><img src="http://rahulpnath.com/images\coding.jpg" class="center" alt="Refactoring"></a></p>

<p>In the earlier post, <a href="http://rahulpnath.com/blog/refactoring-to-improve-testability-removing-unnecessary-dependencies/">Removing Unnecessary Dependencies</a>, we saw how having an unnecessary dependency hinders testability. In this post we will see just the opposite of that - extracting functionality out of a class and creating another class to separate responsibilities, making it easier to test and adhere to <a href="https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html">Single Responsibility Principle</a>(SRP).</p>

<blockquote><p><em>Violating Single Responsibility Principle makes writings tests harder.</em></p></blockquote>

<p>Some of the common tests smell (from XUnit Test Patterns by Gerard Meszaros, <a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/">a recommended read</a>) that helps me to find these dependencies are <a href="http://xunitpatterns.com/Hard%20to%20Test%20Code.html">Hard-To-Test Code</a> and <a href="http://xunitpatterns.com/Fragile%20Test.html">Fragile Tests</a>. In this post we will explore the refactoring with the help of an example - I have to process usages (anything like electricity, internet, water etc.) for a list of locations aggregated over for a day. There is a repository where the last processed date for the location is stored, and whenever this process runs we have to process for all the days from the last processed date till the current day.</p>

<p>The existing code looks like below, which loops through a list of locations passed in, fetches the last processed date from a repository , gets all the days to be processed till today (<em>DateTime.Now.Date</em>) and processes them for all the days.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">LocationsUsagesCalculator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ILocationUsages</span> <span class="n">locationUsages</span><span class="p">;</span>
</span><span class='line'>    <span class="n">IUsageRepository</span> <span class="n">usageRepository</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ProcessUsagesForLocations</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Location</span><span class="p">&gt;</span> <span class="n">locations</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">location</span> <span class="k">in</span> <span class="n">locations</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ProcessUsagesForLocation</span><span class="p">(</span><span class="n">location</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">ProcessUsagesForLocation</span><span class="p">(</span><span class="n">Location</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">DateTime</span> <span class="n">lastProcessedDate</span> <span class="p">=</span> <span class="n">usageRepository</span><span class="p">.</span><span class="n">GetLastProcessedDateForLocation</span><span class="p">(</span><span class="n">location</span><span class="p">);</span>
</span><span class='line'>        <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;</span> <span class="n">datesToProcess</span> <span class="p">=</span> <span class="n">GetAllDaysTillTodayFromDate</span><span class="p">(</span><span class="n">lastProcessedDate</span><span class="p">);</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">dateToProcess</span> <span class="k">in</span> <span class="n">datesToProcess</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ProcessUsagesForLocationOnDate</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">dateToProcess</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">ProcessUsagesForLocationOnDate</span><span class="p">(</span><span class="n">Location</span> <span class="n">location</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">dateToProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">locationUsages</span><span class="p">.</span><span class="n">ProcessUsagesForLocationOnDate</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">dateToProcess</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;</span> <span class="n">GetAllDaysTillTodayFromDate</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">lastProcessedDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">dateCounter</span> <span class="p">=</span> <span class="n">lastProcessedDate</span><span class="p">.</span><span class="n">Date</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">dateCounter</span> <span class="p">&lt;=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">Date</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="n">dateCounter</span><span class="p">;</span>
</span><span class='line'>            <span class="n">dateCounter</span> <span class="p">=</span> <span class="n">dateCounter</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testability Issues with Current Design</h3>

<p>The code is self-explanatory and does what&rsquo;s expected. But what interests us more is the test code for this. From a test perspective we need to make sure
that for all locations, usages gets processed for the pending days. Direct cases when last processed day is a day before, a couple of days before and different for each location are some of the likely scenarios. Let&rsquo;s see one of the cases where the last processed day is a few days before for all locations</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory, AutoMoqData]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">ProcessUsagesWithCoupleOfDaysBeforeAsLastProcessedProcessesAllDaysTillTodayForEachLocation</span><span class="p">(</span>
</span><span class='line'><span class="na">   [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">ILocationUsages</span><span class="p">&gt;</span> <span class="n">locationUsages</span><span class="p">,</span>
</span><span class='line'><span class="na">   [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">IUsageRepository</span><span class="p">&gt;</span> <span class="n">usageRepository</span><span class="p">,</span>
</span><span class='line'>   <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Location</span><span class="p">&gt;</span> <span class="n">locations</span><span class="p">,</span>
</span><span class='line'>   <span class="n">LocationsUsagesCalculator</span> <span class="n">sut</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">days</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">threeDaysBefore</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(-</span><span class="n">days</span><span class="p">);</span>
</span><span class='line'>    <span class="n">usageRepository</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">GetLastProcessedDateForLocation</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Location</span><span class="p">&gt;()))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">threeDaysBefore</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sut</span><span class="p">.</span><span class="n">ProcessUsagesForLocations</span><span class="p">(</span><span class="n">locations</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">expectedDates</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">days</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">threeDaysBefore</span><span class="p">.</span><span class="n">Date</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">location</span> <span class="k">in</span> <span class="n">locations</span><span class="p">)</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">date</span> <span class="k">in</span> <span class="n">expectedDates</span><span class="p">)</span>
</span><span class='line'>            <span class="n">locationUsages</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">ProcessUsagesForLocationOnDate</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">date</span><span class="p">),</span> <span class="n">Times</span><span class="p">.</span><span class="n">Once</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clearly this is not the kind of tests that I want to write! It has a lot of setup code and even some logics to generate <em>expectedDates</em>. Let&rsquo;s see the various dependencies that the SUT has:</p>

<ul>
<li>ProcessUsagesForLocationOnDate on ILocationUsages</li>
<li>GetLastProcessedDateForLocation on IUsageRepository</li>
<li>List of locations that it&rsquo;s processing</li>
<li>Last processed date for each location</li>
<li>Dates pending processing as of today</li>
</ul>


<p>We clearly see that this one class does a lot more things than what its name suggests. Let&rsquo;s see how we can refactor this to improve our test code and manage the dependencies better.</p>

<h3>Refactoring the Code</h3>

<p>Finding all the dates till a given date (today in this case) is not this classes responsibility and can easily be pulled out. Since the SUT depends on <em>IUsageRepository</em> just to calculate the dates I can pull that out along with the refactoring. I have created a new interface, <em>IUsageDatesCalculator</em>, to return all the days pending process. With this interface, the test code looks a bit more clear and easier to write.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory, Tests.AutoMoqData]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">ProcessUsagesProcessesForAllLocationForPendingDays</span><span class="p">(</span>
</span><span class='line'>    <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;</span> <span class="n">datesToProcess</span><span class="p">,</span>
</span><span class='line'><span class="na">    [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">ILocationUsages</span><span class="p">&gt;</span> <span class="n">locationUsages</span><span class="p">,</span>
</span><span class='line'><span class="na">    [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">IUsageDatesCalculator</span><span class="p">&gt;</span> <span class="n">usageDatesCalculator</span><span class="p">,</span>
</span><span class='line'>    <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Location</span><span class="p">&gt;</span> <span class="n">locations</span><span class="p">,</span>
</span><span class='line'>    <span class="n">LocationsUsagesCalculator</span> <span class="n">sut</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">usageDatesCalculator</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">GetDatesToCalculate</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Location</span><span class="p">&gt;()))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">datesToProcess</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sut</span><span class="p">.</span><span class="n">ProcessUsagesForLocations</span><span class="p">(</span><span class="n">locations</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">location</span> <span class="k">in</span> <span class="n">locations</span><span class="p">)</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">date</span> <span class="k">in</span> <span class="n">datesToProcess</span><span class="p">)</span>
</span><span class='line'>        <span class="n">locationUsages</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">ProcessUsagesForLocationOnDate</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">date</span><span class="p">),</span> <span class="n">Times</span><span class="p">.</span><span class="n">Once</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks better and easy to write - we do not have to write any code in the test to generate the expected dates. All I need is a list of dates (no matter is what order) and I need to make sure that process calls all of those. We would also pull out a separate interface to process for a location, instead of a list of locations. This will further remove the need to loop through the locations list in the test.</p>

<h3>DateTime and Tests</h3>

<p>Both in the original code and the refactored code, the logic that generates the dates to be processed depends on <em>DateTime.Now</em> for getting the current date. Though this looks perfectly fine, it makes testing harder. In the original test code, I had to generate expected dates based on today (system time).</p>

<p>It&rsquo;s a good practice to inject a Time Provider into the consumer so that you can mock the value of Now(today) for tests. <a href="https://msdn.microsoft.com/en-us/library/system.datetime.now(v=vs.110).aspx">DateTime.Now</a> is a static dependency on a class property and makes it hard for tests.
Even using a <a href="http://stackoverflow.com/a/2425739/1948745">static TimeProvider</a> and having overrides to set mocks for testing is not advised (also mentioned by Seemann in the <a href="http://stackoverflow.com/questions/2425721/unit-testing-datetime-now/2425739#comment38623763_2425739">comments</a>), as it creates problems for parallel tests execution.</p>

<blockquote><p><em>Inject a Time Provider into the consumer. Do not depend on any static time provider (including DateTime.Now)</em></p></blockquote>

<p>Refactoring the dependency with current time using a inject interface, <em>ITimeProvider</em>, makes setting the current day easy as shown in the tests below. I can now hard code my expected dates into the test code and not depend on a runtime generated list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineAutoMoqData(&quot;2016-04-02&quot;,&quot;2016-03-29&quot;, &quot;2016-03-30,2016-03-31,2016-04-01,2016-04-02&quot;)]</span>
</span><span class='line'><span class="na">[InlineAutoMoqData(&quot;2016-04-02&quot;, &quot;2016-04-02&quot;, &quot;&quot;)]</span>
</span><span class='line'><span class="na">[InlineAutoMoqData(&quot;2016-04-02&quot;, &quot;2016-04-01&quot;, &quot;2016-04-02&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">GetDatesToCalculateReturnsExpectedDates</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">todayString</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">lastProcessedDayString</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">expectedDaysString</span><span class="p">,</span>
</span><span class='line'><span class="na">    [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">ITimeProvider</span><span class="p">&gt;</span> <span class="n">timeProvider</span><span class="p">,</span>
</span><span class='line'><span class="na">    [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">IUsageRepository</span><span class="p">&gt;</span> <span class="n">usageRepository</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Location</span> <span class="n">dummyLocation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UsageDatesCalculator</span> <span class="n">sut</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="n">expectedDaysString</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;,&quot;</span> <span class="p">},</span> <span class="n">StringSplitOptions</span><span class="p">.</span><span class="n">RemoveEmptyEntries</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">lastProcessedDay</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">lastProcessedDayString</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">today</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">todayString</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">timeProvider</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">Now</span><span class="p">).</span><span class="n">Returns</span><span class="p">(</span><span class="n">today</span><span class="p">.</span><span class="n">Date</span><span class="p">);</span>
</span><span class='line'>    <span class="n">usageRepository</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">GetLastProcessedDateForLocation</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Location</span><span class="p">&gt;()))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">lastProcessedDay</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">GetDatesToCalculate</span><span class="p">(</span><span class="n">dummyLocation</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have refactored various dependencies that the original code had and made it more testable. Testing is easier and <a href="https://pragprog.com/magazines/2012-01/unit-tests-are-first">repeatable</a>. Whenever writing tests become difficult - stop, think and refactor!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Test Code: Removing Constructor Dependency]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-test-code-removing-constructor-dependency/"/>
    <updated>2016-03-31T04:18:03+11:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-test-code-removing-constructor-dependency</id>
    <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/toomore/23066277453" class="center" title="Image By Toomore Chiang, from https://www.flickr.com/photos/toomore/23066277453"><img src="http://rahulpnath.com/images\testing.jpg" class="center" alt="Testing"></a></p>

<p>In the earlier post, <a href="http://rahulpnath.com/blog/refactoring-to-improve-testability-removing-unnecessary-dependencies/">Removing Unnecessary Dependencies</a>, we saw how having an unnecessary dependency hinders testability. In this post we will see how the test code changed by the refactoring we did for removing the unnecessary dependency and explore ways to control these changes.</p>

<h3>Impact on Tests by the Refactoring</h3>

<p>The refactoring in the last post involved a change in the updating the constructor signature to take in a string value instead of an interface. This broke a lot of our tests and forced us to change all constructor usages with the below code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">anonymousName</span> <span class="p">=</span> <span class="s">&quot;Anonymous Name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">myService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyService</span><span class="p">(</span><span class="n">otherDependency</span><span class="p">,</span> <span class="n">anonymousName</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>When seen in isolation, this is not much a change, but as the number of tests grows it becomes a pain. This definitely does not feel right. Breaking tests forces us out of <a href="http://xunitpatterns.com/test%20first%20development.html">Test-First Development</a> and reduces the confidence in the tests and in the code.</p>

<blockquote><p><em>The idea behind TDD was <a href="http://www.jamesshore.com/Blog/Red-Green-Refactor.html">Red-Green-Refactor</a>. But if tests break when Refactoring, then why follow TDD at all?</em></p></blockquote>

<h3>Refactoring Tests</h3>

<p>Ideally, we should write tests that do not break when we refactor, so that it helps us to use the same tests over the refactored code. Let&rsquo;s see how we can improve the test code to prevent tests from breaking, when we refactor to <a href="http://rahulpnath.com/blog/refactoring-to-improve-testability-removing-unnecessary-dependencies/">remove unnecessary dependency</a>. Below is the original code (<em>rewritten into xUnit and Moq, as I prefer that</em>) with the dependency on IAppSettings (which we will change it to string later)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Fact]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">PerformOperationsShouldReturnTrue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">otherDependency</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IMyOtherDependency</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">appSettings</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IAppSettings</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="n">appSettings</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">[</span><span class="s">&quot;app.name&quot;</span><span class="p">]).</span><span class="n">Returns</span><span class="p">(</span><span class="s">&quot;My Test Application&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">myService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyService</span><span class="p">(</span><span class="n">otherDependency</span><span class="p">,</span> <span class="n">appSettings</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myService</span><span class="p">.</span><span class="n">PerformOperations</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">otherDependency</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">UtilityMethod</span><span class="p">(),</span> <span class="n">Times</span><span class="p">.</span><span class="n">Once</span><span class="p">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">True</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s analyze the test code for the dependencies that it has:</p>

<ul>
<li><em>UtilityMethod</em> of IMyOtherDependency</li>
<li><em>app.name</em> configuration value from IAppSettings</li>
<li><em>Constructor</em> of <a href="http://xunitpatterns.com/SUT.html">System Under Test</a>(SUT) - MyService</li>
<li><em>PerformOperations</em> of SUT which is getting tested</li>
</ul>


<p>The test by itself verifies that calling <em>PerformOperations</em> returns true and UtilityMethod gets called once. It is not dependent on the value (&lsquo;My Test Application&rsquo;) returned by appSettings. The only need is that it should return some (dummy) value when asked for &lsquo;app.name&rsquo;. Assuming that there are multiple tests in this class that does the same setup of IAppSettings to return a dummy value you can start smelling <em>Cut-and-Paste code reuse for fixture setup</em>.</p>

<blockquote><p><em>Rule of Three: “The first time you do something, you just do it. Second time you do something similar, you wince at the duplication, but you do the duplicate thing anyway. The third time you do something similar, you refactor.”</em></p></blockquote>

<p>The <a href="https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming">Rule of Three</a> is applicable even when writing test code and we should always keep an eye for duplication. <strong>It is easy to get lost in the thought that it&rsquo;s just test code and does not hurt to copy paste</strong>. Code duplication in test code does hurt and it hurts the most when you refactor production code.</p>

<p>So lets Refactor applying the <a href="http://www.refactoring.com/catalog/">various techniques</a> that we know of!</p>

<h4><strong><a href="http://www.refactoring.com/catalog/extractMethod.html">Extract Method</a></strong></h4>

<p><em>You have a code fragment that can be grouped together. Turn the fragment into a method whose name explains the purpose of the method.</em></p>

<p>Since we only depend on the <em>IMyOtherDependency</em> and the SUT instance instantiated with that, we can extract SUT creation with a given instance of IMyOtherDependency as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Fact]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">PerformOperationsShouldReturnTrue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">otherDependency</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IMyOtherDependency</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">myService</span> <span class="p">=</span> <span class="n">GetMyServiceWithMyOtherDependency</span><span class="p">(</span><span class="n">otherDependency</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myService</span><span class="p">.</span><span class="n">PerformOperations</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">otherDependency</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">UtilityMethod</span><span class="p">(),</span> <span class="n">Times</span><span class="p">.</span><span class="n">Once</span><span class="p">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">True</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">MyService</span> <span class="nf">GetMyServiceWithMyOtherDependency</span><span class="p">(</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">IMyOtherDependency</span><span class="p">&gt;</span> <span class="n">otherDependency</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">appSettings</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IAppSettings</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="n">appSettings</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">[</span><span class="s">&quot;app.name&quot;</span><span class="p">]).</span><span class="n">Returns</span><span class="p">(</span><span class="s">&quot;My Test Application&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">myService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyService</span><span class="p">(</span><span class="n">otherDependency</span><span class="p">,</span> <span class="n">appSettings</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">myService</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This starts taking us towards <strong><a href="http://martinfowler.com/bliki/ObjectMother.html">Object Mother Pattern</a></strong>. It looks good to start with and might work well if all we have is the same <a href="http://xunitpatterns.com/Fixture%20Setup%20Patterns.html">fixture setup</a>. But if we have a different kind of fixture setup, with more dependency and combinations of setup, we will soon have a lot of similar creational methods with different combinations of parameters  - <em>GetMyServiceWithMyOtherDependencyAndAppSettings,GetMyServiceWithAppSettings</em> etc. The problem with having different methods is that all of them are dependent on the SUT constructor and set the same properties, leading to code duplication again.</p>

<h4><strong><a href="http://www.refactoring.com/catalog/extractClass.html">Extract Class</a></strong></h4>

<p><em>You have one class doing work that should be done by two. Create a new class and move the relevant fields and methods from the old class into the new class.</em></p>

<p>With these new creational methods the test class is having more responsibility than it should actually have, so let&rsquo;s extract these creation methods into <em>MyServiceBuilder</em> class to see if we can further solve the problem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyServiceBuilder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IAppSettings</span> <span class="n">AppSettings</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IMyOtherDependency</span> <span class="n">OtherDependency</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MyServiceBuilder</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">appsettingsMock</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IAppSettings</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">appsettingsMock</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">[</span><span class="s">&quot;app.name&quot;</span><span class="p">]).</span><span class="n">Returns</span><span class="p">(</span><span class="s">&quot;My Test Application&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">AppSettings</span> <span class="p">=</span> <span class="n">appsettingsMock</span><span class="p">.</span><span class="n">Object</span><span class="p">;</span>
</span><span class='line'>        <span class="n">OtherDependency</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IMyOtherDependency</span><span class="p">&gt;().</span><span class="n">Object</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">MyService</span> <span class="nf">Build</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyService</span><span class="p">(</span><span class="n">OtherDependency</span><span class="p">,</span> <span class="n">AppSettings</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">MyServiceBuilder</span> <span class="nf">WithAppSettings</span><span class="p">(</span><span class="n">IAppSettings</span> <span class="n">appSettings</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">AppSettings</span> <span class="p">=</span> <span class="n">appSettings</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">MyServiceBuilder</span> <span class="nf">WithOtherDependency</span><span class="p">(</span><span class="n">IMyOtherDependency</span> <span class="n">otherDependency</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">OtherDependency</span> <span class="p">=</span> <span class="n">otherDependency</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This takes us to <strong><a href="http://www.natpryce.com/articles/000714.html">Test Data Builder Pattern</a></strong> and as we notice we have reduced the dependency on the MyService constructor to just one and only place where we need to change if the constructor signature changes. Since the <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">Cyclomatic Complexity</a> of <em>MyServiceBuilder</em> is one it is fine not to write tests for it   . Using the new builder class our original test case now looks like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Fact]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">PerformOperationsShouldReturnTrue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">otherDependency</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IMyOtherDependency</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">myService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyServiceBuilder</span><span class="p">().</span><span class="n">WithOtherDependency</span><span class="p">(</span><span class="n">otherDependency</span><span class="p">.</span><span class="n">Object</span><span class="p">).</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myService</span><span class="p">.</span><span class="n">PerformOperations</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">otherDependency</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">UtilityMethod</span><span class="p">(),</span> <span class="n">Times</span><span class="p">.</span><span class="n">Once</span><span class="p">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">True</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the test is just dependent on the objects that it needs. If all the test use <em>MyServiceBuilder</em>, we can now easily refactor to <a href="http://rahulpnath.com/blog/refactoring-to-improve-testability-removing-unnecessary-dependencies/">Remove the Unnecessary Dependency</a> on IAppSettings, by just changing the <em>MyServiceBuilder</em> to use a string property. We will also need to change tests that use the <em>WithAppSettings</em> method which is expected, as those tests are dependent on the app settings value in the first place and so the tests definitely need to be re-written.</p>

<h3>Generic Test Data Builder</h3>

<p>We could have essentially stopped at the above step, but then we realize that it is too much work to create a Test Data Builder class for each of the production code classes that we have. It takes a lot out of the <a href="http://keysleft.com/">finite number of keystrokes left in your hands</a> and you definitely don&rsquo;t want to waste that in typing redundant code. This is where we can use
<a href="https://github.com/AutoFixture/AutoFixture">AutoFixture</a>, that is an open source library for .NET that helps reduce the <a href="http://xunitpatterns.com/Four%20Phase%20Test.html">Setup</a>/<a href="http://c2.com/cgi/wiki?ArrangeActAssert">Arrange</a> phase. Using <a href="http://blog.ploeh.dk/2010/10/08/AutoDataTheorieswithAutoFixture/">AutoData Theories with AutoFixture</a> our test case now looks like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory, AutoMoqData]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">PerformOperationsShouldReturnTrue</span><span class="p">(</span>
</span><span class='line'><span class="na">    [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">IMyOtherDependency</span><span class="p">&gt;</span> <span class="n">otherDependency</span><span class="p">,</span>
</span><span class='line'>    <span class="n">MyService</span> <span class="n">myService</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myService</span><span class="p">.</span><span class="n">PerformOperations</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">otherDependency</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">UtilityMethod</span><span class="p">(),</span> <span class="n">Times</span><span class="p">.</span><span class="n">Once</span><span class="p">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">True</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test code does not have any dependency on the constructor of the SUT and a change in constructor signature does not affect our tests at all. We can refactor <em>MyService</em> and use the same tests as long as the functionality served by the class remains the same. Constructors are implementation details and it&rsquo;s better to keep tests independent of it. This keeps our test code clean and more robust!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring to Improve Testability: Removing Unnecessary Dependencies]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-to-improve-testability-removing-unnecessary-dependencies/"/>
    <updated>2016-03-28T04:27:03+11:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-to-improve-testability-removing-unnecessary-dependencies</id>
    <content type="html"><![CDATA[<p><a href="https://unsplash.com/photos/5Ntkpxqt54Y" class="center" title="Image By Sai Kiran Anagani, from https://unsplash.com/photos/5Ntkpxqt54Y"><img src="http://rahulpnath.com/images\refactoring.jpg" class="center" alt="Refactoring"></a></p>

<p>Nowadays I am trying to stick to <a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">TDD</a> (with the test first approach) and have found it to be of great help. One of the biggest reward doing TDD is that it helps me to <a href="https://vimeo.com/97419151">stay in the flow</a> and regain speed faster after a distraction. This post explains how to refactor code to remove unnecessary dependencies, which is easily found when writing tests.</p>

<p>Unnecessary dependencies are those components which a <a href="http://xunitpatterns.com/SUT.html">SUT</a> depends on, but does not directly affect any of its functionalities. Some of the common tests smell (from XUnit Test Patterns by Gerard Meszaros, <a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/">a recommended read</a>) that helps me to find these dependencies are <a href="http://xunitpatterns.com/Test%20Code%20Duplication.html">Test Code Duplication</a> and <a href="http://xunitpatterns.com/Fragile%20Test.html">Fragile Tests</a>.</p>

<blockquote><p><em>Cut-and-Paste code reuse for fixture setup happens often when there is an unnecessary dependency.</em></p></blockquote>

<p>While looking for an example to write on, I came across a post from my friend <a href="https://twitter.com/zpbappi">Bappi</a>, where he explains <a href="http://zpbappi.com/testing-codes-with-configurationmanager-appsettings/">Testing Codes with ConfigurationManager</a>. It&rsquo;s a good read on how to remove the dependency with various Configuration Providers by creating an abstraction over it.</p>

<h3>Testability Issues with Current Design</h3>

<p>While abstracting the Configuration Manager by using an interface is a good idea, you should also be careful on how the application classes depend on it. Configurations live at the application root and it is a good idea to restrict dependencies with it at that level. Rest of the application must be dependent only on the configuration value and not the configuration itself. Inner components having dependency with the  configuration provider brings in unnecessary complexities and makes code fragile. Some common issues are</p>

<ul>
<li>Class needs to know of Configuration key</li>
<li>Extra mocking while testing</li>
</ul>


<p>As you see below, the test case from the original post has to set up the Configuration provider mock to return values before testing the class. MyService (assuming that it is not a Factory class, which I confirmed from Bappi) is unnecessarily depending on IAppSettings and coupling itself with the configuration name, which really is not its concern. This leads to brittle code and tests!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Subject(typeof(MyService))]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyServiceTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Establish</span> <span class="n">context</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">otherDependency</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IMyOtherDependency</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">appSettings</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IAppSettings</span><span class="p">&gt;();</span>
</span><span class='line'>            <span class="n">appSettings</span><span class="p">[</span><span class="s">&quot;app.name&quot;</span><span class="p">].</span><span class="n">Returns</span><span class="p">(</span><span class="s">&quot;My Test Application&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">myService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyService</span><span class="p">(</span><span class="n">otherDependency</span><span class="p">,</span> <span class="n">appSettings</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Because</span> <span class="n">of</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myService</span><span class="p">.</span><span class="n">PerformOperations</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">It</span> <span class="n">should_call_my_dependency_utility_method_once</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">otherDependency</span><span class="p">.</span><span class="n">Received</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">UtilityMethod</span><span class="p">();</span>
</span><span class='line'>    <span class="n">It</span> <span class="n">should_execute_successfully</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ShouldBeTrue</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Refactoring the Code</h3>

<p>Refactoring such code is as easy as removing the dependency on IAppSettings and taking in the value of &lsquo;app.name&rsquo; as the dependency. This removes the interface dependency and requires only the string value to be passed in. Here I am passing in <a href="https://blogs.msdn.microsoft.com/ploeh/2008/11/17/anonymous-variables/">an anonymous Name</a>, as the value is not of concern for this test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Subject(typeof(MyService))]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyServiceTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Establish</span> <span class="n">context</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">otherDependency</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IMyOtherDependency</span><span class="p">&gt;();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">anonymousName</span> <span class="p">=</span> <span class="s">&quot;Anonymous Name&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">myService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyService</span><span class="p">(</span><span class="n">otherDependency</span><span class="p">,</span> <span class="n">anonymousName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Because</span> <span class="n">of</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">result</span> <span class="p">=</span> <span class="n">myService</span><span class="p">.</span><span class="n">PerformOperations</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">It</span> <span class="n">should_call_my_dependency_utility_method_once</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">otherDependency</span><span class="p">.</span><span class="n">Received</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">UtilityMethod</span><span class="p">();</span>
</span><span class='line'>    <span class="n">It</span> <span class="n">should_execute_successfully</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ShouldBeTrue</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>When looked at isolation these are minor code changes that hardly removes a line or two. But it has a cumulative effect when applied to all the tests for the class and makes code more robust.</em></p></blockquote>

<p>When looked at isolation, this is a seemingly minor change of not mocking an interface and is just one line of code, which you could live with. But you need to mock that for all tests of that class, which is when you start to see the real benefit. Also, you have made the tests more resilient by not taking an unnecessary dependency. Even if you decide to change the configuration name to &lsquo;<em>ApplicationName</em>&rsquo;, none of the tests break now, whereas with the original code all of them would have.</p>

<p><em>One possible argument with this refactoring is, <strong> What if I need an extra value from the dependency (app.domain in the above case), I now have to update the class constructor</strong>.</em></p>

<p>Agreed, but then this violates <a href="https://blog.8thlight.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html">Open Closed Principle</a>, which states &lsquo;You should be able to extend a classes behaviour without modifying it.&rsquo; If you need a new configuration value, you are essentially changing the components functionality, so you should either extend current functionality or write a new component. This also opens up a hidden code smell with the existing code and an anti-pattern - <a href="http://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/">Service Locator</a>. So the refactoring still holds good!</p>

<p>Hope this helps you find dependencies with unnecessary components and remove them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being Explicit About Time when Handling Multiple Timezone]]></title>
    <link href="http://rahulpnath.com/blog/being-explicit-about-time-when-handling-multiple-timezone/"/>
    <updated>2016-03-25T06:41:03+11:00</updated>
    <id>http://rahulpnath.com/blog/being-explicit-about-time-when-handling-multiple-timezone</id>
    <content type="html"><![CDATA[<p><em>This article is to put my thoughts together on a possible solution. Challenges of real world implementation are yet to be discovered.</em></p>

<p>Handling date/time in application&rsquo;s that affect different time zones is tricky! The general recommendation is that all dates be saved in UTC time and convert them as required. This works well if developers make sure of converting all dates to UTC at application boundaries and keep it consistent throughout the application.</p>

<p><a href="https://unsplash.com/photos/yBzrPGLjMQw" class="center" title="Image By Heather Zabriskie , from https://unsplash.com/photos/yBzrPGLjMQw"><img src="http://rahulpnath.com/images\timezone.jpg" class="center" alt="Timezone"></a></p>

<p>At one of my clients, we are facing similar issues with date time, with an application that deals with different <a href="https://en.wikipedia.org/wiki/Time_zone">time zones</a>. The client sells office spaces across the globe and the application is for their employees to manage their clients. It integrates with various back-end systems and provides a single point of access for everything, aggregating data across those different  systems and itself. Some of the backend systems are in different locations and deal with times local to them. This increases the challenge when sending and retrieving data from them. The application has defined a set of locations, identified by, three-letter codes (<em>SYD, TRV, SEA</em>), and these locations fall under different time zones. Office spaces are at these locations and the application allows to manage those from anywhere.</p>

<p>Across the domain, we use either <a href="https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx">DateTime</a> or <a href="https://msdn.microsoft.com/en-us/library/system.datetimeoffset(v=vs.110).aspx">DateTimeOffset</a> to represent time - there is a good recommendation on when to use what - <a href="https://msdn.microsoft.com/en-us/library/bb384267(v=vs.110).aspx">Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo</a>. The problem with using either is that it does not play well with the domain concept to where time is related to - the location. We do have property name suffixes (not consistent though) indicating whether it is Coordinated Universal Time (UTC) or local - like <em>bookingDateUTC</em>, <em>paymentDateLocal</em> etc. But it so happens that these naming conventions gets broken somewhere along the different layers and leads to conversion between time zone at the application boundary layers.</p>

<h3>Issues with Current Approach</h3>

<p>DateTime and DateTimeOffset have by default time zones attached to it and it might go unnoticed till we face issues.</p>

<ul>
<li>The <a href="https://msdn.microsoft.com/en-us/library/system.datetime.kind(v=vs.110).aspx">Kind</a> property on DateTime indicates whether the time represents a <a href="https://msdn.microsoft.com/en-us/library/shx7s921(v=vs.110).aspx">local time, UTC or neither</a>.</li>
<li>The <a href="https://msdn.microsoft.com/en-us/library/system.datetimeoffset.offset(v=vs.110).aspx">Offset</a> property on DateTimeOffset indicates the time&rsquo;s offset from UTC</li>
</ul>


<p>A common scenario in the current application is user selects a date time in the UI using a date picker, which gets send to the server as a string. This value flows through the entire system and is used to populate external systems. The problem here is that the time zone of the date time is not clear. The developer might treat this as UTC time, system local time or even time local to the location in context. This gives different results to the end user and puts the system in an inconsistent state.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetAvailability</span><span class="p">(</span><span class="kt">string</span> <span class="n">locationCode</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">dateTime</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Code to Get as on date</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even worse this date time might get converted back and forth to different time zones, even by the same developer or other developers in the team. These conversions implicitly depend on the Kind property and goes unnoticed. One of the most common problems that we see as a result of this is that the dates might fall over to a day before or after or after, depending on where in the world the user, the server running the application is.</p>

<h3>Being Explicit Using Value Objects</h3>

<blockquote><p><em>The issue in dealing with time is about not being explicit. It&rsquo;s a good idea to tie your domain concept (location in this case) and time together</em></p></blockquote>

<p>Since time is always tied to a location (<em>SYD, TRV, SEA</em>) it&rsquo;s better to keep these together. Though DateTimeOffset and DateTime already has a timezone information attached it does not fit well into the domain, it makes more sense to have a <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Object</a> encapsulating time and location. Timezone by itself is less likely to fit into a domain unless time zones are a domain concept. Most likely the domain would be dealing with a location, place, airport, station etc which falls under a timezone. So it&rsquo;s a good idea to tie your domain concept and the time together. Only for the creation of the Value Object, we need the location after which it is the date time it represents that is relevant. But if by default you want to get back the date time for the same location it was created for, then location can be saved along with the Value Object. In our case, we always want to show the time at the location, so I am keeping it in the Value Object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">LocationDateTime</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Location</span> <span class="n">Location</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">DateTimeInUTC</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTimeOffset</span> <span class="n">DateTimeAtLocation</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">LocationDateTime</span><span class="p">(</span><span class="n">Location</span> <span class="n">location</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">dateTimeUTC</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">location</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">location</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">dateTimeUTC</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">dateTimeUTC</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">dateTimeUTC</span><span class="p">.</span><span class="n">Kind</span> <span class="p">!=</span> <span class="n">DateTimeKind</span><span class="p">.</span><span class="n">Utc</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;Date Time not in UTC&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Location</span> <span class="p">=</span> <span class="n">location</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DateTimeInUTC</span> <span class="p">=</span> <span class="n">dateTimeUTC</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DateTimeAtLocation</span> <span class="p">=</span> <span class="n">TimeAtLocation</span><span class="p">(</span><span class="n">Location</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">LocationDateTime</span> <span class="nf">AtLocation</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">locationDateTime</span><span class="p">,</span> <span class="n">Location</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">locationDateTime</span><span class="p">.</span><span class="n">Kind</span> <span class="p">!=</span> <span class="n">DateTimeKind</span><span class="p">.</span><span class="n">Unspecified</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;DateTimeKind should be unspecified&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">utcTime</span> <span class="p">=</span> <span class="n">TimeZoneInfo</span><span class="p">.</span><span class="n">ConvertTimeToUtc</span><span class="p">(</span><span class="n">locationDateTime</span><span class="p">,</span> <span class="n">location</span><span class="p">.</span><span class="n">TimeZoneInfo</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">LocationDateTime</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">utcTime</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTimeOffset</span> <span class="nf">TimeAtLocation</span><span class="p">(</span><span class="n">Location</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TimeZoneInfo</span><span class="p">.</span><span class="n">ConvertTime</span><span class="p">((</span><span class="n">DateTimeOffset</span><span class="p">)</span><span class="n">DateTimeInUTC</span><span class="p">,</span> <span class="n">location</span><span class="p">.</span><span class="n">TimeZoneInfo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">objAsLocationDateTime</span> <span class="p">=</span> <span class="n">obj</span> <span class="k">as</span> <span class="n">LocationDateTime</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">System</span><span class="p">.</span><span class="n">Object</span><span class="p">)</span><span class="n">objAsLocationDateTime</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">objAsLocationDateTime</span><span class="p">.</span><span class="n">DateTimeInUTC</span> <span class="p">==</span> <span class="n">DateTimeInUTC</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">DateTimeInUTC</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Value Object mandates that all date time gets tracked as UTC and allows conversion to time at different locations. The public constructor enforces this by checking the Kind property on DateTime.</p>

<blockquote><p><em>The Value Object Equality is only on the UTC time it represents</em></p></blockquote>

<p><a href="https://github.com/rahulpnath/Blog/blob/master/ExplicitAboutDateTime/ExplicitAboutDateTime/Location.cs">Location</a> is another Value Object, that encapsulates the code, name and the time zone it belongs to. There is a factory method that allows the creation of the value object at a location, which assumes any passed in DateTime as the time at location, and mandates the Kind property is Unspecified. You could update this to accept UTC/Local time depending on the passed in location&rsquo;s time zone, checking if both fall under the same time zone. You can also create an implicit operator to cast to DateTime or DateTimeOffset values and have it return the desired date time value that you want.</p>

<p>All occurrences of datetime in model classes can now be replaced with custom datetime value object. This makes creating a date explicit and mandates developers to make a decision on the location of datetime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">string</span> <span class="n">locationCode</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">dateTimeAtLocation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">location</span> <span class="p">=</span> <span class="n">GetLocation</span><span class="p">(</span><span class="n">locationCode</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">locationDateTime</span> <span class="p">=</span> <span class="n">LocationDateTime</span><span class="p">.</span><span class="n">AtLocation</span><span class="p">(</span><span class="n">dateTimeAtLocation</span><span class="p">,</span> <span class="n">location</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Code to Get as on date</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even with the above code, you cannot restrict what gets passed into the API/application boundary method, but this has made it explicit to the application on how to start treating the date time. This forces the developer to think and be explicit on the time format expected at the boundary. This might lead to better naming of the variables at the boundary - instead of <em>dateTime</em> to <em>dateTimeAtLocation</em> - and being more explicit to the outside world too!</p>

<h3>Custom Factories Using Extension Method</h3>

<p>Depending on the use case there will be a lot of ways you want to create the value object and possibility of some being used over and over again is more. You can use factory methods to help you extract out this code duplication.</p>

<p>As <a href="https://twitter.com/unclebobmartin">Uncle Bob</a> points out in <a href="http://www.amazon.in/gp/product/0131857258/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0131857258&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=VVMXRINDZWYFRWP4">Agile Principles, Patterns, and Practices in C#</a>, interfaces should be closer to the client. <a href="http://blog.ploeh.dk/2014/12/24/placement-of-abstract-factories/">Factories are nothing but an interface</a>, so it should be defined closer to where it&rsquo;s consumed. Creating a LocationDateTime is always tied to a DateTime object. Using <a href="https://msdn.microsoft.com/en-AU/library/bb383977.aspx">Extension Methods</a> in C#, I have defined an extension on DateTime to create a LocationDateTime object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">LocationDateTime</span> <span class="nf">ToLocationDateTime</span><span class="p">(</span><span class="k">this</span> <span class="n">DateTime</span> <span class="n">dateTime</span><span class="p">,</span> <span class="n">Location</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dateTime</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">location</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">location</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">LocationDateTime</span><span class="p">.</span><span class="n">AtLocation</span><span class="p">(</span><span class="n">dateTime</span><span class="p">,</span> <span class="n">location</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now creating a LocationDateTime from a DateTime is easy. Similarly, extension methods can be defined on Location, LocationDateTime to provide custom capabilities as required by the consuming clients.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">locationDateTime</span> <span class="p">=</span> <span class="n">dateTimeAtLocation</span><span class="p">.</span><span class="n">ToLocationDateTime</span><span class="p">(</span><span class="n">location</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using a Value Object to represent the DateTime within the application enforces developers to be more explicit on the date time at the boundaries, results in better naming of the variables at boundaries, ensures that it remains the same within the application. You can also override some of the most commonly used operators with DateTime like greater than, less than, equal to, so that it seamlessly fits into the application.</p>

<p>Hoping this will work well in the application too, let me get on to fix it!</p>

<p><em>Will update this post with more real life experiences once implemented!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PFX Certificate in Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/pfx-certificate-in-azure-key-vault/"/>
    <updated>2016-03-18T12:21:03+11:00</updated>
    <id>http://rahulpnath.com/blog/pfx-certificate-in-azure-key-vault</id>
    <content type="html"><![CDATA[<p><a href="http://perspecsys.com/" class="center" title="Image By Perspecsys Photos, from https://www.flickr.com/photos/111692634@N04/15855489588"><img class="center" alt="Security" src="http://rahulpnath.com/images\pfx_security.jpg" /></a></p>

<p>You can use PFX certificate&rsquo;s along with Azure Key Vault in multiple ways, depending on your use case. You can import the PFX as a Key into Key Vault and use it just like you would use any other key or save it as a Secret and retrieve it as required. In this post I will explain how this is done.</p>

<p>Before I get into more details let&rsquo;s take a moment to understand better the different file types used and <a href="http://stackoverflow.com/questions/2292495/what-is-the-difference-between-a-cer-pvk-and-pfx-file">what they represent</a>.</p>

<ul>
<li><p><strong>CER</strong>: Contains the public part of the certificate and usually distributed outside.</p></li>
<li><p><strong>PVK</strong>: Contains the Private key and securely stored</p></li>
<li><p><strong>PFX</strong>: Usually has public, private keys, other certificate chains and password protected.</p></li>
</ul>


<p>To create a test certificate for this sample I will use <em>makecert</em> and <em>pvktopfx</em> utilities. Alternatively, you could also use any existing certificate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>makecert -sv mykey.pvk -n &quot;cn=Certificate Key&quot; CertificateKey.cer -b 03/03/2016 -e 06/05/2017 -r -sky exchange
</span><span class='line'>pvk2pfx -pvk mykey.pvk -spc CertificateKey.cer -pfx CertificateKey.pfx -po test
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The <em>-sky exchange</em> sets the Subject Key Type to Exchange and allows encrypting/decrypting values using the certificate.</p></blockquote>

<p>The <em>makecert</em> creates the CER and PVK, the public/private key files which gets combined into a single PFX file using <em>pvktopfx</em>.</p>

<h3>Using the PFX Certificate to Encrypt and Decrypt</h3>

<p>PFX files along with CER files allows to encrypt/decrypt data without the need for Key Vault. You can share the public key, CER, to your clients, who can then use it to encrypt data before sending it to the server. Using the private key, available in PFX, the server can decrypt this data</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Client</span>
</span><span class='line'><span class="kt">byte</span><span class="p">[]</span> <span class="n">encryptedData</span><span class="p">;</span>
</span><span class='line'><span class="c1">// You can also use the PFX here as it contains the private key</span>
</span><span class='line'><span class="kt">var</span> <span class="n">publicCertificate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">X509Certificate2</span><span class="p">(</span><span class="s">@&quot;C:\CertificateKey.cer&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">cryptoProvider</span> <span class="p">=</span> <span class="n">publicCertificate</span><span class="p">.</span><span class="n">PublicKey</span><span class="p">.</span><span class="n">Key</span> <span class="k">as</span> <span class="n">RSACryptoServiceProvider</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">byteData</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">textToEncrypt</span><span class="p">);</span>
</span><span class='line'>    <span class="n">encryptedData</span> <span class="p">=</span> <span class="n">cryptoProvider</span><span class="p">.</span><span class="n">Encrypt</span><span class="p">(</span><span class="n">byteData</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Server</span>
</span><span class='line'><span class="kt">var</span> <span class="n">privateCertificate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">X509Certificate2</span><span class="p">(</span><span class="s">@&quot;C:\CertificateKey.pfx&quot;</span><span class="p">,</span> <span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">cryptoProvider</span> <span class="p">=</span> <span class="n">privateCertificate</span><span class="p">.</span><span class="n">PrivateKey</span> <span class="k">as</span> <span class="n">RSACryptoServiceProvider</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">decryptedData</span> <span class="p">=</span> <span class="n">cryptoProvider</span><span class="p">.</span><span class="n">Decrypt</span><span class="p">(</span><span class="n">encryptedData</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">decryptedText</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">decryptedData</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Creating a Key in Key Vault from PFX file</h3>

<p>Now that I am able to use the PFX file (which essentially is a software-protected key) to encrypt/decrypt data, I will upload this to the Azure Key Vault so that it stays secure there. If you are new to Azure Key Vault and want to get started check my <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">other posts</a>.</p>

<p>To upload the PFX to Key Vault, you can use the <em><a href="https://msdn.microsoft.com/en-us/library/dn868048.aspx">Add-AzureKeyVaultKey</a></em> PowerShell cmdlet and specify the PFX file path and password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$securepfxpwd</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="err">–</span><span class="n">String</span> <span class="s1">&#39;test&#39;</span> <span class="err">–</span><span class="n">AsPlainText</span> <span class="err">–</span><span class="n">Force</span>
</span><span class='line'><span class="nb">Add-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="s1">&#39;rahulkeyvault&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;KeyFromCert&#39;</span> <span class="n">-KeyFilePath</span> <span class="s1">&#39;c:\CertificateKey.pfx&#39;</span> <span class="n">-KeyFilePassword</span> <span class="nv">$securepfxpwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the unique key identifier, I can now access this key from PowerShell or using the Web API. You can still distribute the public key, CER, to your clients for encrypting the data and use the Azure Key Vault API to decrypt the data. Or use the Azure Key Vault to encrypt and decrypt the data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">keyIdentifier</span> <span class="p">=</span> <span class="s">&quot;https://rahulkeyvault.vault.azure.net:443/keys/KeyFromCert/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Client Remains the same or use the Key Vault Client</span>
</span><span class='line'><span class="kt">var</span> <span class="n">encryptedResult</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">EncryptAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">,</span> <span class="s">&quot;RSA-OAEP&quot;</span><span class="p">,</span> <span class="n">byteData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Server</span>
</span><span class='line'><span class="kt">var</span> <span class="n">decryptedData</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">DecryptAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">,</span> <span class="s">&quot;RSA-OAEP&quot;</span><span class="p">,</span> <span class="n">certED</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">decryptedText</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">decryptedData</span><span class="p">.</span><span class="n">Result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The PFX file uploaded to the Key Vault is just like any other key vault key, the only difference being you give the public and private key. Once the key is created in Key Vault, the private part of the key stays secure within the Key Vault and is not accessible outside (except from the original PFX/PVK file).</p>

<h3>Storing PFX file as a Secret</h3>

<p>PFX files can also be stored as Secrets in Key Vault which allows you to retrieve and re-create the certificate as required. To add the certificate as a secret you can use the below PowerShell script (taken from <a href="http://stackoverflow.com/questions/33728213/how-to-store-pfx-certificate-in-azure-key-vault">here</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$pfxFilePath</span> <span class="p">=</span> <span class="s1">&#39;C:\CertificateKey.pfx&#39;</span>
</span><span class='line'><span class="nv">$pwd</span> <span class="p">=</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="nv">$flag</span> <span class="p">=</span> <span class="no">[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]</span><span class="p">::</span><span class="n">Exportable</span>
</span><span class='line'><span class="nv">$collection</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2Collection</span>
</span><span class='line'><span class="nv">$collection</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$pfxFilePath</span><span class="p">,</span> <span class="nv">$pwd</span><span class="p">,</span> <span class="nv">$flag</span><span class="p">)</span>
</span><span class='line'><span class="nv">$pkcs12ContentType</span> <span class="p">=</span> <span class="no">[System.Security.Cryptography.X509Certificates.X509ContentType]</span><span class="p">::</span><span class="n">Pkcs12</span>
</span><span class='line'><span class="nv">$clearBytes</span> <span class="p">=</span> <span class="nv">$collection</span><span class="p">.</span><span class="n">Export</span><span class="p">(</span><span class="nv">$pkcs12ContentType</span><span class="p">)</span>
</span><span class='line'><span class="nv">$fileContentEncoded</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$clearBytes</span><span class="p">)</span>
</span><span class='line'><span class="nv">$secret</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="n">-String</span> <span class="nv">$fileContentEncoded</span> <span class="n">-AsPlainText</span> <span class="err">–</span><span class="n">Force</span>
</span><span class='line'><span class="nv">$secretContentType</span> <span class="p">=</span> <span class="s1">&#39;application/x-pkcs12&#39;</span>
</span><span class='line'><span class="nb">Set-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="s1">&#39;rahulkeyvault&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;PfxFile&#39;</span> <span class="n">-SecretValue</span> <span class="nv">$Secret</span> <span class="n">-ContentType</span> <span class="nv">$secretContentType</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script exports the certificate to a byte array and converts it to Base64 string representation and saves it to Key Vault as Secret using the <a href="https://msdn.microsoft.com/en-us/library/dn868050.aspx">Set-AzureKeyVaultSecret</a> PowerShell cmdlet. You can export the certificate along with the password if required, so that when you recreate the certificate file, it will be password protected.</p>

<p>To retrieve and re-create the certificate you can either use PowerShell or API as shown below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$secretRetrieved</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="s1">&#39;rahulkeyvault&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;PfxFile&#39;</span>
</span><span class='line'><span class="nv">$pfxBytes</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="nv">$secretRetrieved</span><span class="p">.</span><span class="n">SecretValueText</span><span class="p">)</span>
</span><span class='line'><span class="no">[io.file]</span><span class="p">::</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="s2">&quot;c:\CertFromSecret.pfx&quot;</span><span class="p">,</span> <span class="nv">$pfxBytes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">secretRetrieved</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">GetSecretAsync</span><span class="p">(</span><span class="n">secretIdentifier</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">pfxBytes</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">FromBase64String</span><span class="p">(</span><span class="n">secretRetrieved</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'><span class="n">File</span><span class="p">.</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="s">@&quot;C:\cert\ADTestVaultApplicationNew.pfx&quot;</span><span class="p">,</span> <span class="n">pfxBytes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or recreate the certificate directly</span>
</span><span class='line'><span class="kt">var</span> <span class="n">certificate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">X509Certificate2</span><span class="p">(</span><span class="n">pfxBytes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use the PFX certificate as earlier as a file or a certificate object. These are the various ways that you can use PFX certificated along with Key Vault.</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Learnings from the IKEA Experience]]></title>
    <link href="http://rahulpnath.com/blog/developer-learnings-from-the-ikea-experience/"/>
    <updated>2016-03-16T05:44:03+11:00</updated>
    <id>http://rahulpnath.com/blog/developer-learnings-from-the-ikea-experience</id>
    <content type="html"><![CDATA[<p>When we moved over to Sydney, last year, we had to start over with all the home furnishings. Since we were just starting out, didn&rsquo;t want to spent a lot on furnishings, so decided to go with <a href="http://www.ikea.com/au/en/?cid=au|ps|branded|brand|google|ikea_australia">IKEA</a> for its cost effectiveness and value for money.</p>

<blockquote><p><em>IKEA is a multinational group of companies that designs and sells ready-to-assemble furniture (such as beds, chairs and desks), appliances, small motor vehicles and home accessories. <span class="right">Wiki</span></em></p></blockquote>

<p>Right from the in-shop experience to setting it up, I found many similarities with the IKEA experience and Software Development. Visiting IKEA is an experience in itself and totally wow&rsquo;s you. If not for any of the displayed items, the &lsquo;<em>Self Serve Furniture Area</em>&rsquo; surely will. The sheer size and setup there was breath-taking for me and my wife!</p>

<figure>
    <img alt="IKEA Self Serve Furniture Area, Ikea Tempe" src="http://rahulpnath.com/images/ikea_self_serve_furniture_area.jpg" />
    <figcaption><em>This is just one of the aisle and there were around 35 of them!</em></figcaption>
</figure>


<h3>Code Management &amp; Inventory Management</h3>

<p>Throughout the <a href="https://shoutsfromtheabyss.files.wordpress.com/2013/06/ikea-map.jpg">Showroom</a> you see an <em>Aisle number</em> and the <em>Location</em> displayed under the displayed items. For the items interested in, one can note those numbers on paper or use the mobile application to <a href="http://www.ikea.com/ms/en_KR/customer-service/apps/mobile_app_14.html">scan the QR code of the product</a> for reference. In the checkout area, you can find the item at the said aisle/location number. Finding and picking up the item from the aisle is easy and joyful.</p>

<p>Code management is an important aspect in Software development, as code bases can get quite large. Setting up a <a href="https://github.com/">version control</a> to manage code bases have become a norm and is a good practice to follow even on your side projects. Few other things to follow include</p>

<ul>
<li>Maintain a project structure, naming conventions and code conventions.</li>
<li>Code Navigability and discoverability are important for fast and smooth development. Good and descriptive class names allow us to navigate easily based on the application functionality.</li>
<li><a href="https://msdn.microsoft.com/en-us/library/893ke618(v=vs.71).aspx">Organizing Namespace</a></li>
<li>Remove unused code and not comment it out. Let the version control system take care of file history.</li>
</ul>


<h3>Manual</h3>

<p>The assembly instructions that comes with each package is clear and expressive. It&rsquo;s mostly <a href="http://www.ikea.com/au/en/assembly_instructions/malm-desk__AA-516949-7_pub.pdf">conveyed through pictures</a> and easy to follow through. The manual is up to date with the packaged product and matched exactly with the contents.</p>

<p>This shows the importance of having a <a href="https://en.wikipedia.org/wiki/README">README</a> file or software manuals or in context help for users to use the application. Feedback messages and keeping the user always connected with the system is also important. Long wait times, unresponsive progress bars, silent suppression of error messages are not acceptable. Error messages are for the application user and the level and kind of details differs based on who the user is:</p>

<ul>
<li>For business/non-technical users, mostly of Front-end applications, Business error messages makes more value than technical errors</li>
<li>For developers consuming an API, detailed technical error messages add value than just returning a &lsquo;500 - Internal Server Error&rsquo;</li>
</ul>


<p>Error messages must be relevant and up to date with the current functionality. Always review messages for appropriateness.</p>

<p>Code comments used for communicating intent mostly gets out of sync with what the code actually does. So it&rsquo;s a better practice to avoid comments in code and break code into descriptive function and classes to convey the intent.</p>

<blockquote><p><em><a href="http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode">A comment is an apology</a> for not choosing a more clear name or a more reasonable set of parameters, or for the failure to use explanatory variables and explanatory functions.</em></p></blockquote>

<h3>Tools</h3>

<p><img class="left" alt="IKEA Tools" src="http://rahulpnath.com/images/ikea_tools.jpg" /></p>

<p>The <a href="http://www.ikea.com/us/en/catalog/products/00169254/">FIXA 17-piece tool kit</a>, is all that you need for fitting all the furniture. Some products have an <a href="https://en.wikipedia.org/wiki/Hex_key">Allen Key</a> packaged along with them, but otherwise, most of the time the FIXA toolkit is all that one needs.</p>

<p>Having the <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">right set of tools</a> for assisting in the development and being familiar with it is important.  It&rsquo;s not just about having the best/costliest tools, but about knowing them well. Taking some time out to understand the tools that you use daily is important. By tools, I include keyboard, mouse, programming languages, IDE&rsquo;s and other support software that you use daily.</p>

<div style="clear: both;"></div>


<blockquote><p><em><a href="http://blog.codinghorror.com/we-are-typists-first-programmers-second/">We are Typists First, Programmers Second</a>: The keyboard is one of the most important tools for a developer - learn it well</em></p></blockquote>

<h3>Componentization</h3>

<p>The furniture comes as separate pieces that can be easily assembled, with all the screw holes of perfect size. All the different pieces fit perfectly and right even when done by an amateur. Though some of the pieces required two people to fix, I could fix them up myself. It was all cut to perfection with all the holes right in place and fits perfectly the first time.</p>

<p>Having well-defined interfaces that interact with each other seamlessly is important in software development. Any application should be composed of smaller parts that can fit together well. Adhering to good design principles and design patterns helps us to achieve this.</p>

<blockquote><p><em>One of the most important principles while using Object Oriented  languages is <strong><a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">SOLID</a></strong>:   <br/>
  Single Responsibility, Open-Closed, Liskov Substitution, Interface segregation and Dependency Injection</em></p></blockquote>

<p><img class="center" alt="IKEA Components" src="http://rahulpnath.com/images/ikea_components.jpg" /></p>

<p>Interfaces should be well-defined and not <a href="https://en.wikipedia.org/wiki/Leaky_abstraction">leak abstractions</a>. The name and parameters(input/return) should completely abstract the &lsquo;how&rsquo; part of the functionality and expose only the &lsquo;what&rsquo;. This helps to build more robust interfaces.</p>

<h3>Packaging and Shipping</h3>

<p><a href="http://www.wsj.com/articles/ikea-cant-stop-obsessing-about-its-packaging-1434533401">IKEA&rsquo;s efficiency in packaging</a> is one of the reasons that enables them to sell at a low-cost and they keep improving at it. Compact and small packages make it easy to handle right from &lsquo;self-checkout&rsquo; to unpacking it at your home. It also helps in optimizing transportation costs for IKEA which in turn enables them to reduce prices.</p>

<figure>
    <img alt="IKEA Packaging" src="http://rahulpnath.com/images/ikea_packed.jpg"></img>
    <figcaption><em>King size bed frame with storage, extendable dining table and four chairs!</em></figcaption>
</figure>


<p></p>

<p>Deployment in software development is a key part and having the entire pipeline automated is essential for a smooth delivery. <a href="http://www.rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/">Setting up a build server, automated building, running tests</a> etc are some of the starting points to move towards <a href="http://martinfowler.com/bliki/ContinuousDelivery.html">Continuous Delivery</a>. Deployment needs to be scripted and be possible to deploy to any environment at the click of a button. If it is a distributable software then easily accessible delivery mechanisms should be available and preferably offer multiple options (like distributable media, server hosted images etc like Windows)</p>

<blockquote><p><em>The package has just the right number of screws, nails and other assembly accessories - not one less, not one more!</em></p></blockquote>

<p><img class="center" alt="IKEA Components" src="http://rahulpnath.com/images/ikea_assembly_accessories.jpg" /></p>

<p>This shows IKEA&rsquo;s confidence in the shipped product and the self-belief of nothing going wrong. For a software product to be shipped with this level of confidence it should be thoroughly tested - preferably automated, which allows verifying each time we make a release and allows us to release more often.</p>

<h3>Cost Effective</h3>

<p>Having always bought pre-assembled furniture I have never had to think about anything - it was always just about the money. But with IKEA being self-assembled, you get the flexibility to choose the components/features that you need for the furniture like you could choose to have a <a href="http://www.ikea.com/au/en/catalog/products/20228714/">headboard for the bed</a> or not, which obviously implies a reduced price. You could choose to self-checkout and pay nothing, but also do a paid checkout, where an IKEA member would get all the items out for you to the billing counter. You could transport it yourself to your home or <a href="http://www.ikea.com/ms/en_AU/customer_service/ikea_services/home_delivery.html">get it delivered</a>. So it&rsquo;s all about giving you the options to choose what you want and really keep the cost low.</p>

<p>Keeping the cost low is an important aspect in software industry too and at various levels</p>

<ul>
<li>Development and Licensing  costs - Try to keep these costs low, by looking for open source alternatives and choosing your technology wisely and not just looking for the &lsquo;cool and latest&rsquo;.</li>
<li>Deployment/Infrastructure costs - Build applications for scale and as independent services so that they can be  turned on and off  as required. <a href="https://azure.microsoft.com/en-us/">The cloud</a> has greatly reduced the infrastructure setup costs and provides an easy way for setup. Make sure you understand well the pricing models offered by various cloud providers.</li>
<li>Software Costs/Subscription Costs: Give flexibility to your consumers in how they can consume your software. Keeping functionality loosely coupled and pluggable allows to offer various subscription plans or selling model.</li>
</ul>


<h3>Value Added Services</h3>

<p>It&rsquo;s not just in the home furnishings and their core business that IKEA has taken great care for. The other <a href="http://www.ikea.com/ms/en_SG/service-offer/">Value Added Services</a> they offer like Delivery, Assembly, Planning Tools, Gift Cards, Children&rsquo;s Services and Return Policy are top-notch.</p>

<blockquote><p><em>Users are happy when the expected works, and wowed when it goes beyond expectations.</em></p></blockquote>

<p>The <a href="http://www.ikea.com/au/en/catalog/categories/departments/food/">food at IKEA</a> is worth mentioning (and a picture) - low-priced and tasty! It caters for the needs of all kinds of people and age. The value for money attracts people to IKEA just for the food.</p>

<p><img alt="IKEA Components" src="http://rahulpnath.com/images/ikea_food.jpg" /></p>

<p>Any product should deliver what it&rsquo;s supposed to anyways, but it&rsquo;s in providing a bit extra that really matters. Like the few examples below,that gave a better experience to me</p>

<ul>
<li>When you hit Ctrl + V with an image in clipboard on Facebook it automatically uploads the image</li>
<li>When Amazon sent a replacement for my broken Kindle (all the way from the US to India) for free</li>
<li>When Google Now showed the <a href="https://support.google.com/websearch/answer/6015842?hl=en">parking location</a>.</li>
<li>The IKEA Experience!</li>
</ul>


<p>Strive to look for cases where you can delight your customers every time you deliver a product. The IKEA has made me think about delivering products and the need for constantly improving at it. We often need to take a stop, look at what we are doing and correct things and move forward.</p>

<blockquote><p><em>The only way to make the deadline—the only way to go fast—is to keep the <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=CVCVZFAR5SBYVMJW">code as clean</a> as possible at all times.</em></p></blockquote>

<p>Head off to an IKEA store if there is one <a href="http://www.ikea.com/">near you</a> and get wowed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking Beyond Primitive Values: Value Objects]]></title>
    <link href="http://rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/"/>
    <updated>2016-03-11T05:49:03+11:00</updated>
    <id>http://rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects</id>
    <content type="html"><![CDATA[<p>When modelling objects for our application, we use primitive values to represent their attributes or properties. By primitive values, I refer to all the primitive types (like Byte, Boolean, Int, Date) and the in-built types (String etc.) that the language supports. These are the most basic types of the programming language and are the building blocks to create custom types.</p>

<h3>Primitive Types and Associated Problems</h3>

<p>When modelling classes for the domain, one of the most common things we do is to fit domain concepts into primitive types. For example</p>

<ul>
<li><strong>String</strong> to represent Names (Employee name, Company Name, Product Name, Car Name etc.)</li>
<li><strong>Int/Decimal/Double/Float</strong> to represent Numbers (Age, Quantity, Money, Temperature, Distance, Upload/Download sizes etc.)</li>
</ul>


<p>Those are just a few examples on how we &lsquo;usually&rsquo; fit domain concepts into primitive types. This kind of design tends to take us more towards procedural programming, as shown below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">phoneNumber</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Lot of other code</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">isExtensionPhoneNumber</span> <span class="p">=</span> <span class="n">phoneNumber</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">phoneNumber</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;=</span><span class="m">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this is that these constraints/logics tends to leak across the code-base and we run into problems either not handling this at certain places, handling them wrongly or any changes to these constraints ripples across the code.</p>

<h3>Value Object</h3>

<p>A common factor in all the above examples is that those domain concepts follow value equality and not reference equality. Just like two strings or integers compares with each other based on their value, two names, temperature, color all compare against each other based on their value. This is where a Value Object fits in well.</p>

<blockquote><p><em><a href="http://martinfowler.com/bliki/ValueObject.html">Value Object</a> is an object whose equality is determined by the value it holds and are immutable.</em></p></blockquote>

<p>Below is a Value Object implementation of &lsquo;UserName&rsquo; where we have the domain constraint that name should not be empty and at least be three characters (not a real world scenario, but just for an example). The Equals and GetHashCode methods below ensures that the equality comparison is based on the value that it holds. One could also <a href="https://msdn.microsoft.com/en-au/library/ms173147(v=vs.80">override the &lsquo;==&rsquo; and &lsquo;!=&rsquo; operator</a>.aspx) if you want to support those.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">UserName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="kt">string</span> <span class="n">internalName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">UserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;</span> <span class="m">3</span><span class="p">)</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;Name should be atleast 3 characters long&quot;</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">internalName</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">objAsName</span> <span class="p">=</span> <span class="n">obj</span> <span class="k">as</span> <span class="n">UserName</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">System</span><span class="p">.</span><span class="n">Object</span><span class="p">)</span><span class="n">objAsName</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">internalName</span> <span class="p">==</span> <span class="n">objAsName</span><span class="p">.</span><span class="n">internalName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">internalName</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no restriction on the number of parameters that a value object should be composed of. Equality and Hashcode should use all the values that it composes of. For immutability, we have made the <em>internalName</em> (in above case ) a private variable. You could also have it as public read-only property if you scenario demands, like in case of DateRange Value Object. Making the setters private and checking end date is not greater than the start date while construction, helps  protect the <a href="http://people.cs.aau.dk/~normark/oop-csharp/html/notes/contracts_themes-class-inv-sect.html">class invariants</a>. In addition to that, any update to start or end date should create a new DateRange object as WithEndDate does below.</p>

<blockquote><p><em>A class invariant is an assertion that captures the properties and relationships, which remain stable throughout the life-time of instances of the class.</em></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRange</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">StartDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">EndDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">startDate</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Ignoring null checks</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">endDate</span> <span class="p">&lt;</span> <span class="n">startDate</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;End Date cannot be less than Start Date&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">=</span> <span class="n">startDate</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">EndDate</span> <span class="p">=</span> <span class="n">endDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateRange</span> <span class="nf">WithEndDate</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DateRange</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">StartDate</span><span class="p">,</span> <span class="n">endDate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Rest of Value Object Code to override Equals and GetHashCode</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Thinking as Value Objects</h3>

<p>In the beginning, it is hard to see Value Objects in your domain, but then there is an easy trick that you can follow.</p>

<blockquote><p><em>Any time you use a primitive type (unless within a Value Object) think more about the choice.</em></p></blockquote>

<p>Once you start using more and more Value Objects you will naturally get good at it and be able to start to see more of it in your domain.</p>

<ul>
<li>Look for co-existing properties, that always go together (like start date and end date, first name and last Name), and try to model them as Value Objects.</li>
<li>Any property that has a unit of measurement associated needs the value and the measurement unit together (Money, Temperature, Distance, Upload/Download size etc.), and is likely a Value Object.</li>
<li>Properties that have structural restrictions like Phone Number, Zip Code, email etc.</li>
</ul>


<p>Extracting these into Value Objects helps pull in a lot of &lsquo;<em>procedural code</em>&rsquo; into the Value Object, as shown below. Even if the extension numbers  format changes, we have a single place to contain this change and can avoid a rippling change. We can also have static factory methods to assist in creating these Value Object and helps make the code readable like the <em>CreateFromBytes</em> method below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">PhoneNumber</span> <span class="n">phoneNumber</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Lot of other code</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">.</span><span class="n">IsAnExtension</span><span class="p">())</span>
</span><span class='line'><span class="p">...</span> <span class="c1">//Rest of code</span>
</span><span class='line'>
</span><span class='line'><span class="kt">decimal</span> <span class="n">downloadBytes</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">downloadedData</span> <span class="p">=</span> <span class="n">UnitOfData</span><span class="p">.</span><span class="n">CreateFromBytes</span><span class="p">(</span><span class="n">downloadBytes</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Lot of other code</span>
</span><span class='line'><span class="n">downloadedData</span><span class="p">.</span><span class="n">GetSizeInMegabytes</span><span class="p">();</span>
</span><span class='line'><span class="p">...</span> <span class="c1">//Rest of code</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Implicit and Explicit Conversions</h3>

<p>Introducing a Value Object to an existing code base might seem challenging, as it might be all over the code and a hard task to replace all at once. In cases where the Value Object replaces a single property existing in a class like a string name, phoneNumber, location etc., we can take advantage of the <a href="https://msdn.microsoft.com/en-us/library/z5z9kes2.aspx">implicit conversion operators</a>, to introduce new Value Objects gradually. Let&rsquo;s say you have a Name field that is a string and you want to move this over to a Value Object &lsquo;UserName&rsquo;. We can declare an implicit operator to convert between string and UserName, which helps us gradually change over to the new ValueObject</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">implicit</span> <span class="k">operator</span> <span class="nf">UserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">UserName</span><span class="p">(</span><span class="n">userName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">implicit</span> <span class="k">operator</span> <span class="nf">string</span><span class="p">(</span><span class="n">UserName</span> <span class="n">userName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">userName</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;userName&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">userName</span><span class="p">.</span><span class="k">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">internalName</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implicit operator enables us to use UserName and string side-by-side and it will automatically convert between them without any explicit casts. This enables us to start anywhere in the application and start replacing the Primitive Value types into Value Objects without breaking the application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">lastName</span> <span class="p">=</span> <span class="s">&quot;Nath&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">UserName</span> <span class="n">firstName</span> <span class="p">=</span> <span class="s">&quot;Rahul&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">string</span> <span class="n">fullNameString</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0} {1}&quot;</span><span class="p">,</span> <span class="n">firstName</span> <span class="p">,</span> <span class="n">lastName</span><span class="p">);</span>
</span><span class='line'><span class="n">UserName</span> <span class="n">fullName</span> <span class="p">=</span> <span class="n">fullNameString</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the application boundaries, if the data is serialized into different formats (JSON/XML) or persisted into ORM&rsquo;s (Entity Framework/NHibernate) you need to add <a href="http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonConverter.htm">custom serialization formatters</a> or <a href="https://msdn.microsoft.com/en-au/data/jj591617.aspx">mapping configurations</a> to make sure that the Value Object gets serialized/persisted as expected.</p>

<p>Value Objects helps model the domain better and keeps code more readable. It also helps you change domain constraints or rules more easily and keeps them contained. Consider introducing a value object the next time you see one!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Fiddler to help in Manual Testing]]></title>
    <link href="http://rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing/"/>
    <updated>2016-03-07T17:33:03+11:00</updated>
    <id>http://rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing</id>
    <content type="html"><![CDATA[<p>Fiddler is an HTTP debugging proxy server application, that captures HTTP and HTTPS traffic and displays to the user. It also enables modifying HTTP traffic when sent or received. Fiddler is <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of the tools that I use daily</a> and is an indispensable one for any web developer.</p>

<p>This post gives an introduction on how you can use fiddler to help with &lsquo;manual testing&rsquo;. We will see how to use Fiddler to create requests to Web API,  modify and replay an existing request. We will also see how to test error scenarios to see how the application functions in those cases. The sample solution is the default Web API project in Visual Studio with a few changes.</p>

<h3>Composing a Request</h3>

<p>When testing API&rsquo;s to see how it behaves with various inputs, one often needs to send in different parameters. Fiddler allows composing new requests and  modifying existing ones.</p>

<p>Using the Fiddler composer window (shown in the image below), we can create new requests from scratch and execute them. It provides two modes to create requests:</p>

<ul>
<li>Parsed : This is an assisted form to create requests</li>
<li>Raw : This allows to create raw http requests and issue them.</li>
</ul>


<p>Fiddler also allows saving raw requests in the Scratchpad tab to execute as and when required. On clicking Execute Fiddler creates an HTTP request from the entered data and sends to the server. To modify requests you can either drag and drop the request from the displayed URL&rsquo;s list into the composer tab or right-click on an entry and <em>Unlock for Editing</em> (keyboard shortcut - F2). After making the changes to the request in the Inspector window, right-click on the request again to Replay -> Reissue ( R).</p>

<p><img class="center" alt="Fiddler Composer tab" src="http://rahulpnath.com/images/fiddler_composer.png" /></p>

<h3>Testing Error Cases</h3>

<p>Testing error cases is tricky, especially from a UI level. Things usually don&rsquo;t go wrong in the development/testing environment and <a href="http://blog.codinghorror.com/the-works-on-my-machine-certification-program/">almost never on a developers machine</a> which makes it very hard to test for cases where something does not work. Fiddler makes it easy to test error scenarios with <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder">AutoResponder</a>, which allows returning handcrafted responses for requests, without actually hitting the server.</p>

<p>To create an auto response for a URL, select the URL from the URL&rsquo;s list and drag it into the AutoResponder tab or select the URL and click on Add Rule button on AutoResponder tab, which will create a new rule. By default Fiddler creates a rule with an exact match (Exact:) with the selected URL. Fiddler supports different <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#matching-rules">matching rules</a> which include regular expression matches. A list of default response text are available to choose from to respond to requests that match the URL matching rule. We can also create a custom response and save it for reuse. The next time a request with matching URL is found the custom response gets returned to the caller.</p>

<blockquote><p><em>Make sure that the &lsquo;Unmatched requests passthrough&rsquo; option is true in the AutoResponder tab to make sure that all other requests pass through to the server.</em></p></blockquote>

<p><img class="center" alt="Fiddler AutoResponder tab" src="http://rahulpnath.com/images/fiddler_autoresponder.png" /></p>

<p>To create a custom response, choose &lsquo;Create a New Response&rsquo; or &lsquo;Find a file&rsquo; (if you already have the response saved in a text file). You can save custom responses in the <em>ResponseTemplates</em> folder in the root folder of Fiddler installation, to have them populated in the AutoResponder tab. When editing existing response data, make sure properties like Content-Length reflects the correct values. You can also set a <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#latency">Latency</a> for the response, to simulate response coming from a server. RIght click on the rules for the Set Latency option and enter the value in milliseconds.</p>

<p>With the AutoResponder set to matching URL, we can easily have it return error codes or simulated error messages to test how the UI handles them. You don&rsquo;t have to depend on &lsquo;actual server errors&rsquo; to test if the UI handles error correctly. You can use this to test how application behaves with different return values by mocking with valid custom responses.  Fiddler provides richer capabilities of using scripts to <a href="http://docs.telerik.com/fiddler/KnowledgeBase/FiddlerScript/ModifyRequestOrResponse">modify a request or response</a>.</p>

<p>Hope this helps you get started with using Fiddler for testing and manipulating requests/responses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated ClickOnce Deployment of a WPF Application using Appveyor]]></title>
    <link href="http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/"/>
    <updated>2016-03-04T12:00:03+11:00</updated>
    <id>http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor</id>
    <content type="html"><![CDATA[<p>This post covers the current deployment setup of <a href="https://github.com/rahulpnath/clal">CLAL</a>(Command Line Application Launcher), a desktop application, that I am building. Since it is a WPF application, it supports <a href="https://msdn.microsoft.com/en-us/library/t71a733d.aspx">ClickOnce Deployment</a> that enables to create self-updating applications which can install with minimum interaction from the user. ClickOnce supports different <a href="https://msdn.microsoft.com/en-us/library/71baz9ah.aspx">deployment strategy</a> of which distributing it through the web is quite popular as it makes software distribution easier. It works well when the software size is not large so that application installation is faster. For CLAL, there are two deployments served from Azure: <a href="http://www.rahulpnath.com/clal/Releases/commandlineapplicationlauncherui.application">Latest stable build</a> and the <a href="http://www.rahulpnath.com/clal/Latest/commandlineapplicationlauncherui.application">Current build</a>.</p>

<p>I did not want to do manually, the entire deployment process of building the solution, running all the tests, creating the ClickOnce package and pushing it up to Azure, I decided to automate this. Since <a href="https://www.appveyor.com/">Appveyor</a>, a hosted distributed continuous integration service used to build and test projects, is free for open-source projects and integrates very well with application developed on the Windows platform.</p>

<h3>Setting up Appveyor project</h3>

<p>Setting up Appveyor to read from Github is very easy. Once you authorize access to Github, Appveyor lists all the projects that you have in your Github account. After selecting a project, it creates a <a href="https://ci.appveyor.com/project/rahulpnath/clal">&lsquo;build project&rsquo;</a> for that in Appveyor, where you can control all build related activities. Appveyor automatically pulls in your latest source code from the repository, when a build triggers. Build configurations can be specified using a <a href="https://www.appveyor.com/docs/appveyor-yml">configuration file</a> (appveyor.yml) living at the repository root or using the user interface. For CLAL I exclusively use the configuration from the file and the latest version is available <a href="https://github.com/rahulpnath/clal/blob/master/appveyor.yml">here</a>.
Primarily there are two branches (<em>master</em> and <em>development</em>) on the git repository which builds as the latest stable and current build. Since these two deployments have few attributes different (like the version numbers, deployment URL, update URL), I use <a href="https://www.appveyor.com/docs/branches#conditional-build-configuration">conditional build configuration</a> to have separate configuration properties for the branches.</p>

<p>The primary things that vary for the different deployments are a few ClickOnce publishing properties, the version number, the build configurations - release/debug and the deployment locations. We will see in detail below how we handle this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span>
</span><span class='line'>  <span class="l-Scalar-Plain">branches</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">only</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>  <span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.2.2.0</span>
</span><span class='line'>  <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">assemblies</span><span class="p-Indicator">:</span> <span class="s">&#39;**\*.*Test.dll&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">configuration</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Release</span>
</span><span class='line'>  <span class="c1"># Rest of the configuration</span>
</span><span class='line'>  <span class="p-Indicator">-</span>
</span><span class='line'>  <span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.2.2.{build}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">assemblies</span><span class="p-Indicator">:</span> <span class="s">&#39;**\*.*Test.dll&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">configuration</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Debug</span>
</span><span class='line'>  <span class="c1"># Rest of the configuration</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ClickOnce Publish Profile</h3>

<p>To create the publish profile, I used the Visual Studio Publish option on the project, which generates all the <a href="https://msdn.microsoft.com/en-us/library/ms165431.aspx#Anchor_2">Publishing Properties</a>. Most of these values remain the same across all deployment version (release and development). For the ones that are unique to the deployment version like the PublishUrl, UpdateUrl, and ApplicationVersion I removed them from <em>csproj</em> file. The deployment version specific properties is set in the Appveyor configuration file and used by the build script to set the right values.</p>

<p><img class="center" alt="ClickOnce publish settings" src="http://rahulpnath.com/images/clickonce_publishsetting.png" /></p>

<p>In the Appveyor configuration, the <a href="https://www.appveyor.com/docs/build-configuration#script-blocks-in-build-configuration">before_build</a> step these values are set as environment variables, which gets <a href="http://help.appveyor.com/discussions/questions/980-custom-msbuild-property">automatically passed into the MSBuild as Properties</a>. The certificate required for signing ClickOnce manifest gets installed during this step.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'> <span class="l-Scalar-Plain">before_build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">nuget restore src\CommandLineApplicationLauncher.sln</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ps</span><span class="p-Indicator">:</span> <span class="s">&quot;$env:ApplicationVersion=$env:APPVEYOR_BUILD_VERSION;$env:UpdateUrl=&#39;http://www.rahulpnath.com/clal/Releases/&#39;;</span>
</span><span class='line'>    <span class="s">$env:PublishUrl=&#39;http://www.rahulpnath.com/clal/Releases/&#39;;$mypwd</span><span class="nv"> </span><span class="s">=</span><span class="nv"> </span><span class="s">ConvertTo-SecureString</span><span class="nv"> </span><span class="s">-String</span><span class="nv"> </span><span class="s">\&quot;/(Z&amp;rbrFG){p/6W@8xZvg\&quot;</span><span class="nv"> </span><span class="s">-Force</span>
</span><span class='line'>    <span class="s">–AsPlainText\nImport-PfxCertificate</span><span class="nv"> </span><span class="s">–FilePath</span>
</span><span class='line'>    <span class="s">C:\\projects\\clal\\src\\CommandLineApplicationLauncherUI\\CommandLineApplicationLauncherUI_TemporaryKey.pfx</span><span class="nv"> </span><span class="s">cert:\\currentuser\\my</span><span class="nv"> </span><span class="s">-Password</span><span class="nv"> </span><span class="s">$mypwd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Versioning</h3>

<p>I am using <a href="http://semver.org/">semantic versioning</a> and wanted to control the version numbers for the releases explicitly. Since ClickOnce supports only four digit version numbers, the last one always defaults to zero in the release version. For Current build (development) deployments, the fourth place is used to maintain the build number, so that I can support different build version in development. I use a <a href="https://www.appveyor.com/docs/build-configuration#build-versioning">sequential number generated by appveyor</a> and set in the configuration file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.2.2.{build}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a  release I run the below script on the master branch, which updates the version number across the source code files and then push the changes to Github, which triggers a build to the updated version. Then I merge back the master into development so that the next build on development branch would be a build number off the latest released version. The script uses <a href="https://github.com/ploeh/ZeroToNine">ZeroToNine</a> for updating AssemblyInfo files and updates the version numbers in the Appveyor configuration files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">param</span><span class="p">([</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Mandatory</span><span class="p">=</span><span class="nv">$true</span><span class="p">)]</span><span class="no">[string]</span><span class="nv">$version</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Update All AssemblyInfo file versions</span>
</span><span class='line'><span class="nv">$z29</span> <span class="p">=</span> <span class="s2">&quot;./ExternalTools/ZeroToNine/Zero29.exe&quot;</span>
</span><span class='line'><span class="p">&amp;</span><span class="nv">$z29</span> <span class="n">-a</span> <span class="nv">$version</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Update Appveyor.yml</span>
</span><span class='line'><span class="p">((</span><span class="nb">Get-Content</span> <span class="p">./</span><span class="n">Appveyor</span><span class="p">.</span><span class="n">yml</span> <span class="p">|</span> <span class="nb">Out-String</span><span class="p">)</span>
</span><span class='line'><span class="o">-replace</span> <span class="s2">&quot;version: .*\.0&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;version: &quot;</span> <span class="p">+</span> <span class="nv">$version</span> <span class="p">+</span> <span class="s2">&quot;.0&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">-replace</span> <span class="s2">&quot;version: .*\.{build}&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;version: &quot;</span> <span class="p">+</span> <span class="nv">$version</span> <span class="p">+</span> <span class="s2">&quot;.{build}&quot;</span><span class="p">)).</span><span class="n">Trim</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">`r`n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">|</span> <span class="nb">Set-Content</span> <span class="n">-NoNewline</span> <span class="n">Appveyor</span><span class="p">.</span><span class="n">yml</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Artifacts and Deployment</h3>

<p>The csproj file of the WPF application has <em>Publish</em> also as a default target, which results in a publish everytime the project is build. By default, the publish directory is in the bin folder under a subdirectory <em>app.publish</em>. Appveyor allows specifying folders as <a href="https://www.appveyor.com/docs/packaging-artifacts">artifacts</a>, which marks all the files under them as artifacts. The below script is for the latest stable build and marks it with a name &lsquo;releaseBuild&rsquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'> <span class="l-Scalar-Plain">after_build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ps</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">$root = Resolve-Path .\src\CommandLineApplicationLauncherUI\bin\Release\app.publish;</span>
</span><span class='line'>    <span class="-Error"> </span><span class="p-Indicator">[</span><span class="nv">IO.Directory</span><span class="p-Indicator">]</span><span class="l-Scalar-Plain">::GetFiles($root.Path, &#39;*.*&#39;, &#39;AllDirectories&#39;) | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName releaseBuild }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Appveyor allows to <a href="https://www.appveyor.com/docs/deployment">deploy using multiple providers</a> and <a href="https://www.appveyor.com/docs/deployment/ftp">FTP</a> is one of them. I use this to deploy the artifcats generated to an Azure FTP from which I serve the installer. This is currently hosted on my blog domain. The password for the FTP location is <a href="https://ci.appveyor.com/tools/encrypt">encrypted using the Appveyor tool</a>. The below configuration pushes all the artifacts with the name &lsquo;releaseBuild&rsquo; to the FTP folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FTP</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ftps</span>
</span><span class='line'>    <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">waws-prod-sg1-003.ftp.azurewebsites.windows.net</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rahulpnath\rahulpnath</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">secure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">YOmcTqGUyjYpJOKAnOAfO30hb59cCBTy+Otlj+qrcAo=</span>
</span><span class='line'>    <span class="l-Scalar-Plain">folder</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/site/wwwroot/clal/Releases</span>
</span><span class='line'>    <span class="l-Scalar-Plain">artifact</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">releaseBuild</span>
</span></code></pre></td></tr></table></div></figure>


<p>With each push into the Github repository now we have Appveyor listening to it, pulling the latest source code, installing the code signing certificate for ClickOnce, building and running all tests in the project, publish the ClickOnce application, packaging and deploying this to the Azure FTP. There is a completely automated deployment pipeline and makes it easy to publish updates to <a href="https://github.com/rahulpnath/clal">CLAL</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Freelancing Jobs Online]]></title>
    <link href="http://rahulpnath.com/blog/getting-started-with-freelancing-jobs-online/"/>
    <updated>2016-03-01T11:57:03+11:00</updated>
    <id>http://rahulpnath.com/blog/getting-started-with-freelancing-jobs-online</id>
    <content type="html"><![CDATA[<p>Freelancing is a good way to learn new technology, get some hands on experience and not getting limited to the technology stack at your full-time job and of course earn some extra money!. There is a great demand for developers out there, so if its &lsquo;legal&rsquo; (check with your employer, if you already have another full-time job) for you to freelance then give it a try. There are a lot of online freelance platforms(<a href="https://www.upwork.com/">Upwork</a>, <a href="https://www.freelancer.com/">Freelancer</a>) that connects businesses and developers remotely. These platforms enable you as a developer, to start a profile and bid for jobs of your interest. If the business/client finds you as a match for the job, then you get signed up and can start working immediately.</p>

<p>Easy right! Yes absolutely it is, but here are a few things that might help you through the journey, that I have learned from my experiences.</p>

<p><img class="center" alt="Freelancer" src="http://rahulpnath.com/images/freelancing.jpg" /></p>

<h3><strong>Finding work</strong></h3>

<p>Finding work is just an easy search across on the platforms with your preferred skills. It will be a good idea to stick to one of the platforms so that you can build up a profile and then move on to other platforms. Landing your first job as a freelancer could be tricky as clients have a tendency to look for people with some work record on the platform, which assures them that it is a &lsquo;real human&rsquo; that they are talking to. But this is kind of &lsquo;chicken and egg problem&rsquo;. One of the best way to break into your first job is to sell yourself low - Yes, you heard it right - Really low!</p>

<p>While I started on with the idea of freelancing, I took on it with the perspective of that of an experienced developer(as I had a full-time job, which was paying me decently well). I bid on all projects with a relatively higher amount or at par to that my current job was paying, until I received back the below email from one of the clients.</p>

<blockquote><p><em>You lack test scores, have a small portfolio, and have no <a href="https://www.upwork.com">Odesk</a> history. You should try to underbid and get jobs when you are building up odesk history, get good feedback and then raise your rates later.I see you have good qualifications and don&rsquo;t mean you are not worth what you charge, this is just a way to get more clients in the beginning</em></p></blockquote>

<p>It&rsquo;s not always that you get a reply like this and it was an eye-opener for me. So to get the ball rolling, I tried bidding low on a couple of bug fix project which was about 1-2 hours work. Luckily I got one of the jobs and from then followed the exact feedback that I got back - Slowly increase rates and build profile.When bidding lower always make sure that you do on projects of smaller size, so that you don&rsquo;t feel really bad selling yourself low midway through the project (you could always renegotiate, but it might affect the feedback).</p>

<h3><strong>Bidding</strong></h3>

<p>Bidding is an important part of the freelancing cycle. Make sure you put in as much details to put across that you are an ideal candidate. It&rsquo;s where your skills to sell yourself come into play. Make sure you convey through the reasons on the &lsquo;Why&rsquo;,&lsquo;What&rsquo; and &lsquo;How&rsquo; in your bid cover letter.</p>

<blockquote><p><em>Approach bidding the same way you would attend an interview with a prospective employer.</em></p></blockquote>

<ul>
<li><strong>Why</strong> you are interested in the project</li>
<li><strong>What</strong> makes you a good candidate and your experiences. It will be good to have some references to existing projects/applications/blogs to back your claims.</li>
<li><strong>How</strong> you would approach the problem at hand and some questions probing more details.</li>
</ul>


<p>Many a times we have a tendency to copy paste bid cover letters and clients might look for specific references to their project. There are also clients who ask to start/end the bid with specific words or phrases just to make sure you have at least read through the job description.</p>

<h3><strong>Communication</strong></h3>

<p>Communication is the key when working remotely. Keeping your clients/stakeholders up to date on what&rsquo;s happening in the project, calling out any risks associated and clarifying on any issues should be done promptly. Your bid cover letter is the first impression that you leave on the client on your communications skills. So that makes it an added reason to give enough time while sending out your bid.</p>

<blockquote><p><em>Missing a deadline is not really a problem, but not communicating it up front is.</em></p></blockquote>

<p>It&rsquo;s a good idea to set a rhythm to your updates and also sticking on to an update format, so that client knows how and when to expect for things. This will also allow them to plan for work. If working on hourly jobs, it would also be a good idea to set up repositories to share code or other artifacts that you are working on. <a href="https://github.com">Github</a> (paid for private repositories), <a href="https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx">Visual Studio Online</a> (VSO) or <a href="https://bitbucket.org">Bitbuket</a> (free with limits for private repositories) are good providers that you can use. Using <a href="https://trello.com">Trello</a> boards or <a href="https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx">VSO</a> for managing work/tasks will give enough visibility to clients on the current status at any point in time.</p>

<h3><strong>Hourly vs Fixed Price</strong></h3>

<p>When starting out it might be a good idea to start with an hourly project, so that you get introduced to various aspects of freelancing and get used to it. Once comfortable with the overall life cycle you can try fixed price projects. The challenge with fixed price projects, is in getting the scope fixed and making sure that you have accounted for all possible work. Also in tactfully raising cost variations when the client changes from agreed scope or when you discover work that you had not estimated for. Having cost change costs quite often does not put across a good message, so do that wisely and only when absolutely required. Even on hourly projects, there is nothing wrong in negotiating with the per-hour rate, especially if the project is a long running one.</p>

<p>Understand how the payment terms and conditions associated with the platform works. Some platforms have the <a href="https://en.wikipedia.org/wiki/Escrow">escrow</a> model, so the risk of loosing out on money is less. For hourly projects, some platforms have tools that automatically track the amount of time you work on a project and directly bill the clients card once in a week/month, in which case you are sure to receive the payment (unless the client raises a conflict). For cases where none of the above applies, make sure that you have payment milestones set at different phases of the project and you share the code/working product only once you receive payments for milestones. Sharing videos, pictures, live remote sessions could be some alternatives to prove milestone criteria.</p>

<h3><strong>Branding</strong></h3>

<p>Proving your metal is tough if you are just starting out freelancing. Having some experiences to show case is valuable when bidding for projects. When I started off freelancing, my intention was to learn Windows Phone and Windows 8 Modern application development. Since the platform was relatively new then, I started off with a side project <a href="https://www.microsoft.com/en-us/store/apps/picfinity/9wzdncrdwxx8">Picfinity</a>, to showcase my capabilities. Building the application also helped me generate a <a href="http://www.rahulpnath.com/blog/tag/500px/">few blog posts</a> around these areas and I used both of above to showcase my ability to build applications for the Windows platform. This also helped me increase my hourly rates at a faster pace.
Branding is an ongoing effort that you need to do when freelancing, which indirectly enables you to increase your rates over time. <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">Writing blogs</a>, creating reusable libraries, contributing on forums, etc. are some of the things that help with this.</p>

<p>From the experiences gained from these freelancing platforms you will soon be able to move to consulting on your own or join premium freelancing platforms like <a href="www.toptal.com">Toptal</a>, <a href="http://x-team.com/">Xteam</a>, etc. You could also stick on with these platforms and learn new technologies while getting paid. At the very least I see that it has helped me generate content for my blogs (as I still struggle with topics to blog about).</p>

<p>Hope this helps you to get started with freelancing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Azure Key Vault from a Java Application]]></title>
    <link href="http://rahulpnath.com/blog/using-azure-key-vault-from-a-java-application/"/>
    <updated>2016-02-27T14:56:03+11:00</updated>
    <id>http://rahulpnath.com/blog/using-azure-key-vault-from-a-java-application</id>
    <content type="html"><![CDATA[<p>Azure Key Vault service is a cloud hosted, HSM(Hardware Security Modules)-backed service for managing cryptographic keys and other secrets. With Azure Key Vault, the process of managing and controlling the keys required for an application or multiple applications for an enterprise can be handled at a centralized place. If you are new to Key Vault, read the <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">Getting Started with Azure Key Vault</a>. Access to Key Vault is primarily using <a href="https://msdn.microsoft.com/en-us/library/dn868052.aspx">PowerShell</a> or the <a href="https://msdn.microsoft.com/en-us/library/azure/dn903609.aspx">REST API</a>. There are client API libraries available for <a href="https://github.com/Azure">various platforms</a> that wraps around the REST API, including one for <a href="https://github.com/Azure/azure-sdk-for-java/tree/master/services/keyvault">Java</a>. There have been some asks from my blog readers on how to use the Java SDK as there are no samples available, and this post is a result of that!</p>

<p>The Java Key Vault SDK provides a <a href="https://github.com/Azure/azure-sdk-for-java/blob/8bd59520544cf7471f8b3c2e3f9e577e68ff2852/services/keyvault/azure-keyvault/src/main/java/com/microsoft/azure/keyvault/KeyVaultClientService.java">KeyVaultClientService</a> to create a <a href="https://github.com/Azure/azure-sdk-for-java/blob/8bd59520544cf7471f8b3c2e3f9e577e68ff2852/services/keyvault/azure-keyvault/src/main/java/com/microsoft/azure/keyvault/KeyVaultInternalClientImpl.java">KeyVaultClient</a>, to interact  with the Key Vault. The SDK is available as a Maven package and is available for download <a href="http://search.maven.org/#search%7Cga%7C1%7Ckeyvault">here</a>. Setting up a project to try this will be a quickie for someone who is already working on Java, but I struggled a bit with the IDE and getting the packages into the project. (Likely the sample solution attached at the end is not the best way to get things working, but it works!. Do drop by a comment if there are better/easier ways.)</p>

<p><a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">Authenticating a client application with Azure Key Vault</a> is using an Azure AD application. You can create an AD application either from the portal or use <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">PowerShell cmdlets</a>. In this example I am using the client/Secret authentication mechanism, but it is recommended to use certificate-based authentication, so you do not have to put the secret in your source files. The KeyVaultClientService needs a <a href="https://github.com/Azure/azure-sdk-for-java/blob/8bd59520544cf7471f8b3c2e3f9e577e68ff2852/services/keyvault/azure-keyvault/src/main/java/com/microsoft/azure/keyvault/KeyVaultConfiguration.java">KeyVaultConfiguration</a> object, which in turn needs the Credentials to connect to the KeyVault. There is an abstract implementation available for <a href="https://github.com/Azure/azure-sdk-for-java/blob/8bd59520544cf7471f8b3c2e3f9e577e68ff2852/services/keyvault/azure-keyvault/src/main/java/com/microsoft/azure/keyvault/authentication/KeyVaultCredentials.java">KeyVaultCredentials</a> available which implements CloudCredentials and supports automatic bearer token refresh. Inheriting this we can create support for the clientid/secret authentication as shown below. I use the <a href="https://github.com/AzureAD/azure-activedirectory-library-for-java">Microsoft Azure Active Directory Authentication Library (ADAL) for Java</a> to authenticate against the AD application, which is again available as a <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.aad%22">Maven package</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientSecretKeyVaultCredential</span> <span class="kd">extends</span> <span class="n">KeyVaultCredentials</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">applicationId</span> <span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">applicationSecret</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ClientSecretKeyVaultCredential</span><span class="o">(</span><span class="n">String</span> <span class="n">applicationId</span><span class="o">,</span> <span class="n">String</span> <span class="n">applicationSecret</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">setApplicationId</span><span class="o">(</span><span class="n">applicationId</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">setApplicationSecret</span><span class="o">(</span><span class="n">applicationSecret</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Header</span> <span class="nf">doAuthenticate</span><span class="o">(</span><span class="n">ServiceRequestContext</span> <span class="n">request</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">challenge</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">AuthenticationResult</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">challenge</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;authorization&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">challenge</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;resource&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">=</span> <span class="n">GetAccessToken</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="n">resource</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">BasicHeader</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="n">res</span><span class="o">.</span><span class="na">getAccessTokenType</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">res</span><span class="o">.</span><span class="na">getAccessToken</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">AuthenticationResult</span> <span class="nf">GetAccessToken</span><span class="o">(</span><span class="n">String</span> <span class="n">authorization</span><span class="o">,</span> <span class="n">String</span> <span class="n">resource</span><span class="o">)</span>
</span><span class='line'>          <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">AuthenticationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AuthenticationContext</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">service</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">Future</span><span class="o">&lt;</span><span class="n">AuthenticationResult</span><span class="o">&gt;</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">acquireToken</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="k">new</span> <span class="nf">ClientCredential</span><span class="o">(</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">getApplicationId</span><span class="o">(),</span> <span class="k">this</span><span class="o">.</span><span class="na">getApplicationSecret</span><span class="o">()),</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="n">AuthenticationResult</span> <span class="n">res</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Using the above we can create a KeyVaultClient instance to connect to Key Vault. The KeyVaultClient supports all operations with the vault. The below sample uses a Key Vault key to encrypt a data and then to decrypt it back.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span><span class="o">,</span> <span class="n">URISyntaxException</span><span class="o">,</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">KeyVaultCredentials</span> <span class="n">kvCred</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ClientSecretKeyVaultCredential</span><span class="o">(</span><span class="s">&quot;AD Application ID&quot;</span><span class="o">,</span> <span class="s">&quot;AD Application Secret&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="n">Configuration</span> <span class="n">config</span> <span class="o">=</span> <span class="n">KeyVaultConfiguration</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">kvCred</span><span class="o">);</span>
</span><span class='line'>     <span class="n">KeyVaultClient</span> <span class="n">vc</span> <span class="o">=</span> <span class="n">KeyVaultClientService</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">vc</span><span class="o">.</span><span class="na">getBaseUri</span><span class="o">());</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">keyIdentifier</span> <span class="o">=</span> <span class="s">&quot;https://rahulkeyvault.vault.azure.net:443/keys/NewKey&quot;</span><span class="o">;</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">textToEncrypt</span> <span class="o">=</span> <span class="s">&quot;This is a test&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="kt">byte</span><span class="o">[]</span> <span class="n">byteText</span> <span class="o">=</span> <span class="n">textToEncrypt</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-16&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="n">Future</span><span class="o">&lt;</span><span class="n">KeyOperationResult</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">vc</span><span class="o">.</span><span class="na">encryptAsync</span><span class="o">(</span><span class="n">keyIdentifier</span><span class="o">,</span> <span class="n">JsonWebKeyEncryptionAlgorithm</span><span class="o">.</span><span class="na">RSAOAEP</span><span class="o">,</span> <span class="n">byteText</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">KeyOperationResult</span> <span class="n">keyoperationResult</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">keyoperationResult</span><span class="o">);</span>
</span><span class='line'>     <span class="n">result</span> <span class="o">=</span> <span class="n">vc</span><span class="o">.</span><span class="na">decryptAsync</span><span class="o">(</span><span class="n">keyIdentifier</span><span class="o">,</span> <span class="s">&quot;RSA-OAEP&quot;</span><span class="o">,</span> <span class="n">keyoperationResult</span><span class="o">.</span><span class="na">getResult</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">String</span> <span class="n">decryptedResult</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getResult</span><span class="o">(),</span> <span class="s">&quot;UTF-16&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">decryptedResult</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>If you are facing issues with threads not closing out properly after making call to Key Vault check this <a href="http://www.rahulpnath.com/blog/using-azure-key-vault-from-a-java-application/#comment-2693376641">comment by Robert</a> for details on how to work around it. (As mentioned there it looks ugly, so if you know of a better way would love to hear that).</em></p></blockquote>

<p>Hope this helps you to get started with Azure Key Vault on Java. The sample solution is available <a href="https://github.com/rahulpnath/Blog/tree/master/AzureKeyVaultUsingJavaClient">here</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How the Deprecation of Switch AzureMode Affects Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/"/>
    <updated>2016-02-25T14:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while that the &lsquo;Switch AzureMode&rsquo; is <a href="https://github.com/Azure/azure-powershell/wiki/Deprecation-of-Switch-AzureMode-in-Azure-PowerShell">deprecated in the Azure PowerShell</a> and has left breaking changes in all the scripts that were using it. <a href="http://www.rahulpnath.com/blog/azure-key-vault-and-powershell-module-version/">I had come across this mode switch first</a>, when starting off with Azure Key Vault, as the then existing cmdlets depended on it. Now that it is deprecated we have updated versions of the PowerShell cmdlets to manage <a href="https://azure.microsoft.com/en-us/services/key-vault/">Azure Key Vault</a>. This post revisits all the scripts used in the <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">previous Key Vault posts</a> and provides the updated scripts.</p>

<p>Most of the scripts have the only change of having an extra &lsquo;Rm&rsquo; indicating that those were off the Resource Manager.</p>

<figure class='code'><figcaption><span>Creating a New Azure Key Vault</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">New-AzureRmResourceGroup</span> <span class="n">-Name</span> <span class="n">KeyVaultGroup</span> <span class="n">-Location</span> <span class="s2">&quot;East Asia&quot;</span>
</span><span class='line'><span class="nb">New-AzureRmKeyVault</span> <span class="n">-VaultName</span> <span class="n">RahulKeyVault</span> <span class="n">-ResourceGroupName</span> <span class="n">KeyVaultGroup</span> <span class="n">-Location</span> <span class="s2">&quot;East Asia&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating a new key/secret remains the same</p>

<figure class='code'><figcaption><span>Creating a Key/Secret in Vault</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="c"># Key</span>
</span><span class='line'><span class="nb">Add-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="n">RahulKeyVault</span> <span class="n">-Name</span> <span class="n">NewKey</span> <span class="n">-Destination</span> <span class="n">Software</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Secret</span>
</span><span class='line'><span class="nv">$apiKey</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="n">-String</span> <span class="s2">&quot;ApiKey&quot;</span> <span class="n">-AsPlainText</span> <span class="n">-Force</span>
</span><span class='line'><span class="nb">Set-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="n">RahulKeyVault</span> <span class="n">-Name</span> <span class="s2">&quot;ApiKey&quot;</span> <span class="n">-SecretValue</span> <span class="nv">$apiKey</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Getting existing Vault details</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Get-AzureRmKeyVault</span> <span class="n">-VaultName</span> <span class="n">RahulKeyVault</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Creating AD application with certificate authentication</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$certificateFilePath</span> <span class="p">=</span> <span class="s2">&quot;C:\certificates\ADTestVaultApplication.cer&quot;</span>
</span><span class='line'><span class="nv">$certificate</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2</span>
</span><span class='line'><span class="nv">$certificate</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$certificateFilePath</span><span class="p">)</span>
</span><span class='line'><span class="nv">$rawCertificateData</span> <span class="p">=</span> <span class="nv">$certificate</span><span class="p">.</span><span class="n">GetRawCertData</span><span class="p">()</span>
</span><span class='line'><span class="nv">$credential</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$rawCertificateData</span><span class="p">)</span>
</span><span class='line'><span class="nv">$startDate</span><span class="p">=</span> <span class="no">[System.DateTime]</span><span class="p">::</span><span class="n">Now</span>
</span><span class='line'><span class="nv">$endDate</span> <span class="p">=</span> <span class="nv">$startDate</span><span class="p">.</span><span class="n">AddYears</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">$adApplication</span> <span class="p">=</span> <span class="nb">New-AzureRmADApplication</span> <span class="n">-DisplayName</span> <span class="s2">&quot;RahulTestADApplication&quot;</span>
</span><span class='line'><span class="n">-HomePage</span>  <span class="s2">&quot;http://www.rahulpnath.com&quot;</span> <span class="n">-IdentifierUris</span> <span class="s2">&quot;http://www.rahulpnath.com&quot;</span>
</span><span class='line'><span class="n">-KeyValue</span>  <span class="nv">$credential</span> <span class="n">-KeyType</span> <span class="s2">&quot;AsymmetricX509Cert&quot;</span> <span class="n">-KeyUsage</span> <span class="s2">&quot;Verify&quot;</span> <span class="n">-StartDate</span> <span class="nv">$startDate</span> <span class="n">-EndDate</span> <span class="nv">$endDate</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Associating the AD application with the key vault</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$servicePrincipal</span> <span class="p">=</span> <span class="nb">New-AzureRmADServicePrincipal</span> <span class="n">-ApplicationId</span> <span class="nv">$adApplication</span><span class="p">.</span><span class="n">ApplicationId</span>
</span><span class='line'><span class="nb">Set-AzureRmKeyVaultAccessPolicy</span> <span class="n">-VaultName</span> <span class="s1">&#39;RahulKeyVault&#39;</span> <span class="n">-ObjectId</span>  <span class="nv">$servicePrincipal</span><span class="p">.</span><span class="n">Id</span> <span class="n">-PermissionsToKeys</span> <span class="n">all</span> <span class="n">-PermissionsToSecrets</span> <span class="n">all</span>
</span><span class='line'><span class="nv">$ServicePrincipal</span><span class="p">.</span><span class="n">ApplicationId</span> <span class="c">#Outputs the ServicePrincipalName/AppPrincipalId </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>User Role assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">New-AzureRmRoleAssignment</span> <span class="n">-Mail</span> <span class="n">keyvaultuser</span><span class="nv">@domain</span><span class="p">.</span><span class="n">onmicrosoft</span><span class="p">.</span><span class="n">com</span>
</span><span class='line'>  <span class="n">-RoleDefinitionName</span> <span class="n">Reader</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please drop a comment if I have missed any!</p>
]]></content>
  </entry>
  
</feed>
