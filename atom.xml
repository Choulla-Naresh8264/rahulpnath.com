<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-03-25T06:49:48+11:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being Explicit About Time when Handling Multiple Timezone]]></title>
    <link href="http://rahulpnath.com/blog/being-explicit-about-time-when-handling-multiple-timezone/"/>
    <updated>2016-03-25T06:41:00+11:00</updated>
    <id>http://rahulpnath.com/blog/being-explicit-about-time-when-handling-multiple-timezone</id>
    <content type="html"><![CDATA[<p><em>This article is to put my thoughts together on a possible solution. Challenges of real world implementation are yet to be discovered.</em></p>

<p>Handling date/time in application&rsquo;s that affect different time zones is tricky! The general recommendation is that all dates be saved in UTC time and convert them as required. This works well if developers make sure of converting all dates to UTC at application boundaries and keep it consistent throughout the application.</p>

<p><a href="https://unsplash.com/photos/yBzrPGLjMQw" class="center" title="Image By Heather Zabriskie , from https://unsplash.com/photos/yBzrPGLjMQw"><img src="http://rahulpnath.com/images\timezone.jpg" class="center" alt="Timezone"></a></p>

<p>At one of my clients, we are facing similar issues with date time, with an application that deals with different <a href="https://en.wikipedia.org/wiki/Time_zone">time zones</a>. The client sells office spaces across the globe and the application is for their employees to manage their clients. It integrates with various back-end systems and provides a single point of access for everything, aggregating data across those different  systems and itself. Some of the backend systems are in different locations and deal with times local to them. This increases the challenge when sending and retrieving data from them. The application has defined a set of locations, identified by, three-letter codes (<em>SYD, TRV, SEA</em>), and these locations fall under different time zones. Office spaces are at these locations and the application allows to manage those from anywhere.</p>

<p>Across the domain, we use either <a href="https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx">DateTime</a> or <a href="https://msdn.microsoft.com/en-us/library/system.datetimeoffset(v=vs.110).aspx">DateTimeOffset</a> to represent time - there is a good recommendation on when to use what - <a href="https://msdn.microsoft.com/en-us/library/bb384267(v=vs.110).aspx">Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo</a>. The problem with using either is that it does not play well with the domain concept to where time is related to - the location. We do have property name suffixes (not consistent though) indicating whether it is Coordinated Universal Time (UTC) or local - like <em>bookingDateUTC</em>, <em>paymentDateLocal</em> etc. But it so happens that these naming conventions gets broken somewhere along the different layers and leads to conversion between time zone at the application boundary layers.</p>

<h3>Issues with Current Approach</h3>

<p>DateTime and DateTimeOffset have by default time zones attached to it and it might go unnoticed till we face issues.</p>

<ul>
<li>The <a href="https://msdn.microsoft.com/en-us/library/system.datetime.kind(v=vs.110).aspx">Kind</a> property on DateTime indicates whether the time represents a <a href="https://msdn.microsoft.com/en-us/library/shx7s921(v=vs.110).aspx">local time, UTC or neither</a>.</li>
<li>The <a href="https://msdn.microsoft.com/en-us/library/system.datetimeoffset.offset(v=vs.110).aspx">Offset</a> property on DateTimeOffset indicates the time&rsquo;s offset from UTC</li>
</ul>


<p>A common scenario in the current application is user selects a date time in the UI using a date picker, which gets send to the server as a string. This value flows through the entire system and is used to populate external systems. The problem here is that the time zone of the date time is not clear. The developer might treat this as UTC time, system local time or even time local to the location in context. This gives different results to the end user and puts the system in an inconsistent state.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetAvailability</span><span class="p">(</span><span class="kt">string</span> <span class="n">locationCode</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">dateTime</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Code to Get as on date</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even worse this date time might get converted back and forth to different time zones, even by the same developer or other developers in the team. These conversions implicitly depend on the Kind property and goes unnoticed. One of the most common problems that we see as a result of this is that the dates might fall over to a day before or after or after, depending on where in the world the user, the server running the application is.</p>

<h3>Being Explicit Using Value Objects</h3>

<blockquote><p><em>The issue in dealing with time is about not being explicit. It&rsquo;s a good idea to tie your domain concept (location in this case) and time together</em></p></blockquote>

<p>Since time is always tied to a location (<em>SYD, TRV, SEA</em>) it&rsquo;s better to keep these together. Though DateTimeOffset and DateTime already has a timezone information attached it does not fit well into the domain, it makes more sense to have a <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Object</a> encapsulating time and location. Timezone by itself is less likely to fit into a domain unless time zones are a domain concept. Most likely the domain would be dealing with a location, place, airport, station etc which falls under a timezone. So it&rsquo;s a good idea to tie your domain concept and the time together. Only for the creation of the Value Object, we need the location after which it is the date time it represents that is relevant. But if by default you want to get back the date time for the same location it was created for, then location can be saved along with the Value Object. In our case, we always want to show the time at the location, so I am keeping it in the Value Object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">LocationDateTime</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Location</span> <span class="n">Location</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">DateTimeInUTC</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTimeOffset</span> <span class="n">DateTimeAtLocation</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">LocationDateTime</span><span class="p">(</span><span class="n">Location</span> <span class="n">location</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">dateTimeUTC</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">location</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">location</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">dateTimeUTC</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">dateTimeUTC</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">dateTimeUTC</span><span class="p">.</span><span class="n">Kind</span> <span class="p">!=</span> <span class="n">DateTimeKind</span><span class="p">.</span><span class="n">Utc</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;Date Time not in UTC&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Location</span> <span class="p">=</span> <span class="n">location</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DateTimeInUTC</span> <span class="p">=</span> <span class="n">dateTimeUTC</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DateTimeAtLocation</span> <span class="p">=</span> <span class="n">TimeAtLocation</span><span class="p">(</span><span class="n">Location</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">LocationDateTime</span> <span class="nf">AtLocation</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">locationDateTime</span><span class="p">,</span> <span class="n">Location</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">locationDateTime</span><span class="p">.</span><span class="n">Kind</span> <span class="p">!=</span> <span class="n">DateTimeKind</span><span class="p">.</span><span class="n">Unspecified</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;DateTimeKind should be unspecified&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">utcTime</span> <span class="p">=</span> <span class="n">TimeZoneInfo</span><span class="p">.</span><span class="n">ConvertTimeToUtc</span><span class="p">(</span><span class="n">locationDateTime</span><span class="p">,</span> <span class="n">location</span><span class="p">.</span><span class="n">TimeZoneInfo</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">LocationDateTime</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">utcTime</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTimeOffset</span> <span class="nf">TimeAtLocation</span><span class="p">(</span><span class="n">Location</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TimeZoneInfo</span><span class="p">.</span><span class="n">ConvertTime</span><span class="p">((</span><span class="n">DateTimeOffset</span><span class="p">)</span><span class="n">DateTimeInUTC</span><span class="p">,</span> <span class="n">location</span><span class="p">.</span><span class="n">TimeZoneInfo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">objAsLocationDateTime</span> <span class="p">=</span> <span class="n">obj</span> <span class="k">as</span> <span class="n">LocationDateTime</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">System</span><span class="p">.</span><span class="n">Object</span><span class="p">)</span><span class="n">objAsLocationDateTime</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">objAsLocationDateTime</span><span class="p">.</span><span class="n">DateTimeInUTC</span> <span class="p">==</span> <span class="n">DateTimeInUTC</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">DateTimeInUTC</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Value Object mandates that all date time gets tracked as UTC and allows conversion to time at different locations. The public constructor enforces this by checking the Kind property on DateTime.</p>

<blockquote><p><em>The Value Object Equality is only on the UTC time it represents</em></p></blockquote>

<p><a href="https://github.com/rahulpnath/Blog/blob/master/ExplicitAboutDateTime/ExplicitAboutDateTime/Location.cs">Location</a> is another Value Object, that encapsulates the code, name and the time zone it belongs to. There is a factory method that allows the creation of the value object at a location, which assumes any passed in DateTime as the time at location, and mandates the Kind property is Unspecified. You could update this to accept UTC/Local time depending on the passed in location&rsquo;s time zone, checking if both fall under the same time zone. You can also create an implicit operator to cast to DateTime or DateTimeOffset values and have it return the desired date time value that you want.</p>

<p>All occurrences of datetime in model classes can now be replaced with custom datetime value object. This makes creating a date explicit and mandates developers to make a decision on the location of datetime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">string</span> <span class="n">locationCode</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">dateTimeAtLocation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">location</span> <span class="p">=</span> <span class="n">GetLocation</span><span class="p">(</span><span class="n">locationCode</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">locationDateTime</span> <span class="p">=</span> <span class="n">LocationDateTime</span><span class="p">.</span><span class="n">AtLocation</span><span class="p">(</span><span class="n">dateTimeAtLocation</span><span class="p">,</span> <span class="n">location</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Code to Get as on date</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even with the above code, you cannot restrict what gets passed into the API/application boundary method, but this has made it explicit to the application on how to start treating the date time. This forces the developer to think and be explicit on the time format expected at the boundary. This might lead to better naming of the variables at the boundary - instead of <em>dateTime</em> to <em>dateTimeAtLocation</em> - and being more explicit to the outside world too!</p>

<h3>Custom Factories Using Extension Method</h3>

<p>Depending on the use case there will be a lot of ways you want to create the value object and possibility of some being used over and over again is more. You can use factory methods to help you extract out this code duplication.</p>

<p>As <a href="https://twitter.com/unclebobmartin">Uncle Bob</a> points out in <a href="http://www.amazon.in/gp/product/0131857258/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0131857258&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=VVMXRINDZWYFRWP4">Agile Principles, Patterns, and Practices in C#</a>, interfaces should be closer to the client. <a href="http://blog.ploeh.dk/2014/12/24/placement-of-abstract-factories/">Factories are nothing but an interface</a>, so it should be defined closer to where it&rsquo;s consumed. Creating a LocationDateTime is always tied to a DateTime object. Using <a href="https://msdn.microsoft.com/en-AU/library/bb383977.aspx">Extension Methods</a> in C#, I have defined an extension on DateTime to create a LocationDateTime object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">LocationDateTime</span> <span class="nf">ToLocationDateTime</span><span class="p">(</span><span class="k">this</span> <span class="n">DateTime</span> <span class="n">dateTime</span><span class="p">,</span> <span class="n">Location</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dateTime</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">location</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">location</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">LocationDateTime</span><span class="p">.</span><span class="n">AtLocation</span><span class="p">(</span><span class="n">dateTime</span><span class="p">,</span> <span class="n">location</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now creating a LocationDateTime from a DateTime is easy. Similarly, extension methods can be defined on Location, LocationDateTime to provide custom capabilities as required by the consuming clients.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">locationDateTime</span> <span class="p">=</span> <span class="n">dateTimeAtLocation</span><span class="p">.</span><span class="n">ToLocationDateTime</span><span class="p">(</span><span class="n">location</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using a Value Object to represent the DateTime within the application enforces developers to be more explicit on the date time at the boundaries, results in better naming of the variables at boundaries, ensures that it remains the same within the application. You can also override some of the most commonly used operators with DateTime like greater than, less than, equal to, so that it seamlessly fits into the application.</p>

<p>Hoping this will work well in the application too, let me get on to fix it!</p>

<p><em>Will update this post with more real life experiences once implemented!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PFX Certificate in Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/pfx-certificate-in-azure-key-vault/"/>
    <updated>2016-03-18T12:21:00+11:00</updated>
    <id>http://rahulpnath.com/blog/pfx-certificate-in-azure-key-vault</id>
    <content type="html"><![CDATA[<p><a href="http://perspecsys.com/" class="center" title="Image By Perspecsys Photos, from https://www.flickr.com/photos/111692634@N04/15855489588"><img class="center" alt="Security" src="http://rahulpnath.com/images\pfx_security.jpg" /></a></p>

<p>You can use PFX certificate&rsquo;s along with Azure Key Vault in multiple ways, depending on your use case. You can import the PFX as a Key into Key Vault and use it just like you would use any other key or save it as a Secret and retrieve it as required. In this post I will explain how this is done.</p>

<p>Before I get into more details let&rsquo;s take a moment to understand better the different file types used and <a href="http://stackoverflow.com/questions/2292495/what-is-the-difference-between-a-cer-pvk-and-pfx-file">what they represent</a>.</p>

<ul>
<li><p><strong>CER</strong>: Contains the public part of the certificate and usually distributed outside.</p></li>
<li><p><strong>PVK</strong>: Contains the Private key and securely stored</p></li>
<li><p><strong>PFX</strong>: Usually has public, private keys, other certificate chains and password protected.</p></li>
</ul>


<p>To create a test certificate for this sample I will use <em>makecert</em> and <em>pvktopfx</em> utilities. Alternatively, you could also use any existing certificate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>makecert -sv mykey.pvk -n &quot;cn=Certificate Key&quot; CertificateKey.cer -b 03/03/2016 -e 06/05/2017 -r -sky exchange
</span><span class='line'>pvk2pfx -pvk mykey.pvk -spc CertificateKey.cer -pfx CertificateKey.pfx -po test
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The <em>-sky exchange</em> sets the Subject Key Type to Exchange and allows encrypting/decrypting values using the certificate.</p></blockquote>

<p>The <em>makecert</em> creates the CER and PVK, the public/private key files which gets combined into a single PFX file using <em>pvktopfx</em>.</p>

<h3>Using the PFX Certificate to Encrypt and Decrypt</h3>

<p>PFX files along with CER files allows to encrypt/decrypt data without the need for Key Vault. You can share the public key, CER, to your clients, who can then use it to encrypt data before sending it to the server. Using the private key, available in PFX, the server can decrypt this data</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Client</span>
</span><span class='line'><span class="kt">byte</span><span class="p">[]</span> <span class="n">encryptedData</span><span class="p">;</span>
</span><span class='line'><span class="c1">// You can also use the PFX here as it contains the private key</span>
</span><span class='line'><span class="kt">var</span> <span class="n">publicCertificate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">X509Certificate2</span><span class="p">(</span><span class="s">@&quot;C:\CertificateKey.cer&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">cryptoProvider</span> <span class="p">=</span> <span class="n">publicCertificate</span><span class="p">.</span><span class="n">PublicKey</span><span class="p">.</span><span class="n">Key</span> <span class="k">as</span> <span class="n">RSACryptoServiceProvider</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">byteData</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">textToEncrypt</span><span class="p">);</span>
</span><span class='line'>    <span class="n">encryptedData</span> <span class="p">=</span> <span class="n">cryptoProvider</span><span class="p">.</span><span class="n">Encrypt</span><span class="p">(</span><span class="n">byteData</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Server</span>
</span><span class='line'><span class="kt">var</span> <span class="n">privateCertificate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">X509Certificate2</span><span class="p">(</span><span class="s">@&quot;C:\CertificateKey.pfx&quot;</span><span class="p">,</span> <span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">cryptoProvider</span> <span class="p">=</span> <span class="n">privateCertificate</span><span class="p">.</span><span class="n">PrivateKey</span> <span class="k">as</span> <span class="n">RSACryptoServiceProvider</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">decryptedData</span> <span class="p">=</span> <span class="n">cryptoProvider</span><span class="p">.</span><span class="n">Decrypt</span><span class="p">(</span><span class="n">encryptedData</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">decryptedText</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">decryptedData</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Creating a Key in Key Vault from PFX file</h3>

<p>Now that I am able to use the PFX file (which essentially is a software-protected key) to encrypt/decrypt data, I will upload this to the Azure Key Vault so that it stays secure there. If you are new to Azure Key Vault and want to get started check my <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">other posts</a>.</p>

<p>To upload the PFX to Key Vault, you can use the <em><a href="https://msdn.microsoft.com/en-us/library/dn868048.aspx">Add-AzureKeyVaultKey</a></em> PowerShell cmdlet and specify the PFX file path and password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$securepfxpwd</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="err">–</span><span class="n">String</span> <span class="s1">&#39;test&#39;</span> <span class="err">–</span><span class="n">AsPlainText</span> <span class="err">–</span><span class="n">Force</span>
</span><span class='line'><span class="nb">Add-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="s1">&#39;rahulkeyvault&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;KeyFromCert&#39;</span> <span class="n">-KeyFilePath</span> <span class="s1">&#39;c:\CertificateKey.pfx&#39;</span> <span class="n">-KeyFilePassword</span> <span class="nv">$securepfxpwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the unique key identifier, I can now access this key from PowerShell or using the Web API. You can still distribute the public key, CER, to your clients for encrypting the data and use the Azure Key Vault API to decrypt the data. Or use the Azure Key Vault to encrypt and decrypt the data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">keyIdentifier</span> <span class="p">=</span> <span class="s">&quot;https://rahulkeyvault.vault.azure.net:443/keys/KeyFromCert/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Client Remains the same or use the Key Vault Client</span>
</span><span class='line'><span class="kt">var</span> <span class="n">encryptedResult</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">EncryptAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">,</span> <span class="s">&quot;RSA-OAEP&quot;</span><span class="p">,</span> <span class="n">byteData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Server</span>
</span><span class='line'><span class="kt">var</span> <span class="n">decryptedData</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">DecryptAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">,</span> <span class="s">&quot;RSA-OAEP&quot;</span><span class="p">,</span> <span class="n">certED</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">decryptedText</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">decryptedData</span><span class="p">.</span><span class="n">Result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The PFX file uploaded to the Key Vault is just like any other key vault key, the only difference being you give the public and private key. Once the key is created in Key Vault, the private part of the key stays secure within the Key Vault and is not accessible outside (except from the original PFX/PVK file).</p>

<h3>Storing PFX file as a Secret</h3>

<p>PFX files can also be stored as Secrets in Key Vault which allows you to retrieve and re-create the certificate as required. To add the certificate as a secret you can use the below PowerShell script (taken from <a href="http://stackoverflow.com/questions/33728213/how-to-store-pfx-certificate-in-azure-key-vault">here</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$pfxFilePath</span> <span class="p">=</span> <span class="s1">&#39;C:\CertificateKey.pfx&#39;</span>
</span><span class='line'><span class="nv">$pwd</span> <span class="p">=</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="nv">$flag</span> <span class="p">=</span> <span class="no">[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]</span><span class="p">::</span><span class="n">Exportable</span>
</span><span class='line'><span class="nv">$collection</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2Collection</span>
</span><span class='line'><span class="nv">$collection</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$pfxFilePath</span><span class="p">,</span> <span class="nv">$pwd</span><span class="p">,</span> <span class="nv">$flag</span><span class="p">)</span>
</span><span class='line'><span class="nv">$pkcs12ContentType</span> <span class="p">=</span> <span class="no">[System.Security.Cryptography.X509Certificates.X509ContentType]</span><span class="p">::</span><span class="n">Pkcs12</span>
</span><span class='line'><span class="nv">$clearBytes</span> <span class="p">=</span> <span class="nv">$collection</span><span class="p">.</span><span class="n">Export</span><span class="p">(</span><span class="nv">$pkcs12ContentType</span><span class="p">)</span>
</span><span class='line'><span class="nv">$fileContentEncoded</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$clearBytes</span><span class="p">)</span>
</span><span class='line'><span class="nv">$secret</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="n">-String</span> <span class="nv">$fileContentEncoded</span> <span class="n">-AsPlainText</span> <span class="err">–</span><span class="n">Force</span>
</span><span class='line'><span class="nv">$secretContentType</span> <span class="p">=</span> <span class="s1">&#39;application/x-pkcs12&#39;</span>
</span><span class='line'><span class="nb">Set-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="s1">&#39;rahulkeyvault&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;PfxFile&#39;</span> <span class="n">-SecretValue</span> <span class="nv">$Secret</span> <span class="n">-ContentType</span> <span class="nv">$secretContentType</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script exports the certificate to a byte array and converts it to Base64 string representation and saves it to Key Vault as Secret using the <a href="https://msdn.microsoft.com/en-us/library/dn868050.aspx">Set-AzureKeyVaultSecret</a> PowerShell cmdlet. You can export the certificate along with the password if required, so that when you recreate the certificate file, it will be password protected.</p>

<p>To retrieve and re-create the certificate you can either use PowerShell or API as shown below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$secretRetrieved</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="s1">&#39;rahulkeyvault&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;PfxFile&#39;</span>
</span><span class='line'><span class="nv">$pfxBytes</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="nv">$secretRetrieved</span><span class="p">.</span><span class="n">SecretValueText</span><span class="p">)</span>
</span><span class='line'><span class="no">[io.file]</span><span class="p">::</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="s2">&quot;c:\CertFromSecret.pfx&quot;</span><span class="p">,</span> <span class="nv">$pfxBytes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">secretRetrieved</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">GetSecretAsync</span><span class="p">(</span><span class="n">secretIdentifier</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">pfxBytes</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">FromBase64String</span><span class="p">(</span><span class="n">secretRetrieved</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'><span class="n">File</span><span class="p">.</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="s">@&quot;C:\cert\ADTestVaultApplicationNew.pfx&quot;</span><span class="p">,</span> <span class="n">pfxBytes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or recreate the certificate directly</span>
</span><span class='line'><span class="kt">var</span> <span class="n">certificate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">X509Certificate2</span><span class="p">(</span><span class="n">pfxBytes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use the PFX certificate as earlier as a file or a certificate object. These are the various ways that you can use PFX certificated along with Key Vault.</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Learnings from the IKEA Experience]]></title>
    <link href="http://rahulpnath.com/blog/developer-learnings-from-the-ikea-experience/"/>
    <updated>2016-03-16T05:44:00+11:00</updated>
    <id>http://rahulpnath.com/blog/developer-learnings-from-the-ikea-experience</id>
    <content type="html"><![CDATA[<p>When we moved over to Sydney, last year, we had to start over with all the home furnishings. Since we were just starting out, didn&rsquo;t want to spent a lot on furnishings, so decided to go with <a href="http://www.ikea.com/au/en/?cid=au|ps|branded|brand|google|ikea_australia">IKEA</a> for its cost effectiveness and value for money.</p>

<blockquote><p><em>IKEA is a multinational group of companies that designs and sells ready-to-assemble furniture (such as beds, chairs and desks), appliances, small motor vehicles and home accessories. <span class="right">Wiki</span></em></p></blockquote>

<p>Right from the in-shop experience to setting it up, I found many similarities with the IKEA experience and Software Development. Visiting IKEA is an experience in itself and totally wow&rsquo;s you. If not for any of the displayed items, the &lsquo;<em>Self Serve Furniture Area</em>&rsquo; surely will. The sheer size and setup there was breath-taking for me and my wife!</p>

<figure>
    <img alt="IKEA Self Serve Furniture Area, Ikea Tempe" src="http://rahulpnath.com/images/ikea_self_serve_furniture_area.jpg" />
    <figcaption><em>This is just one of the aisle and there were around 35 of them!</em></figcaption>
</figure>


<h3>Code Management &amp; Inventory Management</h3>

<p>Throughout the <a href="https://shoutsfromtheabyss.files.wordpress.com/2013/06/ikea-map.jpg">Showroom</a> you see an <em>Aisle number</em> and the <em>Location</em> displayed under the displayed items. For the items interested in, one can note those numbers on paper or use the mobile application to <a href="http://www.ikea.com/ms/en_KR/customer-service/apps/mobile_app_14.html">scan the QR code of the product</a> for reference. In the checkout area, you can find the item at the said aisle/location number. Finding and picking up the item from the aisle is easy and joyful.</p>

<p>Code management is an important aspect in Software development, as code bases can get quite large. Setting up a <a href="https://github.com/">version control</a> to manage code bases have become a norm and is a good practice to follow even on your side projects. Few other things to follow include</p>

<ul>
<li>Maintain a project structure, naming conventions and code conventions.</li>
<li>Code Navigability and discoverability are important for fast and smooth development. Good and descriptive class names allow us to navigate easily based on the application functionality.</li>
<li><a href="https://msdn.microsoft.com/en-us/library/893ke618(v=vs.71).aspx">Organizing Namespace</a></li>
<li>Remove unused code and not comment it out. Let the version control system take care of file history.</li>
</ul>


<h3>Manual</h3>

<p>The assembly instructions that comes with each package is clear and expressive. It&rsquo;s mostly <a href="http://www.ikea.com/au/en/assembly_instructions/malm-desk__AA-516949-7_pub.pdf">conveyed through pictures</a> and easy to follow through. The manual is up to date with the packaged product and matched exactly with the contents.</p>

<p>This shows the importance of having a <a href="https://en.wikipedia.org/wiki/README">README</a> file or software manuals or in context help for users to use the application. Feedback messages and keeping the user always connected with the system is also important. Long wait times, unresponsive progress bars, silent suppression of error messages are not acceptable. Error messages are for the application user and the level and kind of details differs based on who the user is:</p>

<ul>
<li>For business/non-technical users, mostly of Front-end applications, Business error messages makes more value than technical errors</li>
<li>For developers consuming an API, detailed technical error messages add value than just returning a &lsquo;500 - Internal Server Error&rsquo;</li>
</ul>


<p>Error messages must be relevant and up to date with the current functionality. Always review messages for appropriateness.</p>

<p>Code comments used for communicating intent mostly gets out of sync with what the code actually does. So it&rsquo;s a better practice to avoid comments in code and break code into descriptive function and classes to convey the intent.</p>

<blockquote><p><em><a href="http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode">A comment is an apology</a> for not choosing a more clear name or a more reasonable set of parameters, or for the failure to use explanatory variables and explanatory functions.</em></p></blockquote>

<h3>Tools</h3>

<p><img class="left" alt="IKEA Tools" src="http://rahulpnath.com/images/ikea_tools.jpg" /></p>

<p>The <a href="http://www.ikea.com/us/en/catalog/products/00169254/">FIXA 17-piece tool kit</a>, is all that you need for fitting all the furniture. Some products have an <a href="https://en.wikipedia.org/wiki/Hex_key">Allen Key</a> packaged along with them, but otherwise, most of the time the FIXA toolkit is all that one needs.</p>

<p>Having the <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">right set of tools</a> for assisting in the development and being familiar with it is important.  It&rsquo;s not just about having the best/costliest tools, but about knowing them well. Taking some time out to understand the tools that you use daily is important. By tools, I include keyboard, mouse, programming languages, IDE&rsquo;s and other support software that you use daily.</p>

<div style="clear: both;"></div>


<blockquote><p><em><a href="http://blog.codinghorror.com/we-are-typists-first-programmers-second/">We are Typists First, Programmers Second</a>: The keyboard is one of the most important tools for a developer - learn it well</em></p></blockquote>

<h3>Componentization</h3>

<p>The furniture comes as separate pieces that can be easily assembled, with all the screw holes of perfect size. All the different pieces fit perfectly and right even when done by an amateur. Though some of the pieces required two people to fix, I could fix them up myself. It was all cut to perfection with all the holes right in place and fits perfectly the first time.</p>

<p>Having well-defined interfaces that interact with each other seamlessly is important in software development. Any application should be composed of smaller parts that can fit together well. Adhering to good design principles and design patterns helps us to achieve this.</p>

<blockquote><p><em>One of the most important principles while using Object Oriented  languages is <strong><a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">SOLID</a></strong>:   <br/>
  Single Responsibility, Open-Closed, Liskov Substitution, Interface segregation and Dependency Injection</em></p></blockquote>

<p><img class="center" alt="IKEA Components" src="http://rahulpnath.com/images/ikea_components.jpg" /></p>

<p>Interfaces should be well-defined and not <a href="https://en.wikipedia.org/wiki/Leaky_abstraction">leak abstractions</a>. The name and parameters(input/return) should completely abstract the &lsquo;how&rsquo; part of the functionality and expose only the &lsquo;what&rsquo;. This helps to build more robust interfaces.</p>

<h3>Packaging and Shipping</h3>

<p><a href="http://www.wsj.com/articles/ikea-cant-stop-obsessing-about-its-packaging-1434533401">IKEA&rsquo;s efficiency in packaging</a> is one of the reasons that enables them to sell at a low-cost and they keep improving at it. Compact and small packages make it easy to handle right from &lsquo;self-checkout&rsquo; to unpacking it at your home. It also helps in optimizing transportation costs for IKEA which in turn enables them to reduce prices.</p>

<figure>
    <img alt="IKEA Packaging" src="http://rahulpnath.com/images/ikea_packed.jpg"></img>
    <figcaption><em>King size bed frame with storage, extendable dining table and four chairs!</em></figcaption>
</figure>


<p></p>

<p>Deployment in software development is a key part and having the entire pipeline automated is essential for a smooth delivery. <a href="http://www.rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/">Setting up a build server, automated building, running tests</a> etc are some of the starting points to move towards <a href="http://martinfowler.com/bliki/ContinuousDelivery.html">Continuous Delivery</a>. Deployment needs to be scripted and be possible to deploy to any environment at the click of a button. If it is a distributable software then easily accessible delivery mechanisms should be available and preferably offer multiple options (like distributable media, server hosted images etc like Windows)</p>

<blockquote><p><em>The package has just the right number of screws, nails and other assembly accessories - not one less, not one more!</em></p></blockquote>

<p><img class="center" alt="IKEA Components" src="http://rahulpnath.com/images/ikea_assembly_accessories.jpg" /></p>

<p>This shows IKEA&rsquo;s confidence in the shipped product and the self-belief of nothing going wrong. For a software product to be shipped with this level of confidence it should be thoroughly tested - preferably automated, which allows verifying each time we make a release and allows us to release more often.</p>

<h3>Cost Effective</h3>

<p>Having always bought pre-assembled furniture I have never had to think about anything - it was always just about the money. But with IKEA being self-assembled, you get the flexibility to choose the components/features that you need for the furniture like you could choose to have a <a href="http://www.ikea.com/au/en/catalog/products/20228714/">headboard for the bed</a> or not, which obviously implies a reduced price. You could choose to self-checkout and pay nothing, but also do a paid checkout, where an IKEA member would get all the items out for you to the billing counter. You could transport it yourself to your home or <a href="http://www.ikea.com/ms/en_AU/customer_service/ikea_services/home_delivery.html">get it delivered</a>. So it&rsquo;s all about giving you the options to choose what you want and really keep the cost low.</p>

<p>Keeping the cost low is an important aspect in software industry too and at various levels</p>

<ul>
<li>Development and Licensing  costs - Try to keep these costs low, by looking for open source alternatives and choosing your technology wisely and not just looking for the &lsquo;cool and latest&rsquo;.</li>
<li>Deployment/Infrastructure costs - Build applications for scale and as independent services so that they can be  turned on and off  as required. <a href="https://azure.microsoft.com/en-us/">The cloud</a> has greatly reduced the infrastructure setup costs and provides an easy way for setup. Make sure you understand well the pricing models offered by various cloud providers.</li>
<li>Software Costs/Subscription Costs: Give flexibility to your consumers in how they can consume your software. Keeping functionality loosely coupled and pluggable allows to offer various subscription plans or selling model.</li>
</ul>


<h3>Value Added Services</h3>

<p>It&rsquo;s not just in the home furnishings and their core business that IKEA has taken great care for. The other <a href="http://www.ikea.com/ms/en_SG/service-offer/">Value Added Services</a> they offer like Delivery, Assembly, Planning Tools, Gift Cards, Children&rsquo;s Services and Return Policy are top-notch.</p>

<blockquote><p><em>Users are happy when the expected works, and wowed when it goes beyond expectations.</em></p></blockquote>

<p>The <a href="http://www.ikea.com/au/en/catalog/categories/departments/food/">food at IKEA</a> is worth mentioning (and a picture) - low-priced and tasty! It caters for the needs of all kinds of people and age. The value for money attracts people to IKEA just for the food.</p>

<p><img alt="IKEA Components" src="http://rahulpnath.com/images/ikea_food.jpg" /></p>

<p>Any product should deliver what it&rsquo;s supposed to anyways, but it&rsquo;s in providing a bit extra that really matters. Like the few examples below,that gave a better experience to me</p>

<ul>
<li>When you hit Ctrl + V with an image in clipboard on Facebook it automatically uploads the image</li>
<li>When Amazon sent a replacement for my broken Kindle (all the way from the US to India) for free</li>
<li>When Google Now showed the <a href="https://support.google.com/websearch/answer/6015842?hl=en">parking location</a>.</li>
<li>The IKEA Experience!</li>
</ul>


<p>Strive to look for cases where you can delight your customers every time you deliver a product. The IKEA has made me think about delivering products and the need for constantly improving at it. We often need to take a stop, look at what we are doing and correct things and move forward.</p>

<blockquote><p><em>The only way to make the deadline—the only way to go fast—is to keep the <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=CVCVZFAR5SBYVMJW">code as clean</a> as possible at all times.</em></p></blockquote>

<p>Head off to an IKEA store if there is one <a href="http://www.ikea.com/">near you</a> and get wowed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking Beyond Primitive Values: Value Objects]]></title>
    <link href="http://rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/"/>
    <updated>2016-03-11T05:49:00+11:00</updated>
    <id>http://rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects</id>
    <content type="html"><![CDATA[<p>When modelling objects for our application, we use primitive values to represent their attributes or properties. By primitive values, I refer to all the primitive types (like Byte, Boolean, Int, Date) and the in-built types (String etc.) that the language supports. These are the most basic types of the programming language and are the building blocks to create custom types.</p>

<h3>Primitive Types and Associated Problems</h3>

<p>When modelling classes for the domain, one of the most common things we do is to fit domain concepts into primitive types. For example</p>

<ul>
<li><strong>String</strong> to represent Names (Employee name, Company Name, Product Name, Car Name etc.)</li>
<li><strong>Int/Decimal/Double/Float</strong> to represent Numbers (Age, Quantity, Money, Temperature, Distance, Upload/Download sizes etc.)</li>
</ul>


<p>Those are just a few examples on how we &lsquo;usually&rsquo; fit domain concepts into primitive types. This kind of design tends to take us more towards procedural programming, as shown below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">phoneNumber</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Lot of other code</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">isExtensionPhoneNumber</span> <span class="p">=</span> <span class="n">phoneNumber</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">phoneNumber</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;=</span><span class="m">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this is that these constraints/logics tends to leak across the code-base and we run into problems either not handling this at certain places, handling them wrongly or any changes to these constraints ripples across the code.</p>

<h3>Value Object</h3>

<p>A common factor in all the above examples is that those domain concepts follow value equality and not reference equality. Just like two strings or integers compares with each other based on their value, two names, temperature, color all compare against each other based on their value. This is where a Value Object fits in well.</p>

<blockquote><p><em><a href="http://martinfowler.com/bliki/ValueObject.html">Value Object</a> is an object whose equality is determined by the value it holds and are immutable.</em></p></blockquote>

<p>Below is a Value Object implementation of &lsquo;UserName&rsquo; where we have the domain constraint that name should not be empty and at least be three characters (not a real world scenario, but just for an example). The Equals and GetHashCode methods below ensures that the equality comparison is based on the value that it holds. One could also <a href="https://msdn.microsoft.com/en-au/library/ms173147(v=vs.80">override the &lsquo;==&rsquo; and &lsquo;!=&rsquo; operator</a>.aspx) if you want to support those.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">UserName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="kt">string</span> <span class="n">internalName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">UserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;</span> <span class="m">3</span><span class="p">)</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;Name should be atleast 3 characters long&quot;</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">internalName</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">objAsName</span> <span class="p">=</span> <span class="n">obj</span> <span class="k">as</span> <span class="n">UserName</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">System</span><span class="p">.</span><span class="n">Object</span><span class="p">)</span><span class="n">objAsName</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">internalName</span> <span class="p">==</span> <span class="n">objAsName</span><span class="p">.</span><span class="n">internalName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">internalName</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no restriction on the number of parameters that a value object should be composed of. Equality and Hashcode should use all the values that it composes of. For immutability, we have made the <em>internalName</em> (in above case ) a private variable. You could also have it as public read-only property if you scenario demands, like in case of DateRange Value Object. Making the setters private and checking end date is not greater than the start date while construction, helps  protect the <a href="http://people.cs.aau.dk/~normark/oop-csharp/html/notes/contracts_themes-class-inv-sect.html">class invariants</a>. In addition to that, any update to start or end date should create a new DateRange object as WithEndDate does below.</p>

<blockquote><p><em>A class invariant is an assertion that captures the properties and relationships, which remain stable throughout the life-time of instances of the class.</em></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRange</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">StartDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">EndDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">startDate</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Ignoring null checks</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">endDate</span> <span class="p">&lt;</span> <span class="n">startDate</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;End Date cannot be less than Start Date&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">=</span> <span class="n">startDate</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">EndDate</span> <span class="p">=</span> <span class="n">endDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateRange</span> <span class="nf">WithEndDate</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DateRange</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">StartDate</span><span class="p">,</span> <span class="n">endDate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Rest of Value Object Code to override Equals and GetHashCode</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Thinking as Value Objects</h3>

<p>In the beginning, it is hard to see Value Objects in your domain, but then there is an easy trick that you can follow.</p>

<blockquote><p><em>Any time you use a primitive type (unless within a Value Object) think more about the choice.</em></p></blockquote>

<p>Once you start using more and more Value Objects you will naturally get good at it and be able to start to see more of it in your domain.</p>

<ul>
<li>Look for co-existing properties, that always go together (like start date and end date, first name and last Name), and try to model them as Value Objects.</li>
<li>Any property that has a unit of measurement associated needs the value and the measurement unit together (Money, Temperature, Distance, Upload/Download size etc.), and is likely a Value Object.</li>
<li>Properties that have structural restrictions like Phone Number, Zip Code, email etc.</li>
</ul>


<p>Extracting these into Value Objects helps pull in a lot of &lsquo;<em>procedural code</em>&rsquo; into the Value Object, as shown below. Even if the extension numbers  format changes, we have a single place to contain this change and can avoid a rippling change. We can also have static factory methods to assist in creating these Value Object and helps make the code readable like the <em>CreateFromBytes</em> method below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">PhoneNumber</span> <span class="n">phoneNumber</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Lot of other code</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">.</span><span class="n">IsAnExtension</span><span class="p">())</span>
</span><span class='line'><span class="p">...</span> <span class="c1">//Rest of code</span>
</span><span class='line'>
</span><span class='line'><span class="kt">decimal</span> <span class="n">downloadBytes</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">downloadedData</span> <span class="p">=</span> <span class="n">UnitOfData</span><span class="p">.</span><span class="n">CreateFromBytes</span><span class="p">(</span><span class="n">downloadBytes</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Lot of other code</span>
</span><span class='line'><span class="n">downloadedData</span><span class="p">.</span><span class="n">GetSizeInMegabytes</span><span class="p">();</span>
</span><span class='line'><span class="p">...</span> <span class="c1">//Rest of code</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Implicit and Explicit Conversions</h3>

<p>Introducing a Value Object to an existing code base might seem challenging, as it might be all over the code and a hard task to replace all at once. In cases where the Value Object replaces a single property existing in a class like a string name, phoneNumber, location etc., we can take advantage of the <a href="https://msdn.microsoft.com/en-us/library/z5z9kes2.aspx">implicit conversion operators</a>, to introduce new Value Objects gradually. Let&rsquo;s say you have a Name field that is a string and you want to move this over to a Value Object &lsquo;UserName&rsquo;. We can declare an implicit operator to convert between string and UserName, which helps us gradually change over to the new ValueObject</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">implicit</span> <span class="k">operator</span> <span class="nf">UserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">UserName</span><span class="p">(</span><span class="n">userName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">implicit</span> <span class="k">operator</span> <span class="nf">string</span><span class="p">(</span><span class="n">UserName</span> <span class="n">userName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">userName</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;userName&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">userName</span><span class="p">.</span><span class="k">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">internalName</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implicit operator enables us to use UserName and string side-by-side and it will automatically convert between them without any explicit casts. This enables us to start anywhere in the application and start replacing the Primitive Value types into Value Objects without breaking the application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">lastName</span> <span class="p">=</span> <span class="s">&quot;Nath&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">UserName</span> <span class="n">firstName</span> <span class="p">=</span> <span class="s">&quot;Rahul&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">string</span> <span class="n">fullNameString</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0} {1}&quot;</span><span class="p">,</span> <span class="n">firstName</span> <span class="p">,</span> <span class="n">lastName</span><span class="p">);</span>
</span><span class='line'><span class="n">UserName</span> <span class="n">fullName</span> <span class="p">=</span> <span class="n">fullNameString</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the application boundaries, if the data is serialized into different formats (JSON/XML) or persisted into ORM&rsquo;s (Entity Framework/NHibernate) you need to add <a href="http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonConverter.htm">custom serialization formatters</a> or <a href="https://msdn.microsoft.com/en-au/data/jj591617.aspx">mapping configurations</a> to make sure that the Value Object gets serialized/persisted as expected.</p>

<p>Value Objects helps model the domain better and keeps code more readable. It also helps you change domain constraints or rules more easily and keeps them contained. Consider introducing a value object the next time you see one!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Fiddler to help in Manual Testing]]></title>
    <link href="http://rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing/"/>
    <updated>2016-03-07T17:33:00+11:00</updated>
    <id>http://rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing</id>
    <content type="html"><![CDATA[<p>Fiddler is an HTTP debugging proxy server application, that captures HTTP and HTTPS traffic and displays to the user. It also enables modifying HTTP traffic when sent or received. Fiddler is <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of the tools that I use daily</a> and is an indispensable one for any web developer.</p>

<p>This post gives an introduction on how you can use fiddler to help with &lsquo;manual testing&rsquo;. We will see how to use Fiddler to create requests to Web API,  modify and replay an existing request. We will also see how to test error scenarios to see how the application functions in those cases. The sample solution is the default Web API project in Visual Studio with a few changes.</p>

<h3>Composing a Request</h3>

<p>When testing API&rsquo;s to see how it behaves with various inputs, one often needs to send in different parameters. Fiddler allows composing new requests and  modifying existing ones.</p>

<p>Using the Fiddler composer window (shown in the image below), we can create new requests from scratch and execute them. It provides two modes to create requests:</p>

<ul>
<li>Parsed : This is an assisted form to create requests</li>
<li>Raw : This allows to create raw http requests and issue them.</li>
</ul>


<p>Fiddler also allows saving raw requests in the Scratchpad tab to execute as and when required. On clicking Execute Fiddler creates an HTTP request from the entered data and sends to the server. To modify requests you can either drag and drop the request from the displayed URL&rsquo;s list into the composer tab or right-click on an entry and <em>Unlock for Editing</em> (keyboard shortcut - F2). After making the changes to the request in the Inspector window, right-click on the request again to Replay -> Reissue ( R).</p>

<p><img class="center" alt="Fiddler Composer tab" src="http://rahulpnath.com/images/fiddler_composer.png" /></p>

<h3>Testing Error Cases</h3>

<p>Testing error cases is tricky, especially from a UI level. Things usually don&rsquo;t go wrong in the development/testing environment and <a href="http://blog.codinghorror.com/the-works-on-my-machine-certification-program/">almost never on a developers machine</a> which makes it very hard to test for cases where something does not work. Fiddler makes it easy to test error scenarios with <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder">AutoResponder</a>, which allows returning handcrafted responses for requests, without actually hitting the server.</p>

<p>To create an auto response for a URL, select the URL from the URL&rsquo;s list and drag it into the AutoResponder tab or select the URL and click on Add Rule button on AutoResponder tab, which will create a new rule. By default Fiddler creates a rule with an exact match (Exact:) with the selected URL. Fiddler supports different <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#matching-rules">matching rules</a> which include regular expression matches. A list of default response text are available to choose from to respond to requests that match the URL matching rule. We can also create a custom response and save it for reuse. The next time a request with matching URL is found the custom response gets returned to the caller.</p>

<blockquote><p><em>Make sure that the &lsquo;Unmatched requests passthrough&rsquo; option is true in the AutoResponder tab to make sure that all other requests pass through to the server.</em></p></blockquote>

<p><img class="center" alt="Fiddler AutoResponder tab" src="http://rahulpnath.com/images/fiddler_autoresponder.png" /></p>

<p>To create a custom response, choose &lsquo;Create a New Response&rsquo; or &lsquo;Find a file&rsquo; (if you already have the response saved in a text file). You can save custom responses in the <em>ResponseTemplates</em> folder in the root folder of Fiddler installation, to have them populated in the AutoResponder tab. When editing existing response data, make sure properties like Content-Length reflects the correct values. You can also set a <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#latency">Latency</a> for the response, to simulate response coming from a server. RIght click on the rules for the Set Latency option and enter the value in milliseconds.</p>

<p>With the AutoResponder set to matching URL, we can easily have it return error codes or simulated error messages to test how the UI handles them. You don&rsquo;t have to depend on &lsquo;actual server errors&rsquo; to test if the UI handles error correctly. You can use this to test how application behaves with different return values by mocking with valid custom responses.  Fiddler provides richer capabilities of using scripts to <a href="http://docs.telerik.com/fiddler/KnowledgeBase/FiddlerScript/ModifyRequestOrResponse">modify a request or response</a>.</p>

<p>Hope this helps you get started with using Fiddler for testing and manipulating requests/responses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated ClickOnce Deployment of a WPF Application using Appveyor]]></title>
    <link href="http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/"/>
    <updated>2016-03-04T12:00:00+11:00</updated>
    <id>http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor</id>
    <content type="html"><![CDATA[<p>This post covers the current deployment setup of <a href="https://github.com/rahulpnath/clal">CLAL</a>(Command Line Application Launcher), a desktop application, that I am building. Since it is a WPF application, it supports <a href="https://msdn.microsoft.com/en-us/library/t71a733d.aspx">ClickOnce Deployment</a> that enables to create self-updating applications which can install with minimum interaction from the user. ClickOnce supports different <a href="https://msdn.microsoft.com/en-us/library/71baz9ah.aspx">deployment strategy</a> of which distributing it through the web is quite popular as it makes software distribution easier. It works well when the software size is not large so that application installation is faster. For CLAL, there are two deployments served from Azure: <a href="http://www.rahulpnath.com/clal/Releases/commandlineapplicationlauncherui.application">Latest stable build</a> and the <a href="http://www.rahulpnath.com/clal/Latest/commandlineapplicationlauncherui.application">Current build</a>.</p>

<p>I did not want to do manually, the entire deployment process of building the solution, running all the tests, creating the ClickOnce package and pushing it up to Azure, I decided to automate this. Since <a href="https://www.appveyor.com/">Appveyor</a>, a hosted distributed continuous integration service used to build and test projects, is free for open-source projects and integrates very well with application developed on the Windows platform.</p>

<h3>Setting up Appveyor project</h3>

<p>Setting up Appveyor to read from Github is very easy. Once you authorize access to Github, Appveyor lists all the projects that you have in your Github account. After selecting a project, it creates a <a href="https://ci.appveyor.com/project/rahulpnath/clal">&lsquo;build project&rsquo;</a> for that in Appveyor, where you can control all build related activities. Appveyor automatically pulls in your latest source code from the repository, when a build triggers. Build configurations can be specified using a <a href="https://www.appveyor.com/docs/appveyor-yml">configuration file</a> (appveyor.yml) living at the repository root or using the user interface. For CLAL I exclusively use the configuration from the file and the latest version is available <a href="https://github.com/rahulpnath/clal/blob/master/appveyor.yml">here</a>.
Primarily there are two branches (<em>master</em> and <em>development</em>) on the git repository which builds as the latest stable and current build. Since these two deployments have few attributes different (like the version numbers, deployment URL, update URL), I use <a href="https://www.appveyor.com/docs/branches#conditional-build-configuration">conditional build configuration</a> to have separate configuration properties for the branches.</p>

<p>The primary things that vary for the different deployments are a few ClickOnce publishing properties, the version number, the build configurations - release/debug and the deployment locations. We will see in detail below how we handle this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span>
</span><span class='line'>  <span class="l-Scalar-Plain">branches</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">only</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>  <span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.2.2.0</span>
</span><span class='line'>  <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">assemblies</span><span class="p-Indicator">:</span> <span class="s">&#39;**\*.*Test.dll&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">configuration</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Release</span>
</span><span class='line'>  <span class="c1"># Rest of the configuration</span>
</span><span class='line'>  <span class="p-Indicator">-</span>
</span><span class='line'>  <span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.2.2.{build}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">assemblies</span><span class="p-Indicator">:</span> <span class="s">&#39;**\*.*Test.dll&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">configuration</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Debug</span>
</span><span class='line'>  <span class="c1"># Rest of the configuration</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ClickOnce Publish Profile</h3>

<p>To create the publish profile, I used the Visual Studio Publish option on the project, which generates all the <a href="https://msdn.microsoft.com/en-us/library/ms165431.aspx#Anchor_2">Publishing Properties</a>. Most of these values remain the same across all deployment version (release and development). For the ones that are unique to the deployment version like the PublishUrl, UpdateUrl, and ApplicationVersion I removed them from <em>csproj</em> file. The deployment version specific properties is set in the Appveyor configuration file and used by the build script to set the right values.</p>

<p><img class="center" alt="ClickOnce publish settings" src="http://rahulpnath.com/images/clickonce_publishsetting.png" /></p>

<p>In the Appveyor configuration, the <a href="https://www.appveyor.com/docs/build-configuration#script-blocks-in-build-configuration">before_build</a> step these values are set as environment variables, which gets <a href="http://help.appveyor.com/discussions/questions/980-custom-msbuild-property">automatically passed into the MSBuild as Properties</a>. The certificate required for signing ClickOnce manifest gets installed during this step.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'> <span class="l-Scalar-Plain">before_build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">nuget restore src\CommandLineApplicationLauncher.sln</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ps</span><span class="p-Indicator">:</span> <span class="s">&quot;$env:ApplicationVersion=$env:APPVEYOR_BUILD_VERSION;$env:UpdateUrl=&#39;http://www.rahulpnath.com/clal/Releases/&#39;;</span>
</span><span class='line'>    <span class="s">$env:PublishUrl=&#39;http://www.rahulpnath.com/clal/Releases/&#39;;$mypwd</span><span class="nv"> </span><span class="s">=</span><span class="nv"> </span><span class="s">ConvertTo-SecureString</span><span class="nv"> </span><span class="s">-String</span><span class="nv"> </span><span class="s">\&quot;/(Z&amp;rbrFG){p/6W@8xZvg\&quot;</span><span class="nv"> </span><span class="s">-Force</span>
</span><span class='line'>    <span class="s">–AsPlainText\nImport-PfxCertificate</span><span class="nv"> </span><span class="s">–FilePath</span>
</span><span class='line'>    <span class="s">C:\\projects\\clal\\src\\CommandLineApplicationLauncherUI\\CommandLineApplicationLauncherUI_TemporaryKey.pfx</span><span class="nv"> </span><span class="s">cert:\\currentuser\\my</span><span class="nv"> </span><span class="s">-Password</span><span class="nv"> </span><span class="s">$mypwd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Versioning</h3>

<p>I am using <a href="http://semver.org/">semantic versioning</a> and wanted to control the version numbers for the releases explicitly. Since ClickOnce supports only four digit version numbers, the last one always defaults to zero in the release version. For Current build (development) deployments, the fourth place is used to maintain the build number, so that I can support different build version in development. I use a <a href="https://www.appveyor.com/docs/build-configuration#build-versioning">sequential number generated by appveyor</a> and set in the configuration file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.2.2.{build}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a  release I run the below script on the master branch, which updates the version number across the source code files and then push the changes to Github, which triggers a build to the updated version. Then I merge back the master into development so that the next build on development branch would be a build number off the latest released version. The script uses <a href="https://github.com/ploeh/ZeroToNine">ZeroToNine</a> for updating AssemblyInfo files and updates the version numbers in the Appveyor configuration files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">param</span><span class="p">([</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Mandatory</span><span class="p">=</span><span class="nv">$true</span><span class="p">)]</span><span class="no">[string]</span><span class="nv">$version</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Update All AssemblyInfo file versions</span>
</span><span class='line'><span class="nv">$z29</span> <span class="p">=</span> <span class="s2">&quot;./ExternalTools/ZeroToNine/Zero29.exe&quot;</span>
</span><span class='line'><span class="p">&amp;</span><span class="nv">$z29</span> <span class="n">-a</span> <span class="nv">$version</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Update Appveyor.yml</span>
</span><span class='line'><span class="p">((</span><span class="nb">Get-Content</span> <span class="p">./</span><span class="n">Appveyor</span><span class="p">.</span><span class="n">yml</span> <span class="p">|</span> <span class="nb">Out-String</span><span class="p">)</span>
</span><span class='line'><span class="o">-replace</span> <span class="s2">&quot;version: .*\.0&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;version: &quot;</span> <span class="p">+</span> <span class="nv">$version</span> <span class="p">+</span> <span class="s2">&quot;.0&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">-replace</span> <span class="s2">&quot;version: .*\.{build}&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;version: &quot;</span> <span class="p">+</span> <span class="nv">$version</span> <span class="p">+</span> <span class="s2">&quot;.{build}&quot;</span><span class="p">)).</span><span class="n">Trim</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">`r`n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">|</span> <span class="nb">Set-Content</span> <span class="n">-NoNewline</span> <span class="n">Appveyor</span><span class="p">.</span><span class="n">yml</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Artifacts and Deployment</h3>

<p>The csproj file of the WPF application has <em>Publish</em> also as a default target, which results in a publish everytime the project is build. By default, the publish directory is in the bin folder under a subdirectory <em>app.publish</em>. Appveyor allows specifying folders as <a href="https://www.appveyor.com/docs/packaging-artifacts">artifacts</a>, which marks all the files under them as artifacts. The below script is for the latest stable build and marks it with a name &lsquo;releaseBuild&rsquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'> <span class="l-Scalar-Plain">after_build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ps</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">$root = Resolve-Path .\src\CommandLineApplicationLauncherUI\bin\Release\app.publish;</span>
</span><span class='line'>    <span class="-Error"> </span><span class="p-Indicator">[</span><span class="nv">IO.Directory</span><span class="p-Indicator">]</span><span class="l-Scalar-Plain">::GetFiles($root.Path, &#39;*.*&#39;, &#39;AllDirectories&#39;) | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName releaseBuild }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Appveyor allows to <a href="https://www.appveyor.com/docs/deployment">deploy using multiple providers</a> and <a href="https://www.appveyor.com/docs/deployment/ftp">FTP</a> is one of them. I use this to deploy the artifcats generated to an Azure FTP from which I serve the installer. This is currently hosted on my blog domain. The password for the FTP location is <a href="https://ci.appveyor.com/tools/encrypt">encrypted using the Appveyor tool</a>. The below configuration pushes all the artifacts with the name &lsquo;releaseBuild&rsquo; to the FTP folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FTP</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ftps</span>
</span><span class='line'>    <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">waws-prod-sg1-003.ftp.azurewebsites.windows.net</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rahulpnath\rahulpnath</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">secure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">YOmcTqGUyjYpJOKAnOAfO30hb59cCBTy+Otlj+qrcAo=</span>
</span><span class='line'>    <span class="l-Scalar-Plain">folder</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/site/wwwroot/clal/Releases</span>
</span><span class='line'>    <span class="l-Scalar-Plain">artifact</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">releaseBuild</span>
</span></code></pre></td></tr></table></div></figure>


<p>With each push into the Github repository now we have Appveyor listening to it, pulling the latest source code, installing the code signing certificate for ClickOnce, building and running all tests in the project, publish the ClickOnce application, packaging and deploying this to the Azure FTP. There is a completely automated deployment pipeline and makes it easy to publish updates to <a href="https://github.com/rahulpnath/clal">CLAL</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Freelancing Jobs Online]]></title>
    <link href="http://rahulpnath.com/blog/getting-started-with-freelancing-jobs-online/"/>
    <updated>2016-03-01T11:57:00+11:00</updated>
    <id>http://rahulpnath.com/blog/getting-started-with-freelancing-jobs-online</id>
    <content type="html"><![CDATA[<p>Freelancing is a good way to learn new technology, get some hands on experience and not getting limited to the technology stack at your full-time job and of course earn some extra money!. There is a great demand for developers out there, so if its &lsquo;legal&rsquo; (check with your employer, if you already have another full-time job) for you to freelance then give it a try. There are a lot of online freelance platforms(<a href="https://www.upwork.com/">Upwork</a>, <a href="https://www.freelancer.com/">Freelancer</a>) that connects businesses and developers remotely. These platforms enable you as a developer, to start a profile and bid for jobs of your interest. If the business/client finds you as a match for the job, then you get signed up and can start working immediately.</p>

<p>Easy right! Yes absolutely it is, but here are a few things that might help you through the journey, that I have learned from my experiences.</p>

<p><img class="center" alt="Freelancer" src="http://rahulpnath.com/images/freelancing.jpg" /></p>

<h3><strong>Finding work</strong></h3>

<p>Finding work is just an easy search across on the platforms with your preferred skills. It will be a good idea to stick to one of the platforms so that you can build up a profile and then move on to other platforms. Landing your first job as a freelancer could be tricky as clients have a tendency to look for people with some work record on the platform, which assures them that it is a &lsquo;real human&rsquo; that they are talking to. But this is kind of &lsquo;chicken and egg problem&rsquo;. One of the best way to break into your first job is to sell yourself low - Yes, you heard it right - Really low!</p>

<p>While I started on with the idea of freelancing, I took on it with the perspective of that of an experienced developer(as I had a full-time job, which was paying me decently well). I bid on all projects with a relatively higher amount or at par to that my current job was paying, until I received back the below email from one of the clients.</p>

<blockquote><p><em>You lack test scores, have a small portfolio, and have no <a href="https://www.upwork.com">Odesk</a> history. You should try to underbid and get jobs when you are building up odesk history, get good feedback and then raise your rates later.I see you have good qualifications and don&rsquo;t mean you are not worth what you charge, this is just a way to get more clients in the beginning</em></p></blockquote>

<p>It&rsquo;s not always that you get a reply like this and it was an eye-opener for me. So to get the ball rolling, I tried bidding low on a couple of bug fix project which was about 1-2 hours work. Luckily I got one of the jobs and from then followed the exact feedback that I got back - Slowly increase rates and build profile.When bidding lower always make sure that you do on projects of smaller size, so that you don&rsquo;t feel really bad selling yourself low midway through the project (you could always renegotiate, but it might affect the feedback).</p>

<h3><strong>Bidding</strong></h3>

<p>Bidding is an important part of the freelancing cycle. Make sure you put in as much details to put across that you are an ideal candidate. It&rsquo;s where your skills to sell yourself come into play. Make sure you convey through the reasons on the &lsquo;Why&rsquo;,&lsquo;What&rsquo; and &lsquo;How&rsquo; in your bid cover letter.</p>

<blockquote><p><em>Approach bidding the same way you would attend an interview with a prospective employer.</em></p></blockquote>

<ul>
<li><strong>Why</strong> you are interested in the project</li>
<li><strong>What</strong> makes you a good candidate and your experiences. It will be good to have some references to existing projects/applications/blogs to back your claims.</li>
<li><strong>How</strong> you would approach the problem at hand and some questions probing more details.</li>
</ul>


<p>Many a times we have a tendency to copy paste bid cover letters and clients might look for specific references to their project. There are also clients who ask to start/end the bid with specific words or phrases just to make sure you have at least read through the job description.</p>

<h3><strong>Communication</strong></h3>

<p>Communication is the key when working remotely. Keeping your clients/stakeholders up to date on what&rsquo;s happening in the project, calling out any risks associated and clarifying on any issues should be done promptly. Your bid cover letter is the first impression that you leave on the client on your communications skills. So that makes it an added reason to give enough time while sending out your bid.</p>

<blockquote><p><em>Missing a deadline is not really a problem, but not communicating it up front is.</em></p></blockquote>

<p>It&rsquo;s a good idea to set a rhythm to your updates and also sticking on to an update format, so that client knows how and when to expect for things. This will also allow them to plan for work. If working on hourly jobs, it would also be a good idea to set up repositories to share code or other artifacts that you are working on. <a href="https://github.com">Github</a> (paid for private repositories), <a href="https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx">Visual Studio Online</a> (VSO) or <a href="https://bitbucket.org">Bitbuket</a> (free with limits for private repositories) are good providers that you can use. Using <a href="https://trello.com">Trello</a> boards or <a href="https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx">VSO</a> for managing work/tasks will give enough visibility to clients on the current status at any point in time.</p>

<h3><strong>Hourly vs Fixed Price</strong></h3>

<p>When starting out it might be a good idea to start with an hourly project, so that you get introduced to various aspects of freelancing and get used to it. Once comfortable with the overall life cycle you can try fixed price projects. The challenge with fixed price projects, is in getting the scope fixed and making sure that you have accounted for all possible work. Also in tactfully raising cost variations when the client changes from agreed scope or when you discover work that you had not estimated for. Having cost change costs quite often does not put across a good message, so do that wisely and only when absolutely required. Even on hourly projects, there is nothing wrong in negotiating with the per-hour rate, especially if the project is a long running one.</p>

<p>Understand how the payment terms and conditions associated with the platform works. Some platforms have the <a href="https://en.wikipedia.org/wiki/Escrow">escrow</a> model, so the risk of loosing out on money is less. For hourly projects, some platforms have tools that automatically track the amount of time you work on a project and directly bill the clients card once in a week/month, in which case you are sure to receive the payment (unless the client raises a conflict). For cases where none of the above applies, make sure that you have payment milestones set at different phases of the project and you share the code/working product only once you receive payments for milestones. Sharing videos, pictures, live remote sessions could be some alternatives to prove milestone criteria.</p>

<h3><strong>Branding</strong></h3>

<p>Proving your metal is tough if you are just starting out freelancing. Having some experiences to show case is valuable when bidding for projects. When I started off freelancing, my intention was to learn Windows Phone and Windows 8 Modern application development. Since the platform was relatively new then, I started off with a side project <a href="https://www.microsoft.com/en-us/store/apps/picfinity/9wzdncrdwxx8">Picfinity</a>, to showcase my capabilities. Building the application also helped me generate a <a href="http://www.rahulpnath.com/blog/tag/500px/">few blog posts</a> around these areas and I used both of above to showcase my ability to build applications for the Windows platform. This also helped me increase my hourly rates at a faster pace.
Branding is an ongoing effort that you need to do when freelancing, which indirectly enables you to increase your rates over time. <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">Writing blogs</a>, creating reusable libraries, contributing on forums, etc. are some of the things that help with this.</p>

<p>From the experiences gained from these freelancing platforms you will soon be able to move to consulting on your own or join premium freelancing platforms like <a href="www.toptal.com">Toptal</a>, <a href="http://x-team.com/">Xteam</a>, etc. You could also stick on with these platforms and learn new technologies while getting paid. At the very least I see that it has helped me generate content for my blogs (as I still struggle with topics to blog about).</p>

<p>Hope this helps you to get started with freelancing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Azure Key Vault from a Java Application]]></title>
    <link href="http://rahulpnath.com/blog/using-azure-key-vault-from-a-java-application/"/>
    <updated>2016-02-27T14:56:00+11:00</updated>
    <id>http://rahulpnath.com/blog/using-azure-key-vault-from-a-java-application</id>
    <content type="html"><![CDATA[<p>Azure Key Vault service is a cloud hosted, HSM(Hardware Security Modules)-backed service for managing cryptographic keys and other secrets. With Azure Key Vault, the process of managing and controlling the keys required for an application or multiple applications for an enterprise can be handled at a centralized place. If you are new to Key Vault, read the <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">Getting Started with Azure Key Vault</a>. Access to Key Vault is primarily using <a href="https://msdn.microsoft.com/en-us/library/dn868052.aspx">PowerShell</a> or the <a href="https://msdn.microsoft.com/en-us/library/azure/dn903609.aspx">REST API</a>. There are client API libraries available for <a href="https://github.com/Azure">various platforms</a> that wraps around the REST API, including one for <a href="https://github.com/Azure/azure-sdk-for-java/tree/master/services/keyvault">Java</a>. There have been some asks from my blog readers on how to use the Java SDK as there are no samples available, and this post is a result of that!</p>

<p>The Java Key Vault SDK provides a <a href="https://github.com/Azure/azure-sdk-for-java/blob/8bd59520544cf7471f8b3c2e3f9e577e68ff2852/services/keyvault/azure-keyvault/src/main/java/com/microsoft/azure/keyvault/KeyVaultClientService.java">KeyVaultClientService</a> to create a <a href="https://github.com/Azure/azure-sdk-for-java/blob/8bd59520544cf7471f8b3c2e3f9e577e68ff2852/services/keyvault/azure-keyvault/src/main/java/com/microsoft/azure/keyvault/KeyVaultInternalClientImpl.java">KeyVaultClient</a>, to interact  with the Key Vault. The SDK is available as a Maven package and is available for download <a href="http://search.maven.org/#search%7Cga%7C1%7Ckeyvault">here</a>. Setting up a project to try this will be a quickie for someone who is already working on Java, but I struggled a bit with the IDE and getting the packages into the project. (Likely the sample solution attached at the end is not the best way to get things working, but it works!. Do drop by a comment if there are better/easier ways.)</p>

<p><a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">Authenticating a client application with Azure Key Vault</a> is using an Azure AD application. You can create an AD application either from the portal or use <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">PowerShell cmdlets</a>. In this example I am using the client/Secret authentication mechanism, but it is recommended to use certificate-based authentication, so you do not have to put the secret in your source files. The KeyVaultClientService needs a <a href="https://github.com/Azure/azure-sdk-for-java/blob/8bd59520544cf7471f8b3c2e3f9e577e68ff2852/services/keyvault/azure-keyvault/src/main/java/com/microsoft/azure/keyvault/KeyVaultConfiguration.java">KeyVaultConfiguration</a> object, which in turn needs the Credentials to connect to the KeyVault. There is an abstract implementation available for <a href="https://github.com/Azure/azure-sdk-for-java/blob/8bd59520544cf7471f8b3c2e3f9e577e68ff2852/services/keyvault/azure-keyvault/src/main/java/com/microsoft/azure/keyvault/authentication/KeyVaultCredentials.java">KeyVaultCredentials</a> available which implements CloudCredentials and supports automatic bearer token refresh. Inheriting this we can create support for the clientid/secret authentication as shown below. I use the <a href="https://github.com/AzureAD/azure-activedirectory-library-for-java">Microsoft Azure Active Directory Authentication Library (ADAL) for Java</a> to authenticate against the AD application, which is again available as a <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.aad%22">Maven package</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientSecretKeyVaultCredential</span> <span class="kd">extends</span> <span class="n">KeyVaultCredentials</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">applicationId</span> <span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">applicationSecret</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ClientSecretKeyVaultCredential</span><span class="o">(</span><span class="n">String</span> <span class="n">applicationId</span><span class="o">,</span> <span class="n">String</span> <span class="n">applicationSecret</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">setApplicationId</span><span class="o">(</span><span class="n">applicationId</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">setApplicationSecret</span><span class="o">(</span><span class="n">applicationSecret</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Header</span> <span class="nf">doAuthenticate</span><span class="o">(</span><span class="n">ServiceRequestContext</span> <span class="n">request</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">challenge</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">AuthenticationResult</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">challenge</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;authorization&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">challenge</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;resource&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">=</span> <span class="n">GetAccessToken</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="n">resource</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">BasicHeader</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="n">res</span><span class="o">.</span><span class="na">getAccessTokenType</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">res</span><span class="o">.</span><span class="na">getAccessToken</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">AuthenticationResult</span> <span class="nf">GetAccessToken</span><span class="o">(</span><span class="n">String</span> <span class="n">authorization</span><span class="o">,</span> <span class="n">String</span> <span class="n">resource</span><span class="o">)</span>
</span><span class='line'>          <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">AuthenticationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AuthenticationContext</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">service</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">Future</span><span class="o">&lt;</span><span class="n">AuthenticationResult</span><span class="o">&gt;</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">acquireToken</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="k">new</span> <span class="nf">ClientCredential</span><span class="o">(</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">getApplicationId</span><span class="o">(),</span> <span class="k">this</span><span class="o">.</span><span class="na">getApplicationSecret</span><span class="o">()),</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="n">AuthenticationResult</span> <span class="n">res</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Using the above we can create a KeyVaultClient instance to connect to Key Vault. The KeyVaultClient supports all operations with the vault. The below sample uses a Key Vault key to encrypt a data and then to decrypt it back.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span><span class="o">,</span> <span class="n">URISyntaxException</span><span class="o">,</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">KeyVaultCredentials</span> <span class="n">kvCred</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ClientSecretKeyVaultCredential</span><span class="o">(</span><span class="s">&quot;AD Application ID&quot;</span><span class="o">,</span> <span class="s">&quot;AD Application Secret&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="n">Configuration</span> <span class="n">config</span> <span class="o">=</span> <span class="n">KeyVaultConfiguration</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">kvCred</span><span class="o">);</span>
</span><span class='line'>     <span class="n">KeyVaultClient</span> <span class="n">vc</span> <span class="o">=</span> <span class="n">KeyVaultClientService</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">vc</span><span class="o">.</span><span class="na">getBaseUri</span><span class="o">());</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">keyIdentifier</span> <span class="o">=</span> <span class="s">&quot;https://rahulkeyvault.vault.azure.net:443/keys/NewKey&quot;</span><span class="o">;</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">textToEncrypt</span> <span class="o">=</span> <span class="s">&quot;This is a test&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="kt">byte</span><span class="o">[]</span> <span class="n">byteText</span> <span class="o">=</span> <span class="n">textToEncrypt</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-16&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="n">Future</span><span class="o">&lt;</span><span class="n">KeyOperationResult</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">vc</span><span class="o">.</span><span class="na">encryptAsync</span><span class="o">(</span><span class="n">keyIdentifier</span><span class="o">,</span> <span class="n">JsonWebKeyEncryptionAlgorithm</span><span class="o">.</span><span class="na">RSAOAEP</span><span class="o">,</span> <span class="n">byteText</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">KeyOperationResult</span> <span class="n">keyoperationResult</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">keyoperationResult</span><span class="o">);</span>
</span><span class='line'>     <span class="n">result</span> <span class="o">=</span> <span class="n">vc</span><span class="o">.</span><span class="na">decryptAsync</span><span class="o">(</span><span class="n">keyIdentifier</span><span class="o">,</span> <span class="s">&quot;RSA-OAEP&quot;</span><span class="o">,</span> <span class="n">keyoperationResult</span><span class="o">.</span><span class="na">getResult</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">String</span> <span class="n">decryptedResult</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getResult</span><span class="o">(),</span> <span class="s">&quot;UTF-16&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">decryptedResult</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps you to get started with Azure Key Vault on Java. The sample solution is available <a href="https://github.com/rahulpnath/Blog/tree/master/AzureKeyVaultUsingJavaClient">here</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How the Deprecation of Switch AzureMode Affects Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/"/>
    <updated>2016-02-25T14:51:00+11:00</updated>
    <id>http://rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while that the &lsquo;Switch AzureMode&rsquo; is <a href="https://github.com/Azure/azure-powershell/wiki/Deprecation-of-Switch-AzureMode-in-Azure-PowerShell">deprecated in the Azure PowerShell</a> and has left breaking changes in all the scripts that were using it. <a href="http://www.rahulpnath.com/blog/azure-key-vault-and-powershell-module-version/">I had come across this mode switch first</a>, when starting off with Azure Key Vault, as the then existing cmdlets depended on it. Now that it is deprecated we have updated versions of the PowerShell cmdlets to manage <a href="https://azure.microsoft.com/en-us/services/key-vault/">Azure Key Vault</a>. This post revisits all the scripts used in the <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">previous Key Vault posts</a> and provides the updated scripts.</p>

<p>Most of the scripts have the only change of having an extra &lsquo;Rm&rsquo; indicating that those were off the Resource Manager.</p>

<figure class='code'><figcaption><span>Creating a New Azure Key Vault</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">New-AzureRmResourceGroup</span> <span class="n">-Name</span> <span class="n">KeyVaultGroup</span> <span class="n">-Location</span> <span class="s2">&quot;East Asia&quot;</span>
</span><span class='line'><span class="nb">New-AzureRmKeyVault</span> <span class="n">-VaultName</span> <span class="n">RahulKeyVault</span> <span class="n">-ResourceGroupName</span> <span class="n">KeyVaultGroup</span> <span class="n">-Location</span> <span class="s2">&quot;East Asia&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating a new key/secret remains the same</p>

<figure class='code'><figcaption><span>Creating a Key/Secret in Vault</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="c"># Key</span>
</span><span class='line'><span class="nb">Add-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="n">RahulKeyVault</span> <span class="n">-Name</span> <span class="n">NewKey</span> <span class="n">-Destination</span> <span class="n">Software</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Secret</span>
</span><span class='line'><span class="nv">$apiKey</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="n">-String</span> <span class="s2">&quot;ApiKey&quot;</span> <span class="n">-AsPlainText</span> <span class="n">-Force</span>
</span><span class='line'><span class="nb">Set-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="n">RahulKeyVault</span> <span class="n">-Name</span> <span class="s2">&quot;ApiKey&quot;</span> <span class="n">-SecretValue</span> <span class="nv">$apiKey</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Getting existing Vault details</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Get-AzureRmKeyVault</span> <span class="n">-VaultName</span> <span class="n">RahulKeyVault</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Creating AD application with certificate authentication</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$certificateFilePath</span> <span class="p">=</span> <span class="s2">&quot;C:\certificates\ADTestVaultApplication.cer&quot;</span>
</span><span class='line'><span class="nv">$certificate</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2</span>
</span><span class='line'><span class="nv">$certificate</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$certificateFilePath</span><span class="p">)</span>
</span><span class='line'><span class="nv">$rawCertificateData</span> <span class="p">=</span> <span class="nv">$certificate</span><span class="p">.</span><span class="n">GetRawCertData</span><span class="p">()</span>
</span><span class='line'><span class="nv">$credential</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$rawCertificateData</span><span class="p">)</span>
</span><span class='line'><span class="nv">$startDate</span><span class="p">=</span> <span class="no">[System.DateTime]</span><span class="p">::</span><span class="n">Now</span>
</span><span class='line'><span class="nv">$endDate</span> <span class="p">=</span> <span class="nv">$startDate</span><span class="p">.</span><span class="n">AddYears</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">$adApplication</span> <span class="p">=</span> <span class="nb">New-AzureRmADApplication</span> <span class="n">-DisplayName</span> <span class="s2">&quot;RahulTestADApplication&quot;</span>
</span><span class='line'><span class="n">-HomePage</span>  <span class="s2">&quot;http://www.rahulpnath.com&quot;</span> <span class="n">-IdentifierUris</span> <span class="s2">&quot;http://www.rahulpnath.com&quot;</span>
</span><span class='line'><span class="n">-KeyValue</span>  <span class="nv">$credential</span> <span class="n">-KeyType</span> <span class="s2">&quot;AsymmetricX509Cert&quot;</span> <span class="n">-KeyUsage</span> <span class="s2">&quot;Verify&quot;</span> <span class="n">-StartDate</span> <span class="nv">$startDate</span> <span class="n">-EndDate</span> <span class="nv">$endDate</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Associating the AD application with the key vault</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$servicePrincipal</span> <span class="p">=</span> <span class="nb">New-AzureRmADServicePrincipal</span> <span class="n">-ApplicationId</span> <span class="nv">$adApplication</span><span class="p">.</span><span class="n">ApplicationId</span>
</span><span class='line'><span class="nb">Set-AzureRmKeyVaultAccessPolicy</span> <span class="n">-VaultName</span> <span class="s1">&#39;RahulKeyVault&#39;</span> <span class="n">-ObjectId</span>  <span class="nv">$servicePrincipal</span><span class="p">.</span><span class="n">Id</span> <span class="n">-PermissionsToKeys</span> <span class="n">all</span> <span class="n">-PermissionsToSecrets</span> <span class="n">all</span>
</span><span class='line'><span class="nv">$ServicePrincipal</span><span class="p">.</span><span class="n">ApplicationId</span> <span class="c">#Outputs the ServicePrincipalName/AppPrincipalId </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>User Role assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">New-AzureRmRoleAssignment</span> <span class="n">-Mail</span> <span class="n">keyvaultuser</span><span class="nv">@domain</span><span class="p">.</span><span class="n">onmicrosoft</span><span class="p">.</span><span class="n">com</span>
</span><span class='line'>  <span class="n">-RoleDefinitionName</span> <span class="n">Reader</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please drop a comment if I have missed any!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up AutoHotkey to Speed up Trivial Tasks]]></title>
    <link href="http://rahulpnath.com/blog/setting-up-autohotkey-to-speed-up-trivial-tasks/"/>
    <updated>2016-02-09T04:22:00+11:00</updated>
    <id>http://rahulpnath.com/blog/setting-up-autohotkey-to-speed-up-trivial-tasks</id>
    <content type="html"><![CDATA[<p>A lot of trivial tasks that we do daily on our computer can be automated to make it faster and reduce the number of keystrokes (<a href="http://www.keysleft.com">as they are limited</a>). <a href="https://autohotkey.com/">AutoHoykey</a>(AHK) is an excellent tool to automate a lot of these and is <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of my favorite tool</a>. I use a very limited set of functionality of AHK,  to set up hot strings, launch applications, and mapping caps lock as backspace. The installer to the latest version is available <a href="https://autohotkey.com/download/ahk-install.exe">here</a>.</p>

<blockquote><p>&ldquo;AutoHotkey (AHK) is a free, open-source macro-creation and automation software for Windows that allows users to automate repetitive tasks. It is driven by a scripting language that was initially aimed at providing keyboard shortcuts, otherwise known as hotkeys, that over time evolved into a full-fledged scripting language.&rdquo;</p></blockquote>

<p><strong>Hotstrings</strong> are to map short key combinations that expand on completion. This one is to handle all common phrases, words like emails, default mail replies, etc. Defining a hotstring is as shown below or look up the <a href="https://autohotkey.com/docs/Hotstrings.htm">documentation here</a> for more details</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>::emg::rahulpnath@gmail.com
</span><span class='line'>::myn::Rahul P Nath
</span><span class='line'>::myb::http://www.rahulpnath.com
</span></code></pre></td></tr></table></div></figure>


<p>You can use some easy to remember keywords for these like emg means &lsquo;Email Gmail&rsquo; and myn means &lsquo;My Name&rsquo; etc.</p>

<p><strong>Hot keys</strong> are to launch applications on those key combinations. You can use this to launch your favorite applications with the key combinations of your choice. Defining  hot keys is as shown below or look up the <a href="https://autohotkey.com/docs/Hotkeys.htm">documentation here</a> for more details</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>^!C::
</span><span class='line'>Run &quot;C:\Users\rahulpnath\Documents\Apps\cmder\Cmder.exe&quot;
</span><span class='line'>return
</span></code></pre></td></tr></table></div></figure>


<p><strong>Capslock to Backspace</strong> mapping is something that I got inspired from the <a href="http://colemak.com/">Colemak layout</a> and find it useful even with the QWERTY layout. I use the <a href="https://autohotkey.com/docs/commands/Send.htm">Send</a> command to send simulated keystrokes. In the rare case of actually needing the CapsLock key, I just need to press it along with Shift to toggle on and off.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>CapsLock:: Send {BackSpace}
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Running AHK scripts on startup</strong></h4>

<p>To automatically run these scripts on startup, I use the <a href="http://windows.microsoft.com/en-au/windows/schedule-task#1TC=windows-7">Task Scheduler</a> that comes with Windows. To create a new task follow the steps as shown below.</p>

<p>In Task Scheduler select &lsquo;Create Task&rsquo; and enter the Name and Description. Set it to run with highest privileges, so that the scripts work even when on application&rsquo;s running in admin mode. Create a trigger for the task to run and I have set it &lsquo;At log on&rsquo; to run every time I log on. Create an Action to &lsquo;Start a program&rsquo; and select the script file (.ahk) with all your scripts. Once created you can right-click on the task and select Run and verify that the script has started and is working.</p>

<p><img class="center" alt="Visual Studio Code Coverage" src="http://rahulpnath.com/images/ahk_task_general.PNG" /></p>

<p><img class="center" alt="Visual Studio Code Coverage" src="http://rahulpnath.com/images/ahk_task_trigger.PNG" /></p>

<p><img class="center" alt="Visual Studio Code Coverage" src="http://rahulpnath.com/images/ahk_task_actions.PNG" /></p>

<p>I synchronize these scripts over Onedrive, to make it available on all my computers. The only thing to do on all the computers is to create the startup task. The features discussed above is just the tip of an iceberg, and should help you get started. AHK has a lot more features that you can explore at the project site. Hope this helps you to set up and automate some of your tasks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Octopress Workflow for New Posts]]></title>
    <link href="http://rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/"/>
    <updated>2016-01-20T22:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts</id>
    <content type="html"><![CDATA[<p>Over the past month I had thought of migrating this blog to Hugo, a static site generator that is faster than the current one, Octopress. Lack of workflow for creating new posts and slower build times were the main reasons. I am the kind of person when writing post want to see often, how it looks like on the real site. With the current number of posts it takes around 40-50 seconds to build the entire site and it makes me to wander off to something else while the build is happening - at times it takes a long time to get back to writing!. But migrating to a new platform has a lot of challenges and time-consuming and I did not want to invest my time in that, so though of looking out for ways to optimize the current process. A bit of googling and playing around with Ruby, solved both of the major issues and I have an improved workflow!</p>

<h4><strong>Draft workflow</strong></h4>

<p>I was lucky to find this <a href="http://neverstopbuilding.com/how-to-enhance-your-octopress-draft-and-heroku-deploy-process">post</a> which handled most of the draft workflow process. Most of the code below is used from there with a very few minor additions. Newer versions of Jekyll support <a href="http://jekyllrb.com/docs/drafts/">working with drafts</a> and uses the &lsquo;<em>&ndash;drafts</em>&rsquo; switch to build the drafts (instead of using published flag as in thr above linked post), that are in &lsquo;<em>_drafts</em>&rsquo; folder. Drafts are posts which does not have date&rsquo;s, so I added in a placeholder text, &lsquo;<em>thisIsStillADraft</em>&rsquo;, in the yaml front matter of the post which will later be replaced with the post publish date. Also added in the code to open the default writer with the newly created post</p>

<figure class='code'><figcaption><span>Rake new_draft</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># usage rake new_draft[my-new-draft] or rake new_draft[&#39;my new draft&#39;]</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Begin a new draft in </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">drafts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:new_draft</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">get_stdin</span><span class="p">(</span><span class="s2">&quot;Enter a title for your post: &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">drafts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">drafts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> already exists. Do you want to overwrite?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Creating new draft: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;/</span><span class="p">,</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;tags: &quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;thisIsStillADraft:&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;keywords: &quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;description: &quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">system</span> <span class="sx">%{cmd /c &quot;start </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="sx">&quot;}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The publish draft task just asks for the post to publish and replaces the placeholder text with the current date time. Also it moves the post from the &lsquo;<em>_drafts</em>&rsquo; folder to the &lsquo;<em>_posts</em>&rsquo; folder with the file name appended with the date time. Since I run this just before deploying a post, the date on the post will be the actual publish date, and not the date I started writing the post (usually writing a  post spans over multiple days).</p>

<figure class='code'><figcaption><span>Rake publish_draft</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># usage rake publish_draft</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Select a draft to publish from </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">drafts_dir</span><span class="si">}</span><span class="s2"> on the current date.&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:publish_draft</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">drafts_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">drafts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">drafts</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">drafts_path</span><span class="si">}</span><span class="s2">/*.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">drafts</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">draft</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">draft</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">content</span> <span class="o">=~</span> <span class="sr">/\A(---\s*\n.*?\n?)^(---\s*$\n?)/m</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="vg">$1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Error reading file </span><span class="si">#{</span><span class="n">draft</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">SyntaxError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;YAML Exception reading </span><span class="si">#{</span><span class="n">draft</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  [</span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">]  </span><span class="si">#{</span><span class="n">data</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Publish which draft? &quot;</span>
</span><span class='line'>  <span class="n">answer</span> <span class="o">=</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="sr">/\d+/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">drafts</span><span class="o">[</span><span class="n">answer</span><span class="o">.</span><span class="n">to_i</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>    <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">source</span> <span class="o">=</span> <span class="n">drafts</span><span class="o">[</span><span class="n">answer</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/</span><span class="si">#{</span><span class="n">drafts_path</span><span class="si">}</span><span class="sr">\//</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dest</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Publishing post to: </span><span class="si">#{</span><span class="n">dest</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">source</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">source_file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">contents</span> <span class="o">=</span> <span class="n">source_file</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>      <span class="n">contents</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^thisIsStillADraft:$/</span><span class="p">,</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="s2">&quot;w+&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">contents</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Index not found!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With these two new rake tasks, I can now create as many draft posts at a time and publish them once ready.</p>

<h4><strong>Improving the build time</strong></h4>

<p>Jekyll build command options provides a switch, &lsquo;<em>configuration</em>&rsquo;, that allows to pass a configuration file instead of using &lsquo;<em>_config.yml</em>&rsquo;. In the configuration file we can specify a &lsquo;exclude&rsquo; option to exclude the directories and/or files from the build. I created a new task for building only the current drafts, by specifying the &lsquo;<em>&ndash;drafts</em>&rsquo; switch and a dynamically generated configuration file, <em>_previewconfig.yml</em>, which excludes the &lsquo;<em>_posts</em>&rsquo; folder. This dramatically increases the build time, and completes almost immediately after a making a change to a post. This fits perfectly into my workflow, as while writing new posts I do not want to see any already published posts. You can  add the dynamically generated configuration file name to the <em>.gitignore</em> as I do not delete it in the tasks. I did not want to use the &lsquo;<em>rake isolate</em>&rsquo; task that is already present in the  rakefile, as that does not integrate with the draft workflow and unnecessarily moves all the posts to a temporary place.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;preview the site in a web browser with all the draft posts&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:previewdrafts</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Starting to watch source with Jekyll and Compass. Starting Rack on port </span><span class="si">#{</span><span class="n">server_port</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;compass compile --css-dir </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/stylesheets&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/stylesheets/screen.css&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;_config.yml&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">source_file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">contents</span> <span class="o">=</span> <span class="n">source_file</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;_previewconfig.yml&quot;</span><span class="p">,</span> <span class="s2">&quot;w+&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">contents</span><span class="p">)</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">&quot;exclude: [</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">]&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">jekyllPid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">spawn</span><span class="p">({</span><span class="s2">&quot;OCTOPRESS_ENV&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;preview&quot;</span><span class="p">},</span> <span class="s2">&quot;jekyll build --watch --drafts --config _previewconfig.yml&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">compassPid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;compass watch&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rackupPid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;rackup --port </span><span class="si">#{</span><span class="n">server_port</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">trap</span><span class="p">(</span><span class="s2">&quot;INT&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">[</span><span class="n">jekyllPid</span><span class="p">,</span> <span class="n">compassPid</span><span class="p">,</span> <span class="n">rackupPid</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">pid</span><span class="o">|</span> <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="n">pid</span><span class="p">)</span> <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ESRCH</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="n">jekyllPid</span><span class="p">,</span> <span class="n">compassPid</span><span class="p">,</span> <span class="n">rackupPid</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">pid</span><span class="o">|</span> <span class="no">Process</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Dropbox integration</strong></h4>

<p>At times, I have started to draft blog posts while commuting to work from my mobile device, so I wanted to sync my draft posts to <a href="https://db.tt/bvYw3pL6">Dropbox</a>, so that I can edit it from my <a href="http://www.rahulpnath.com/blog/review-two-months-and-counting-android-and-nexus-5/">mobile phone</a>. Apps like <a href="https://play.google.com/store/apps/details?id=net.keepzero.markdrop&amp;hl=en">MarkDrop</a>/<a href="https://play.google.com/store/apps/details?id=net.keepzero.markdrop&amp;hl=en">JotterPad</a> integrates with Dropbox and supports Markdown editing. I set up a drafts folder on my Dropbox folder on laptop, which is automatically synced using the <a href="https://www.dropbox.com/install">Dropbox application</a>. I then used <a href="https://technet.microsoft.com/en-us/library/cc753194.aspx">Mklink</a> to create a symbolic link from the folder on Dropbox to my drafts folder in my blog repository. Whenever a new draft post is added, it gets automatically inserted into the Dropbox folder, which will then be synced to cloud and available for edit on my mobile phone too. (Part of this post is written from my mobile!)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>mklink /D &quot;C:\blog\_drafts&quot; &quot;C:\dropbox\_drafts&quot;
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4><strong>Cmder integration</strong></h4>

<p><a href="http://cmder.net/">Cmder</a> is a portable console emulator for Windows and provides a good nice looking feature rich console experience on Windows and is one of my <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">favourite tools</a>. Creating alias for commands is one of the features, that allows to create a short key combination for an otherwise long command. You can use this to create commands for the task in Octopress like below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>alias rp=rake previewdrafts
</span><span class='line'>
</span><span class='line'>// Below are the list of alias that I have for the rake tasks
</span><span class='line'>rp=rake previewdrafts
</span><span class='line'>rps=rake preview // Preview the whole site
</span><span class='line'>rd=rake deploy
</span><span class='line'>rnd=rake new_draft[&quot;$&quot;] // Takes in the post name as parameter
</span><span class='line'>rpd=rake publish_draft
</span><span class='line'>rd=rake deploy
</span></code></pre></td></tr></table></div></figure>


<p><strong>So my new workflow is</strong></p>

<p>rnd Optimizing Octopress Workflow for New Posts <br/>
rp <br/>
rpd <br/>
rps <br/>
rd</p>

<p>It&rsquo;s much faster, cleaner and easier publishing new posts. To see the latest code for the rake tasks head over to the original file on <a href="https://github.com/rahulpnath/rahulpnath.com/blob/master/Rakefile">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing Tests into Test Suites for Visual Studio]]></title>
    <link href="http://rahulpnath.com/blog/organizing-tests-into-test-suites-for-visual-studio/"/>
    <updated>2016-01-18T22:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/organizing-tests-into-test-suites-for-visual-studio</id>
    <content type="html"><![CDATA[<p>While working with large code base, that has a lot of tests (unit, integration, acceptance etc), running all of them every time we make a small  change (if you are doing TDD or just using build for feedback) takes a lot of time. Organizing tests into different test suites, making it easier to run as required by the current context, is handy in such cases.</p>

<p>There are multiple ways that we can do this within Visual Studio and below are some of the options available. I tend to use a mix of all these in my current project. This gives the flexibility to run only the new tests that I am writing while writing new code or set of related tests for the updates that I am making. Once done with the changes, I can run the full suite of unit tests, followed by the integration tests. This reduces the interruption duration while coding and has a direct impact on the overall productivity too. (If you think small interruptions does not matter much think twice!)</p>

<p><img class="center" alt="Geek productivity" src="http://rahulpnath.com/images/geek_productivity.jpg" /></p>

<h4><strong>Test Traits</strong></h4>

<p>Traits are a good way to group tests together and to run them as different suites. It encompasses TestCategory, TestProperty, Priority and Owner. Using <a href="https://msdn.microsoft.com/en-au/library/microsoft.visualstudio.testtools.unittesting.testcategoryattribute.aspx">TestCategory</a> attribute we can specify  the group of the test and the Visual Studio Test Explorer uses this value to group the tests and allows executing tests in specific groups.</p>

<p><img class="center" alt="Visual Studio Test Traits" width="75%" src="http://rahulpnath.com/images/vs_testExplorer_traits.png" /></p>

<p>Limitation with the above approach is that it depends on developers to put these attributes on the test cases or class level and not leveraging any existing conventions that might be already in place. Having integration tests, unit tests, acceptance tests in different projects is a very common practice, with conventions like project names ending with &lsquo;.UnitTests, .IntegrationTests, .AcceptanceTests&rsquo; etc.</p>

<h4><strong>Build Tasks and Task Runner Explorer</strong></h4>

<p>The <a href="https://visualstudiogallery.msdn.microsoft.com/8e1b4368-4afb-467a-bc13-9650572db708">Task Runner Explorer</a> (TRE) provides custom task runner support to Visual Studio, allowing to run grunt/gulp task or target inside Visual Studio. Grunt/Gulp has packages for most of the unit testing frameworks, using which different build tasks can be created. To select the tests to execute different conventions can also be used. Below is an example of a gulp task to execute all the c# unit tests in the project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xunit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-xunit-runner&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xunitConsolePath</span> <span class="o">=</span> <span class="s1">&#39;xunit.console.exe&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">unitTestsConvention</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;**/*.Tests.dll&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;c#UnitTests&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">runTests</span><span class="p">(</span><span class="nx">unitTestsConvention</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runTests</span><span class="p">(</span><span class="nx">dllPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">dllPath</span><span class="p">,</span> <span class="p">{</span> <span class="nx">read</span><span class="o">:</span> <span class="kc">false</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">xunit</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">executable</span><span class="o">:</span> <span class="nx">xunitConsolePath</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span> <span class="nx">parallel</span><span class="o">:</span> <span class="s1">&#39;all&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly we can have multiple tasks to execute different groups of tests and it will be available in the TRE within Visual Studio as shown below. This approach gives the most flexibility, allowing tests be grouped any way and providing ability to execute tests across the stack of technologies.
<img class="center" alt="Visual Studio Task Runner Explorer" src="http://rahulpnath.com/images/vs_tre.png" /></p>

<h4><strong>Tests Settings File</strong></h4>

<p>Creating Test Playlist is an easy way to group tests into a playlist and executing them as  group. From the Test Explorer, select the tests to be grouped and on right-click, the option to create playlist is available. The saved playlists can be selected from the drop down menu on the top bar for later execution.</p>

<p><img class="center" alt="Visual Studio Test Playlist" src="http://rahulpnath.com/images/vs_testExplorer_playlist.png" /></p>

<p>This works well for short-lived groupings, when we are actively working on a part of the code and need to execute tests for that area. Every time a new test is added, we need to add it explicitly to the playlist if required.</p>

<p>We have seen multiple ways of grouping tests into test suites, and each of them comes handy in different situations. For project wide convention tests, I tend to use build tasks that integrate with TRE as it is more flexible and extendable. Do you use any other ways to group your tests, drop in with a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Agnostic Books For Every Developer 2]]></title>
    <link href="http://rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/"/>
    <updated>2016-01-02T22:51:03+11:00</updated>
    <id>http://rahulpnath.com/blog/language-agnostic-books-for-every-developer-2</id>
    <content type="html"><![CDATA[<p>Exactly a year back I had <a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer/">written about the same topic</a>, and over the time I have picked up a few more books, that I am sharing here. Like the earlier post I will let the books do the talking.</p>

<p><div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0131495054/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131495054&linkCode=as2&tag=rahulpnath-20&linkId=XR55UAOEPPMVMFK3">
            <img src="http://rahulpnath.com/images/books_xunit.jpg" data-holder-rendered="true" style="display: block;" >
             </a>
            <div class="caption">
              <h5><strong>xUnit Test Patterns : Refactoring Test Code</strong></h5>
            </div>
          </div>
        </div>
       <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
          <a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321503627&linkCode=as2&tag=rahulpnath-20&linkId=TR6UCCVP6CMGBBZQ" >
            <img src="http://rahulpnath.com/images/books_goos.jpeg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Growing Object-Oriented Software, Guided by Tests</strong></h5>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0132350882&linkCode=as2&tag=rahulpnath-20&linkId=CVCVZFAR5SBYVMJW" >
            <img src="http://rahulpnath.com/images/books_cleancode.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Clean Code: A Handbook of Agile Software Craftsmanship</strong></h5>          <br/>
            </div>
          </div>
        </div>
     <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0978739213/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0978739213&linkCode=as2&tag=rahulpnath-20&linkId=OYRDBB5TR4VHBK6L" >
            <img src="http://rahulpnath.com/images/books_releaseit.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Release It!: Design and Deploy Production-Ready Software</strong></h5>          <br/>
            </div>
          </div>
        </div>
       </div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321200683/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321200683&linkCode=as2&tag=rahulpnath-20&linkId=IQV6RX4M6RXKG4O2" >
            <img src="http://rahulpnath.com/images/books_eip.gif" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions</strong></h5>
            </div>
          </div>
        </div>
      <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://www.amazon.com/gp/product/0201633612/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201633612&linkCode=as2&tag=rahulpnath-20&linkId=JBBJOO5EP4GLYIXG" >
            <img src="http://rahulpnath.com/images/books_designpatterns.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Design Patterns: Elements of Reusable Object-Oriented Software</strong></h5>          <br/>
            </div>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131177052&linkCode=as2&tag=rahulpnath-20&linkId=TTKEEYQLEMTOXPPQ" >
            <img src="http://rahulpnath.com/images/books_welc.jpg" data-holder-rendered="true" style="display: block;">
            </a>
            <div class="caption">
              <h5><strong>Working Effectively with Legacy Code</strong></h5>
            </div>
          </div>
        </div>
    <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://www.amazon.com/gp/product/0321545613/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321545613&linkCode=as2&tag=rahulpnath-20&linkId=UZC2I2HABQUNCT2U" >
            <img src="http://rahulpnath.com/images/books_frameworkdesign.jpg" data-holder-rendered="true" style="display: block;">
           </a>
            <div class="caption">
              <h5><strong>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries</strong></h5>
            </div>
          </div>
        </div>
      </div></p>

<p>Have a great year ahead and some good reading.</p>

<p><em>* The links are Amazon Affiliate Links!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning TypeScript: Setting up the Environment]]></title>
    <link href="http://rahulpnath.com/blog/learning-typescript-setting-up-the-environment/"/>
    <updated>2015-12-25T23:30:07+11:00</updated>
    <id>http://rahulpnath.com/blog/learning-typescript-setting-up-the-environment</id>
    <content type="html"><![CDATA[<blockquote><p>TypeScript is  superset of JavaScript and compiles to clean JavaScript output.</p></blockquote>

<p><a href="http://www.typescriptlang.org/">TypeScript</a> has been around for some time and is gaining more traction these days with more and more projects embracing it. The latest addition to the list <a href="https://angular.io/">Angular 2</a>, which is a very popular JavaScript framework. TypeScript brings in more structure to the way JavaScript is written and maintained. Being a compiled language, errors will be found as the code is written and not waiting till run time. Ease of refactoring and rich tooling support makes TypeScript a perfect choice for large-scale projects. TypeScript also provides improved code readability and organizing capabilities. The official documentation is a good starting point to get started with TypeScript and get some hands-on experience using <a href="http://www.typescriptlang.org/Playground">Playground</a>, which shows the compiled JavaScript real-time in browser. If you are like me, who would prefer a similar experience, but in you favourite editor then this post explains how to set up the environment for playing around with TypeScript and seeing the real-time compiled JavaScript.</p>

<ul>
<li><p><strong>Create folder</strong> To start with lets first create a folder to work in. In this example I would be using npm(Node Package Manager) to get all the required packages. If you are new to Node, then head off to <a href="https://nodejs.org/en/">here</a> to get started and install the runtime before continuing on.</p></li>
<li><p><strong>npm init</strong> Once done with the node setup, run the <a href="https://docs.npmjs.com/cli/init">init</a> command, within the project folder (created above), to initialize the node project. This prompts a series of questions and creates a <em>package.json</em> file with the entered options.</p></li>
<li><strong>npm install -g typescript</strong> If you already have TypeScript installed (which comes in default with Visual Studio 2013 Update 2 onwards) then you can skip this step. If not, run &lsquo;npm install -g typescript&rsquo;, which will install it into the global scope.</li>
<li><strong>Hello World from TypeScript</strong> With the compiler setup, we are good to write out first hello world, for which we create a file with .ts extension.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">HelloWorld</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hello World &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">HelloWorld</span><span class="p">(</span><span class="s2">&quot;TypeScript&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To compile this manually we need to run the TypeScript compiler (which we installed in the previous step). The below command will compile the TypeScript file into JavaScript and output into the same folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tsc HelloWorld.ts
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">HelloWorld</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">HelloWorld</span><span class="p">(</span><span class="s2">&quot;TypeScript&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Automating the compilation</strong> To prevent running the above step every time we make a change to the typescript file, we can automate the build step. The tsc has a compiler switch to watch the file for changes and automatically compile every time a change happens. For this run the above command with a &lsquo;<em>&ndash;watch</em>&rsquo; command.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tsc HelloWorld.ts --watch
</span></code></pre></td></tr></table></div></figure>


<p>
<img class="center" alt="Visual Studio Code Coverage" src="http://rahulpnath.com/images/tsc_options.png" /></p>

<p>The watch switch is only available in the later versions of the compiler. To check whether your version supports it, run tsc alone which will show all the supported commands. If you do not see the watch switch as shown above, you will need to update the TypeScript compiler version. For this check the environment variables to see the path to your current compiler. If this has a path to an older version (possibly to one that Visual Studio installed at <em>Program Files (x86)\Microsoft SDKs\TypeScript</em>), then remove it. Now do a fresh install using npm, to install the latest version.</p>

<p>Open up both the TypeScript file and the generated JavaScript file in your favorite editor and you will see real-time updates to the JavaScript code, when you update the TypeScript code.<br/>
<img class="center" alt="Visual Studio Code Coverage" src="http://rahulpnath.com/images/TypeScript.gif" /></p>

<p>Hope this helps you with setting up the development environment to learn TypeScript!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing User Permissions for Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/managing-user-permissions-for-key-vault/"/>
    <updated>2015-10-11T01:08:17+11:00</updated>
    <id>http://rahulpnath.com/blog/managing-user-permissions-for-key-vault</id>
    <content type="html"><![CDATA[<blockquote><p>Please check <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">here</a> for scripts using the latest PowerShell cmdlets.</p></blockquote>

<p>Granting access to different users to manage the key vault would be a typical scenario in an organization. This could either be to create new vaults or manage keys and secrets within an existing key vault. One way to do that would be to create an <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">AD application and use that to manage the vault</a>. Alternatively you would also want to add users to your azure subscription and grant them access for this (which was exactly what one of my readers wanted to achieve and reached out to me for).</p>

<p>In this post we will see how we can add a new user and grant him the required permissions. The permissions to be provided would differ based on your requirement, so you would want to modify them as required.</p>

<h4><strong>Creating the user</strong></h4>

<p><a href="https://azure.microsoft.com/en-us/documentation/articles/active-directory-create-users/">Creating a new user to the azure subscription</a> can easily be done from the <a href="https://manage.windowsazure.com">management portal</a>. We need to create the user in the azure subscription, as any resource in the subscription can be accessed only after authenticating against the Active Directory (AD) associated with it.</p>

<blockquote><p>Every Azure subscription is associated with an Azure Active Directory (AD) and needs to be authenticated with, before any of its resources can be used.</p></blockquote>

<p>Azure Key Vault gets created in the default AD associated with the subscription, so we need to add the new user to that. (If you are not sure on how to find the default AD <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">this post</a> describes it in the beginning). In the portal under the <em>Azure Directory</em> option, select the default directory and on the <em>Users</em> tab, we can add a new user.</p>

<p><img src="http://rahulpnath.com/images/ad_add_user.png" class="center"></img></p>

<p>When creating the user, you can <a href="https://azure.microsoft.com/en-us/documentation/articles/active-directory-assign-admin-roles/">assign the role required</a> based on the requirement. In this case I have added the user to a &lsquo;<em>User</em>&rsquo; role, as I do not want this user to have any administrative access to the my azure subscriptions or resources.</p>

<h4><strong>Creating the key vault</strong></h4>

<p>To create a key vault that we want to give permissions for the user, the below powershell scripts can be used. If you are new to key vault, then check out the <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">Getting Started with Azure  Key Vault</a> or <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">other related articles</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Switch</span><span class="n">-AzureMode</span> <span class="n">AzureResourceManager</span>
</span><span class='line'><span class="nb">New-AzureResourceGroup</span> <span class="err">–</span><span class="n">Name</span> <span class="s1">&#39;SharedGroup&#39;</span> <span class="err">–</span><span class="n">Location</span> <span class="s1">&#39;East Asia&#39;</span>
</span><span class='line'><span class="nb">New-AzureKeyVault</span> <span class="n">-VaultName</span> <span class="s1">&#39;TestKeyVault&#39;</span> <span class="n">-ResourceGroupName</span>
</span><span class='line'>  <span class="s1">&#39;SharedGroup&#39;</span> <span class="n">-Location</span> <span class="s1">&#39;East Asia&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above scripts creates the key vault under the &lsquo;<em>SharedGroup</em>&rsquo;. <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/#resource-groups">Resource Groups</a> are logical containers, used to group resources together as required. <a href="https://azure.microsoft.com/en-us/documentation/articles/role-based-access-control-configure/">Access to azure resources</a> can be assigned at any of the three levels (subscription, resource group or resource) and it inherits down the hierarchy as shown below. Roles can be assigned specifically to a resource, or to resource group (which would mean all to all resources in that group) or at the subscription level (which would apply to all resources/resource groups in that subscription.).</p>

<p><a href="https://acomdpsstorage.blob.core.windows.net/dpsmedia-prod/azure.microsoft.com/en-us/documentation/articles/role-based-access-control-configure/20151006095042/rbacassignmentscopes.png"><img src="http://rahulpnath.com/images/rbac_assignment_scopes.png" class="center"></img></a></p>

<h4><strong>Setting Permission on the resource group</strong></h4>

<p>As an administrator I want the newly created user to have permission to interact with the key vault, but not create new or delete existing vaults. I would also want to give the user ability to modify keys and secrets within the vault. Currently since the new user does not have any rights, we should first give him rights to see the vaults in the <em>SharedGroup</em>. For this a <em>Reader</em> role from the set of <a href="https://azure.microsoft.com/en-us/documentation/articles/role-based-access-control-configure/#built-in-roles">built in roles</a> can be assinged, through the new azure portal or powershell.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">New-AzureRoleAssignment</span> <span class="n">-Mail</span> <span class="n">keyvaultuser</span><span class="nv">@domain</span><span class="p">.</span><span class="n">onmicrosoft</span><span class="p">.</span><span class="n">com</span>
</span><span class='line'>  <span class="n">-RoleDefinitionName</span> <span class="n">Reader</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://rahulpnath.com/images/resource_group_permission.png" class="center"></img></p>

<p>To modify objects (keys/secrets) in the key vault we need to run <a href="https://msdn.microsoft.com/en-us/library/dn903607.aspx">Set-AzureKeyVaultAccessPolicy</a> cmdlet with the required permissions, to grant access for the user. In the below script the user is given all Permissions to both keys and secrets, and this again depends on your requirement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Set-AzureKeyVaultAccessPolicy</span> <span class="n">-VaultName</span> <span class="s2">&quot;TestKeyVault&quot;</span> <span class="n">-UserPrincipalName</span> <span class="s2">&quot;keyvaultuser@domain.onmicrosoft.com&quot;</span>
</span><span class='line'>  <span class="n">-PermissionsToKeys</span> <span class="n">all</span> <span class="n">-PermissionsToSecrets</span> <span class="n">all</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Creating the key (new user)</strong></h4>

<p>The new user can login with the email id and password, shared to him by the administrator (received when creating the user in the AD), in the powershell prompt and create keys/secrets in the key vault.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$userName</span> <span class="p">=</span> <span class="s1">&#39;keyvaultuser@domain.onmicrosoft.com&#39;</span>
</span><span class='line'><span class="nv">$subscriptionPassword</span> <span class="p">=</span> <span class="s1">&#39;mypassword&#39;</span>
</span><span class='line'><span class="nv">$securePassword</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="n">-String</span> <span class="nv">$subscriptionPassword</span> <span class="n">-AsPlainText</span> <span class="n">-Force</span>
</span><span class='line'><span class="nv">$cred</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Management</span><span class="p">.</span><span class="n">Automation</span><span class="p">.</span><span class="n">PSCredential</span><span class="p">(</span><span class="nv">$userName</span><span class="p">,</span> <span class="nv">$securePassword</span><span class="p">)</span>
</span><span class='line'><span class="nb">Add-AzureAccount</span> <span class="n">-Credential</span> <span class="nv">$cred</span>
</span><span class='line'><span class="nb">Add-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="s1">&#39;TestKeyVault&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;MyKey&#39;</span> <span class="n">-Destination</span> <span class="s1">&#39;Software&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The newly created user now has full access on the key vault and only that. He can only add/remove objects within the key vault and see resources within the SharedGroup. This way the administrator can be rest assured that no other sensitive information or accesses is being shared accidentally. Periodically revisiting these permissions and revoking unnecessary accesses is recommended!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools that I use]]></title>
    <link href="http://rahulpnath.com/blog/tools-that-I-use/"/>
    <updated>2015-10-10T06:44:19+11:00</updated>
    <id>http://rahulpnath.com/blog/tools-that-I-use</id>
    <content type="html"><![CDATA[<p>Tools are an indispensable part of our daily life and we all have our own likes and dislikes for them. Here are a list that I use (almost daily), most of them influenced from the <a href="http://www.hanselman.com/tools">greater list</a>. Having a great keyboard support is something that I look out for, especially for those that I interact with more frequently (IDE&rsquo;s or code editors). Couple of days back, while having a chat with my friend <a href="https://twitter.com/zpbappi">Bappi</a> some of these came up and he found a few interesting, so though of sharing the list over here.</p>

<ul>
<li><p><strong><a href="https://www.visualstudio.com/">Visual Studio</a></strong>: This one is almost daily and is one of them that gets on along with my laptop. For a Microsoft stack developer I do not think there are much alternatives(<a href="http://www.microsoft.com/web/webmatrix/">WebMatrix</a>, <a href="https://code.visualstudio.com/">Visual Studio Code</a>) if you are looking for full fledged development. Personally I am on VS2015 now(since I am lucky enough to have a free MSDN subscription), but being on any of the version is equally good.</p></li>
<li><p><strong><a href="https://www.onenote.com/">One Note</a></strong>: For note taking I prefer OneNote as it is easy to manage and organize and is available on all platforms. Collaborating with multiple users is also so easy and comes loaded with features making it suitable for all kinds of scenarios.</p></li>
<li><p><strong><a href="https://onedrive.live.com/about/en-in/">OneDrive</a>/<a href="https://db.tt/bvYw3pL6">Dropbox</a></strong>: I use a mix of OneDrive and Dropbox for backing up my data and photos and find the experience for both good on all devices.</p></li>
<li><p><strong><a href="http://cmder.net/">Cmder</a></strong>: Looking out for a cool console in Windows, then this is the one! Loads of features and awesome color scheme makes it really one of the best consoles. Ctrl + C for copy and Ctrl + V works nicely on this(and you do not need to be on Windows 10 for this) and that alone would drive me to try out this one.</p></li>
<li><p><strike><strong><a href="http://www.sublimetext.com/">Sublime Text</a></strong>: As the tag-line says, this is &lsquo;<em>The text editor that you would fall in love with</em>&rsquo;. I use this primarily for all my writing (except for markdown formats, for which I use <a href="http://markdownpad.com/">MarkdownPad</a>), quick edits, formatting and even for some coding when I do not want the full power of Visual Studio. There are loads of plugins available and a good community of users backing it.</strike>
<strong><a href="https://code.visualstudio.com/">Visual Studio Code</a></strong>: The experience on VS Code has dramatically improved from the day that I originally wrote the post. Code is now my one stop editor and I use it for my blogging too.</p></li>
<li><p><strong><a href="https://todoist.com/">Todoist</a></strong>: I have tried out a lot of tools and finally ended up with the premium version of Todoist for task management. Its got everything right and highly flexible to organize your tasks and has full fledged apps on all platforms, browsers and even mail integration. Its almost easy to access Todoist from any context that I am working on and syncs across all devices seamlessly. Its really worth paying for this one, if not you could use the free version with some reduced features.</p></li>
<li><p><strong><a href="http://www.autohotkey.com/">AHK</a></strong>: This tiny little tool has innumerous uses and capabilities, but I just use very few of it to automate certain mundane tasks, store a list of <a href="http://ahkscript.org/docs/Hotstrings.htm">hotstring</a> and application <a href="http://ahkscript.org/docs/Hotkeys.htm">shortcut keys</a>. I have all my scripts synced across multiple PC&rsquo;s and have added a task in <a href="http://windows.microsoft.com/en-au/windows/schedule-task#1TC=windows-7">Task Scheduler</a> to run the scripts with highest privileges every time I log on.</p></li>
<li><p><strong><a href="https://agilebits.com/onepassword">1Password</a></strong>: It&rsquo;s a password manager and is available on all platforms and quite easy to get started with. I had been using the browser capabilities to store and sync passwords before which was working fine. But password managers solve a totally different problem of generating passwords (though they also sync generated passwords without which it would be more difficult to use them given that we have multiple devices these days) as a <a href="http://www.troyhunt.com/2011/03/only-secure-password-is-one-you-cant.html">secure password is one that you cannon remember</a>. 1Password has a one time fee for license, can shared by up to six family members living in the same household, has various synchronization options and mainly gives you the control where all the data is stored.</p></li>
<li><p><strong><a href="http://www.noisli.com/">Noisli</a>,<a href="https://soundcloud.com/">SoundCloud</a></strong>: Like to here music or have some background noise then these are for you. Noisli is a background noise generator, and lets you create different different combinations for your taste. SoundCloud has a lot of music tracks in them and it is free for online streaming.</p></li>
<li><p><strong><a href="http://www.telerik.com/fiddler">Fiddler</a></strong>: The free web debugging proxy for any browser, system or platform, this one is really an indispensable tool if you are doing any kind of web development.</p></li>
<li><p><strong><a href="https://feedly.com/">Feedly</a>,<a href="https://getpocket.com/a/">Pocket</a></strong>: Feedly is an RSS reader and has got quite a good UI and syncs across all devices and helps me keep all the reading list in one place. If you want to have some articles to read while offline then Pocket is for you. Pocket downloads the article while online onto devices and keeps it available for reading. I have been experimenting (for a little over a month) to go offline on mobile and use this for my offline reading if I don&rsquo;t have the Kindle.(The experiment is going pretty good if not for a very few times I had to turn connectivity on for finding bus routes and timings.)</p></li>
<li><p><strong><a href="http://www.scootersoftware.com/">Beyond Compare</a></strong>: Really its &lsquo;beyond&rsquo; just comparing files and is really useful for comparing and merging files. I use the pro version and really recommend it. Integrates nicely with Visual Studio and other IDE&rsquo;s and also provides context menu&rsquo;s on file explorer.</p></li>
<li><p><del>Resharper</del>: I had been using this on and off and realized that mostly I was using only the &lsquo;navigate to&rsquo; feature and decided on to start using the in built features of Visual Studio. <a href="https://twitter.com/ploeh">Mark Seemann</a> has quite an interesting <a href="http://blog.ploeh.dk/2013/02/04/BewareofProductivityTools/">article</a> on this and I couldn&rsquo;t agree any more. Resharper is also changing their licensing model going from a one time fee to a <a href="https://www.jetbrains.com/toolbox/">monthly fee</a>, which I don&rsquo;t personally prefer especially for a tool like R#.</p></li>
</ul>


<p>While there are some more, this is what I use most of the time. What tools help you at work. Do you have any better alternatives that I could try to replace something on this list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MSDN Magazine Article on Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/msdn-magazine-article-on-azure-key-vault/"/>
    <updated>2015-10-06T13:15:35+11:00</updated>
    <id>http://rahulpnath.com/blog/msdn-magazine-article-on-azure-key-vault</id>
    <content type="html"><![CDATA[<p>My first article on MSDN Magazine is published in the September 2015 edition and is available for <a href="https://msdn.microsoft.com/magazine/mt422585">reading online</a>. The article titled, &lsquo;<em>Microsoft Azure - Protect Sensitive Information with Azure Key Vault</em>&rsquo;, discusses on common problems in storing sensitive information in applications, benefits of Azure Key Vault and how we can quickly setup and start using it.</p>

<p>It was a great experience working with the MSDN magazine team, and got to learn a lot of things. Also special thanks to <a href="https://twitter.com/amitbapat">Amit Bapat</a> and <a href="https://twitter.com/sumedhbarde">Sumedh Barde</a> for doing the technical review and clarifying certain things for the article.</p>

<p><img src="http://rahulpnath.com/images/msdn_magazine_sep_2015.jpg" style="height:500px;" alt=""></p>

<p><em>If you are interested to <a href="http://blogs.msdn.com/b/msdnmagazine/archive/2009/12/24/9940803.aspx">write an article for the MSDN magazine</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Azure AD Application for Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/managing-azure-ad-application-for-key-vault/"/>
    <updated>2015-06-27T23:43:48+10:00</updated>
    <id>http://rahulpnath.com/blog/managing-azure-ad-application-for-key-vault</id>
    <content type="html"><![CDATA[<blockquote><p>Please check <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">here</a> for scripts using the latest PowerShell cmdlets.</p></blockquote>

<p>Access to the Key Vault is secured using AD application token, as we had seen in the &lsquo;<a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">Authenticating a Client Application with Azure Key Vault</a>&rsquo;. Quite often administrators require to manage the AD application created, performing activities like creating new AD applications, changing the certificate used to authenticate with the AD application, remove a certificate or even delete an application. All of these are possible using PowerShell scripts and administrators can even run this as part of their automation scripts. With the latest Azure PowerShell version(0.9.2 or higher), the Key Vault cmdlet&rsquo;s are included automatically and does not require any additional installations. For managing the Azure AD application we need to <a href="https://msdn.microsoft.com/en-us/library/azure/jj151815.aspx#bkmk_installmodule">install the Azure AD module for PowerShell</a> and import them into the PowerShell command prompt.</p>

<h4><strong>Creating AD application</strong></h4>

<p>The <em><a href="https://msdn.microsoft.com/en-us/library/dn986794.aspx">New-AzureADApplication</a></em> cmdlet is used to create a new Azure AD application. It also provides an option to specify the certificate details used to authenticate with the AD application at the time of creation itself. This can be done as a separate step if required, which is shown later in the post.</p>

<p>First we need a certificate that is to be used for authenticating against the AD application, for which I use the below commands to generate a test certificate</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>makecert -sv mykey.pvk -n &quot;cn=AD Test Vault Application&quot; ADTestVaultApplication.cer -b 03/03/2014 -e 06/05/2017 -r -len 2048
</span><span class='line'>pvk2pfx -pvk mykey.pvk -spc ADTestVaultApplication.cer -pfx ADTestVaultApplication.pfx -po test
</span></code></pre></td></tr></table></div></figure>


<p>This certificate is then used to create the AD application using the below script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$certificateFilePath</span> <span class="p">=</span> <span class="s2">&quot;C:\certificates\ADTestVaultApplication.cer&quot;</span>
</span><span class='line'><span class="nv">$certificate</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2</span>
</span><span class='line'><span class="nv">$certificate</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$certificateFilePath</span><span class="p">)</span>
</span><span class='line'><span class="nv">$rawCertificateData</span> <span class="p">=</span> <span class="nv">$certificate</span><span class="p">.</span><span class="n">GetRawCertData</span><span class="p">()</span>
</span><span class='line'><span class="nv">$credential</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$rawCertificateData</span><span class="p">)</span>
</span><span class='line'><span class="nv">$startDate</span><span class="p">=</span> <span class="no">[System.DateTime]</span><span class="p">::</span><span class="n">Now</span>
</span><span class='line'><span class="nv">$endDate</span> <span class="p">=</span> <span class="nv">$startDate</span><span class="p">.</span><span class="n">AddYears</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">$adApplication</span> <span class="p">=</span> <span class="nb">New-AzureADApplication</span> <span class="n">-DisplayName</span> <span class="s2">&quot;KeyVaultADApplication&quot;</span>
</span><span class='line'>  <span class="n">-HomePage</span>  <span class="s2">&quot;http://www.rahulpnath.com&quot;</span> <span class="n">-IdentifierUris</span> <span class="s2">&quot;http://www.rahulpnath.com&quot;</span>
</span><span class='line'>  <span class="n">-KeyValue</span>  <span class="nv">$credential</span> <span class="n">-KeyType</span> <span class="s2">&quot;AsymmetricX509Cert&quot;</span> <span class="n">-KeyUsage</span> <span class="s2">&quot;Verify&quot;</span>
</span><span class='line'>  <span class="n">-StartDate</span> <span class="nv">$startDate</span> <span class="n">-EndDate</span> <span class="nv">$endDate</span>
</span></code></pre></td></tr></table></div></figure>


<p>To associate the application created with the Key Vault, we need to create a service principal using <a href="https://msdn.microsoft.com/en-us/library/dn986799.aspx">New-AzureADServicePrincipal</a> and then associate that with the Vault using the <a href="https://msdn.microsoft.com/en-us/library/azure/dn903607.aspx">Set-AzureKeyVaultAccessPolicy</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$servicePrincipal</span> <span class="p">=</span> <span class="nb">New-AzureADServicePrincipal</span> <span class="n">-ApplicationId</span> <span class="nv">$adApplication</span><span class="p">.</span><span class="n">ApplicationId</span>
</span><span class='line'><span class="nb">Set-AzureKeyVaultAccessPolicy</span> <span class="n">-VaultName</span> <span class="s1">&#39;KeyVaultRahul&#39;</span> <span class="n">-ObjectId</span>  <span class="nv">$servicePrincipal</span><span class="p">.</span><span class="n">Id</span> <span class="n">-PermissionsToKeys</span> <span class="n">all</span> <span class="n">-PermissionsToSecrets</span> <span class="n">all</span>
</span><span class='line'><span class="nv">$ServicePrincipal</span><span class="p">.</span><span class="n">ApplicationId</span> <span class="c">#Outputs the ServicePrincipalName/AppPrincipalId</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Adding a Certificate</strong></h4>

<p>The <em><a href="https://msdn.microsoft.com/en-us/library/azure/dn194106.aspx">New-MsolServicePrincipalCredential</a></em> cmdlet is used to add a new credential to a service principal or to an application. The service principal is identified by supplying one of the following: object ID, appPrincipalID, service principal name (SPN).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$msolCredentials</span> <span class="p">=</span> <span class="nb">get-credential</span>
</span><span class='line'><span class="nb">connect-msolservice</span> <span class="n">-credential</span> <span class="nv">$msolCredentials</span>
</span><span class='line'><span class="nv">$certificateFilePath</span> <span class="p">=</span> <span class="s2">&quot;C:\certificates\ADTestVaultApplicationNew.cer&quot;</span>
</span><span class='line'><span class="nv">$x509Certificate2</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2</span>
</span><span class='line'><span class="nv">$x509Certificate2</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$certificateFilePath</span><span class="p">)</span>
</span><span class='line'><span class="nv">$rawCertData</span> <span class="p">=</span> <span class="nv">$x509Certificate2</span><span class="p">.</span><span class="n">GetRawCertData</span><span class="p">()</span>
</span><span class='line'><span class="nv">$credentialValue</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$rawCertData</span><span class="p">)</span>
</span><span class='line'><span class="nv">$startDate</span><span class="p">=</span> <span class="no">[System.DateTime]</span><span class="p">::</span><span class="n">Now</span>
</span><span class='line'><span class="nv">$endDate</span> <span class="p">=</span> <span class="nv">$startDate</span><span class="p">.</span><span class="n">AddYears</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'><span class="nb">New-MsolServicePrincipalCredential</span> <span class="n">-ServicePrincipalName</span> <span class="nv">$ServicePrincipal</span><span class="p">.</span><span class="n">ApplicationId</span> <span class="n">-Type</span> <span class="n">Asymmetric</span> <span class="n">-Value</span> <span class="nv">$credentialValue</span> <span class="n">-StartDate</span> <span class="nv">$startDate</span> <span class="n">-EndDate</span>   <span class="nv">$endDate</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Removing a Certificate</strong></h4>

<p>Whenever a credential gets compromised or as part of regular credential refresh, administrators would want to remove an old certificate and replace with a new one. The <a href="https://msdn.microsoft.com/en-us/library/azure/dn194125.aspx">Remove-MsolServicePrincipalCredential</a> cmdlet is used to remove a credential key from a service principal by specifying the key ID for the credential and the objectID/applicationID/ServicePrincipalName to identify the service principal. To get the key ID of an existing credential, <a href="https://msdn.microsoft.com/en-us/library/azure/dn194091.aspx">Get-MsolServicePrincipalCredential</a> cmdlet can be used, which returns the list of credentials associated with a service principal. The below script just removes the first credential, you could loop through and remove all.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$servicePrincipalCredential</span> <span class="p">=</span> <span class="nb">Get-MsolServicePrincipalCredential</span> <span class="n">-ServicePrincipalName</span> <span class="nv">$ServicePrincipal</span><span class="p">.</span><span class="n">ApplicationId</span> <span class="n">-ReturnKeyValues</span> <span class="n">0</span>
</span><span class='line'><span class="nb">Remove-MsolServicePrincipalCredential</span> <span class="n">-ServicePrincipalName</span> <span class="nv">$ServicePrincipal</span><span class="p">.</span><span class="n">ApplicationId</span> <span class="n">-KeyIds</span> <span class="nv">$servicePrincipalCredential</span><span class="p">[</span><span class="n">0</span><span class="p">].</span><span class="n">KeyId</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Delete an application</strong></h4>

<p>The <a href="https://msdn.microsoft.com/en-us/library/azure/dn194113.aspx">Remove-MsolServicePrincipal</a> cmdlet removes a service principal from Microsoft Azure Active Directory, by specifying objectID/applicationID/ServicePrincipalName to identify the service principal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Remove-MsolServicePrincipal</span> <span class="n">-ObjectId</span> <span class="p">&lt;</span><span class="n">Guid</span><span class="p">&gt;</span>
</span><span class='line'><span class="n">Or</span>
</span><span class='line'><span class="nb">Remove-MsolServicePrincipal</span> <span class="n">-AppPrincipalId</span> <span class="p">&lt;</span><span class="n">Guid</span><span class="p">&gt;</span>
</span><span class='line'><span class="n">Or</span>
</span><span class='line'><span class="nb">Remove-MsolServicePrincipal</span> <span class="n">-ServicePrincipalName</span> <span class="p">&lt;</span><span class="n">string</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Managing the AD application is a very important and necessary process in the life cycle of a Key Vault, as the access to the Vault is controlled using that. Certificates securing the AD applciation should be rolled/updated frequently and application permissions should be reviewed often to make sure that all applications have only the required permissions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When your Architecture Screams Technology!]]></title>
    <link href="http://rahulpnath.com/blog/when-your-architecture-screams-technology/"/>
    <updated>2015-05-04T03:13:55+10:00</updated>
    <id>http://rahulpnath.com/blog/when-your-architecture-screams-technology</id>
    <content type="html"><![CDATA[<p>In todays world the problem&rsquo;s that are solved by technology are innumerous and it is not just a single system that the customer is looking for. They usually need multiple systems solving different problems around their core domain. But as developers, we usually get carried away by the technology aspect of it, giving lesser importance to the problem or domain itself. Whenever we have multiple systems targeting the same core domain of the customer, we see that what gets reused across these systems are the &lsquo;<a href="https://msdn.microsoft.com/en-in/library/ee658105.aspx">Crosscutting concerns</a>&rsquo; like Caching, Authentication, Logging, Exception Management etc. But is this what really should be getting shared? Are our customer trying to solve these crosscutting issues? Should it not be their core domain logics and rules and validations that get shared. The Architecture Screams Technology preventing anything else but these crosscutting concerns (which are not technology specific) the only thing that is shareable across systems.</p>

<h3>Common Traits of Technology Coupling</h3>

<p>There are a lot of traits that indicate this dependency on technology and makes a system modeled around technology stand out from the one modeled around the domain. Below are some of the things that I have figured out are very strong hints indicating a tight coupling with the technology. The earlier we identify such smells the better we are to retract and get ourselves align to the needs of the domain and not the technology.</p>

<p><strong>Solution Folders and Projects</strong></p>

<p>Take a look at your solution directory from the top level and what do you infer that it is all about. Does it have folders reflecting technology stacks like ASP.Net, Web API, WPF, Ruby, NHibernate etc or does it reflect the domain space that you are trying to solve like Shipping, Stock Management, Customer Relations? This should give the first hint on what the Architecture of your application reflects. But you could easily get tricked here as &lsquo;what you see might not be what it is&rsquo;, so lets take a step in.
Before we do you might ask, Are we not building a web-site for the customer so what is wrong in having the structure indicate that? We are building a solution that solves certain problems for our customer, it is only that it is getting delivered or accessed via a web-site. Tomorrow this might be delivered via a mobile application or a rich desktop client or even a console application so having it tightly bound to web delivery mechanism is only going to hinder us on the way forward.</p>

<p><strong>Single Large Interface Project</strong></p>

<p>Having all the interfaces used across the application to be in a single interfaces project is something that I have come across quite often and this clearly indicates that something is definitely wrong here. As mentioned in <a href="http://www.amazon.in/gp/product/0131857258/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0131857258&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=VVMXRINDZWYFRWP4">Agile Principles, Patterns, and Practices in C#</a> by <a href="https://twitter.com/unclebobmartin">Uncle Bob</a>, Interfaces should belong to the clients and should stay close to them. If multiple clients needs to use the same interface then probably you could move them out into a common library. But all interfaces in a single project possibly means you have more of <a href="http://martinfowler.com/bliki/HeaderInterface.html">Header Interfaces</a> and not <a href="http://blog.ploeh.dk/2013/01/10/RoleInterfaceRoleHint/">Role interfaces</a> as that would primarily be specific to the clients that use them. Also watch out for the references that these projects have and whether they have any technology specific references which would possibly indicate a <a href="http://en.wikipedia.org/wiki/Leaky_abstraction">leaky abstraction</a>.</p>

<p><strong>Single Large Entities Project</strong></p>

<p>Same as interfaces, this is another common thing that is quite common and might possible indicate a problem in the way a domain is modeled. In a complex domain it is highly likely that an entity is not the same everywhere and is very context specific. A customer might have a different meaning in the context of Shipping and totally different in context of Customer Relations, but having a single customer that is acts as a super set for all these contexts is a problem. Also having all the entities together probably means that enough thought has not been put into separating what parts of the system changes together and what does not. This is a clear indication of poorly modeled domain. On top of this if you are using any kind of O/RM technologies to map these to the database then it just adds on to your problems when you use a single large context to map to the database.</p>

<p><strong>No Explicit boundaries</strong></p>

<p>It&rsquo;s very likely that the application talks across difference boundaries and interacts with different systems. Some of them might be external, like a third party service and some other are internal, most commonly a database. If you see the same entities that are passed along at all these boundaries then its very likely that you have a leaky abstraction, which again would get reflected by looking at the reference folder of Entities/Interfaces project. This kind of abstractions tend to break the entire system when any of these boundaries changes, causing a  rippling effect in the code.</p>

<p><strong>Source Control Commit History</strong></p>

<p>Looking at the previous commits in your source control you can tell if your dependencies are well managed and if there are a lot of technology coupling. If you have commits that have large number of files associated especially one&rsquo;s modified then it again means that you have a lot of leaking abstractions. This leak could be a technology leak or even a function leak, where the abstractions are not well contained which causes a ripple effect when anything associated changes.</p>

<p><strong>Anemic Domain Model</strong></p>

<p>This is one of the most common and greatest indication of technology coupling and lack of proper modeling of the problem domain. Open up any of the classes in your entities project and all you see are properties with getters and setters with hardly any function in them. Object Oriented Programming brought data and functions together, but hardly do we see them together. We either have classes that act as data bags or classes that use these data classes to perform transactions over them. <a href="http://www.martinfowler.com/bliki/AnemicDomainModel.html">Anemic Domain Model </a> works fine for applications that perform basic <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> operations and with very less business logic in them, but as complexity grows it becomes very difficult to maintain and extend. Anemia in the entities is the biggest reason why we end up having only cross-cutting features to be shared across applications for the same domain.</p>

<h3>Onion Architecture</h3>

<p>Technology should be only seen as enablers for solving the problems and it should never get in way of the original problem. Onion Architecture or Hexagonal Architecture try to solve this problem of keeping the domain model clean and separate and have the technology dependency point into it. This enables switching out the technology specific implementations at any point and also enabling us to reuse the core domain components across various systems or hosts.</p>

<blockquote><p>&ldquo;The overriding rule that makes this architecture work is <em>The Dependency Rule</em>. This rule says that source code dependencies can only point inwards. Nothing in an inner circle can know anything at all about something in an outer circle. In particular, the name of something declared in an outer circle must not be mentioned by the code in the an inner circle. That includes, functions, classes. variables, or any other named software entity.&rdquo;</p></blockquote>

<p><a href="http://bit.ly/cleanarchitecture" class="center" title="Image By Uncle Bob, from http://bit.ly/cleanarchitecture"><img src="http://rahulpnath.com/images/clean_architecture.jpg" class="center" alt="Image By Uncle Bob, from http://bit.ly/cleanarchitecture"></a></p>

<p>Screaming technology is a common thing in many a projects and it is not really a big problem when the domain you are trying to solve is not that complex. But usually that is not the case and we have very complex domain logics, multiple systems targeting for different areas and highly volatile requirements. These are just some of the most common indications that I have come across that indicate a tightly coupled solution. The <a href="http://www.objectmentor.com/resources/articles/CoffeeMaker.pdf">Mark IV Special Coffee Maker</a> problem presented by Uncle Bob in his <a href="Agile%20Principles,%20Patterns,%20and%20Practices%20in%20C#](http://www.amazon.in/gp/product/0131857258/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0131857258&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=VVMXRINDZWYFRWP4">book</a>, presents us with an interesting modeling problem, shows some most common errors, why they are errors and possible ways to tackle them. That just helps to get started to think on the right path, to tackle issues in larger domains, methodologies like <a href="http://www.amazon.in/gp/product/0321125215/ref=as_li_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0321125215&amp;linkCode=as2&amp;tag=rahulpnath-21&amp;linkId=F6WJ7JK5CYQOIJV6">Domain Driven Design</a> would help us to solve the actual domain problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault in a Real World Application]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-in-a-real-world-application/"/>
    <updated>2015-04-25T16:16:09+10:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-in-a-real-world-application</id>
    <content type="html"><![CDATA[<blockquote><p>Please check <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">here</a> for scripts using the latest PowerShell cmdlets.</p></blockquote>

<p>Over the last couple of posts we have seen how to <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">Get Started with Azure Key Vault</a>, <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">Authenticate a Client Application with the Vault</a> and also on how the vault can be used as an <a href="http://www.rahulpnath.com/blog/moving-sensitive-information-from-configuration-file-to-azure-key-vault/">alternate to the configuration file to keep sensitive information secure</a>. In this post we will explore into how a key vault can be fit into the life-cycle of an application, configuring application to use the keyvault for different deployments and also on how to manage the keys/secrets for these different deployments. Any application that uses the Key Vault to manage keys and other sensitive information, should be able to switch easily to use the vault configured for it.</p>

<h3>Configuring Client-Applications to use the Key vault</h3>

<p>Objects are uniquely identified within Azure Key Vault using a URL such that no two objects in the system, regardless of geo-location, have the same URL. The complete URL to an object is called the Object Identifier and consists of a prefix portion that identifies the Key Vault, the object type, a user provided Object Name, and an Object Version. The <em>object-name</em> is case-insensitive and immutable. When an object is first created it is given a unique version identifier and is marked as the current version of the object. Creation of a new instance with the same object name gives the new object a unique version identifier and causes it to become the current version. When querying for an object <em>object-version</em> is optional and if not provided will point to the current version of the given object-name.</p>

<blockquote>https://{keyvault-name}.vault.azure.net/{object-type}/{object-name}/{object-version}</blockquote>


<p>From a client application all we need to have is to the configuration for the key vault url, and configurations to identify key/secret name which can include the version if required. This could be saved in the application&rsquo;s configuration file as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;KeyVaultUrl&quot;</span> <span class="na">value=</span><span class="s">&quot;https://testvaultrahul.vault.azure.net&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;SqlConnectionString&quot;</span> <span class="na">value=</span><span class="s">&quot;SqlConnectionString&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key =</span><span class="s">&quot;SecretWithVersion&quot;</span> <span class="na">value=</span><span class="s">&quot;SecretWithVersion/cfedea84815e4ca8bc19cf8eb943ee13&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;CryptoKey&quot;</span> <span class="na">value=</span><span class="s">&quot;CryptoKey&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/appSettings&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above configuration I assume that when these configurations are used from the code, we know that if a value is a key or secret. We could have an extended configuration or string prefix&rsquo;s (key<em> or secret</em>) to indicate this and then have the code automatically detect it too if required to decouple that, but I don&rsquo;t see it really necessary. So the application at any time would only depend on these configured values, and we can easily switch it use any vault configured with the required key/secret values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">keyVaultIdentifierHelper</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultIdentifierHelper</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="s">&quot;KeyVaultUrl&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">connectionStringIdentifier</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">keyVaultIdentifierHelper</span><span class="p">.</span><span class="n">GetSecretIdentifier</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="s">&quot;SqlConnectionString&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">connectionStringSecret</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">GetSecretAsync</span><span class="p">(</span><span class="n">connectionStringIdentifier</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>KeyVaultIdentifierHelper</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">KeyVaultIdentifierHelper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">KeyFormat</span> <span class="p">=</span> <span class="s">&quot;{0}/keys/{1}&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">SecretFormat</span> <span class="p">=</span> <span class="s">&quot;{0}/secrets/{1}&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">keyVaultUrl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">KeyVaultIdentifierHelper</span><span class="p">(</span><span class="kt">string</span> <span class="n">keyVaultUrl</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">keyVaultUrl</span> <span class="p">=</span> <span class="n">keyVaultUrl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetKeyIdentifier</span><span class="p">(</span><span class="kt">string</span> <span class="n">keyName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">KeyFormat</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">keyVaultUrl</span><span class="p">,</span> <span class="n">keyName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetSecretIdentifier</span><span class="p">(</span><span class="kt">string</span> <span class="n">secretName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">SecretFormat</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">keyVaultUrl</span><span class="p">,</span> <span class="n">secretName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Managing the Key Vault for Multiple Deployments</h3>

<p>Now that we have decoupled the application from the Key Vault, we need to see how to configure key vaults to cater for multiple deployments. In any application development life-cycle, there would be multiple deployments at a given time for the application to cater for different roles - developers, testers and maybe a production one too. It is very likely that the connection strings and other sensitive information would be deployment specific and we would want to keep them separate. Best way to achieve this would be to create Key vault per deployment so that this separation is clearly maintained. You could check on the <a href="http://azure.microsoft.com/en-in/pricing/details/key-vault/">Key Vault Pricing</a> on how this would affect your overall cost. For each of these deployments you would need to make sure that all the required keys/secrets are added with valid values. Since this can soon end up as a repeated activity, it is best to automate this (using powershell scripts or your own application)</p>

<h3>Restricting Permissions to Key Vault</h3>

<p>We had seen how to <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">authenticate a client application with a Key Vault</a> using an Active Directory (AD) application, and how to set various access policies for these application&rsquo;s. Applications should be given only the minimum set of permissions that it requires to operate on, most probably this would be only the read permissions. For <a href="https://github.com/rahulpnath/AzureKeyVaultExplorer">administrative application&rsquo;s</a> we would want to give all permissions so that it can modify the vault keys/secrets as required. For such a scenario it is best to have, two (or more) separate AD application&rsquo;s created and have separate permissions provided.</p>

<p><img class="center" alt="Multiple AD applications to access key vault with different permissions" src="http://rahulpnath.com/images/multiple_ad_application.PNG" /></p>

<h3>What all should be there in my configuration file?</h3>

<p>All your <a href="http://www.rahulpnath.com/blog/moving-sensitive-information-from-configuration-file-to-azure-key-vault/">sensitive information should be moved out of your application configuration file</a>, and Key Vault is the one place to have them all. The application&rsquo;s configuration file should only have the azure key vault url and the AD application id and certificate identifier (thumb print) that can be used to authenticate with the AD. Yes it is advisable to use the <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">certificate authentication mechanism</a> as opposed to the secret mechanism, if not you would have to put the secret in your configuration file, which would be like &lsquo;giving a thief the key to your safe&rsquo;.Additionally you could also have the key identifier mappings in the configuration file that the application can use to map to key/secret in the vault as we had seen above.</p>

<p>By doing this we have fully decoupled the application and its dependency with the vault store and have also protected all our sensitive information. This also helps in having the application to be tested with configurations appropriate to the type of deployment. Hope this helps you in developing your application against the key vault.</p>
]]></content>
  </entry>
  
</feed>
